<?php
/**
 * FineTuneChatRequestInput
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * FineTuneChatRequestInput Class Doc Comment
 *
 * @category Class
 * @description The per-line training example of a fine-tuning input file for chat models using the supervised method.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FineTuneChatRequestInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FineTuneChatRequestInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'messages' => '\JeedomOpenAI\Model\FineTuneChatRequestInputMessagesInner[]',
        'tools' => '\JeedomOpenAI\Model\ChatCompletionTool[]',
        'parallel_tool_calls' => 'bool',
        'functions' => '\JeedomOpenAI\Model\ChatCompletionFunctions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'messages' => null,
        'tools' => null,
        'parallel_tool_calls' => null,
        'functions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'messages' => false,
        'tools' => false,
        'parallel_tool_calls' => false,
        'functions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'messages' => 'messages',
        'tools' => 'tools',
        'parallel_tool_calls' => 'parallel_tool_calls',
        'functions' => 'functions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'messages' => 'setMessages',
        'tools' => 'setTools',
        'parallel_tool_calls' => 'setParallelToolCalls',
        'functions' => 'setFunctions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'messages' => 'getMessages',
        'tools' => 'getTools',
        'parallel_tool_calls' => 'getParallelToolCalls',
        'functions' => 'getFunctions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('tools', $data ?? [], null);
        $this->setIfExists('parallel_tool_calls', $data ?? [], true);
        $this->setIfExists('functions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['messages']) && (count($this->container['messages']) < 1)) {
            $invalidProperties[] = "invalid value for 'messages', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['functions']) && (count($this->container['functions']) > 128)) {
            $invalidProperties[] = "invalid value for 'functions', number of items must be less than or equal to 128.";
        }

        if (!is_null($this->container['functions']) && (count($this->container['functions']) < 1)) {
            $invalidProperties[] = "invalid value for 'functions', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets messages
     *
     * @return \JeedomOpenAI\Model\FineTuneChatRequestInputMessagesInner[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \JeedomOpenAI\Model\FineTuneChatRequestInputMessagesInner[]|null $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }


        if ((count($messages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $messages when calling FineTuneChatRequestInput., number of items must be greater than or equal to 1.');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets tools
     *
     * @return \JeedomOpenAI\Model\ChatCompletionTool[]|null
     */
    public function getTools()
    {
        return $this->container['tools'];
    }

    /**
     * Sets tools
     *
     * @param \JeedomOpenAI\Model\ChatCompletionTool[]|null $tools A list of tools the model may generate JSON inputs for.
     *
     * @return self
     */
    public function setTools($tools)
    {
        if (is_null($tools)) {
            throw new \InvalidArgumentException('non-nullable tools cannot be null');
        }
        $this->container['tools'] = $tools;

        return $this;
    }

    /**
     * Gets parallel_tool_calls
     *
     * @return bool|null
     */
    public function getParallelToolCalls()
    {
        return $this->container['parallel_tool_calls'];
    }

    /**
     * Sets parallel_tool_calls
     *
     * @param bool|null $parallel_tool_calls Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
     *
     * @return self
     */
    public function setParallelToolCalls($parallel_tool_calls)
    {
        if (is_null($parallel_tool_calls)) {
            throw new \InvalidArgumentException('non-nullable parallel_tool_calls cannot be null');
        }
        $this->container['parallel_tool_calls'] = $parallel_tool_calls;

        return $this;
    }

    /**
     * Gets functions
     *
     * @return \JeedomOpenAI\Model\ChatCompletionFunctions[]|null
     * @deprecated
     */
    public function getFunctions()
    {
        return $this->container['functions'];
    }

    /**
     * Sets functions
     *
     * @param \JeedomOpenAI\Model\ChatCompletionFunctions[]|null $functions A list of functions the model may generate JSON inputs for.
     *
     * @return self
     * @deprecated
     */
    public function setFunctions($functions)
    {
        if (is_null($functions)) {
            throw new \InvalidArgumentException('non-nullable functions cannot be null');
        }

        if ((count($functions) > 128)) {
            throw new \InvalidArgumentException('invalid value for $functions when calling FineTuneChatRequestInput., number of items must be less than or equal to 128.');
        }
        if ((count($functions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $functions when calling FineTuneChatRequestInput., number of items must be greater than or equal to 1.');
        }
        $this->container['functions'] = $functions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


