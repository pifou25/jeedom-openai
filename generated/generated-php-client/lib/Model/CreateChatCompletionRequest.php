<?php
/**
 * CreateChatCompletionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * CreateChatCompletionRequest Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateChatCompletionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateChatCompletionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'metadata' => 'array<string,string>',
        'temperature' => 'float',
        'top_p' => 'float',
        'user' => 'string',
        'messages' => '\JeedomOpenAI\Model\ChatCompletionRequestMessage[]',
        'model' => '\JeedomOpenAI\Model\ModelIdsShared',
        'modalities' => 'string[]',
        'reasoning_effort' => '\JeedomOpenAI\Model\ReasoningEffort',
        'max_completion_tokens' => 'int',
        'frequency_penalty' => 'float',
        'presence_penalty' => 'float',
        'web_search_options' => '\JeedomOpenAI\Model\WebSearch',
        'top_logprobs' => 'int',
        'response_format' => '\JeedomOpenAI\Model\CreateChatCompletionRequestAllOfResponseFormat',
        'service_tier' => 'string',
        'audio' => '\JeedomOpenAI\Model\CreateChatCompletionRequestAllOfAudio',
        'store' => 'bool',
        'stream' => 'bool',
        'stop' => '\JeedomOpenAI\Model\StopConfiguration',
        'logit_bias' => 'array<string,int>',
        'logprobs' => 'bool',
        'max_tokens' => 'int',
        'n' => 'int',
        'prediction' => '\JeedomOpenAI\Model\CreateChatCompletionRequestAllOfPrediction',
        'seed' => 'int',
        'stream_options' => '\JeedomOpenAI\Model\ChatCompletionStreamOptions',
        'tools' => '\JeedomOpenAI\Model\ChatCompletionTool[]',
        'tool_choice' => '\JeedomOpenAI\Model\ChatCompletionToolChoiceOption',
        'parallel_tool_calls' => 'bool',
        'function_call' => '\JeedomOpenAI\Model\CreateChatCompletionRequestAllOfFunctionCall',
        'functions' => '\JeedomOpenAI\Model\ChatCompletionFunctions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'metadata' => null,
        'temperature' => null,
        'top_p' => null,
        'user' => null,
        'messages' => null,
        'model' => null,
        'modalities' => null,
        'reasoning_effort' => null,
        'max_completion_tokens' => null,
        'frequency_penalty' => null,
        'presence_penalty' => null,
        'web_search_options' => null,
        'top_logprobs' => null,
        'response_format' => null,
        'service_tier' => null,
        'audio' => null,
        'store' => null,
        'stream' => null,
        'stop' => null,
        'logit_bias' => null,
        'logprobs' => null,
        'max_tokens' => null,
        'n' => null,
        'prediction' => null,
        'seed' => 'int64',
        'stream_options' => null,
        'tools' => null,
        'tool_choice' => null,
        'parallel_tool_calls' => null,
        'function_call' => null,
        'functions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'metadata' => true,
        'temperature' => true,
        'top_p' => true,
        'user' => false,
        'messages' => false,
        'model' => false,
        'modalities' => true,
        'reasoning_effort' => true,
        'max_completion_tokens' => true,
        'frequency_penalty' => true,
        'presence_penalty' => true,
        'web_search_options' => false,
        'top_logprobs' => true,
        'response_format' => false,
        'service_tier' => true,
        'audio' => true,
        'store' => true,
        'stream' => true,
        'stop' => true,
        'logit_bias' => true,
        'logprobs' => true,
        'max_tokens' => true,
        'n' => true,
        'prediction' => true,
        'seed' => true,
        'stream_options' => true,
        'tools' => false,
        'tool_choice' => false,
        'parallel_tool_calls' => false,
        'function_call' => false,
        'functions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'metadata' => 'metadata',
        'temperature' => 'temperature',
        'top_p' => 'top_p',
        'user' => 'user',
        'messages' => 'messages',
        'model' => 'model',
        'modalities' => 'modalities',
        'reasoning_effort' => 'reasoning_effort',
        'max_completion_tokens' => 'max_completion_tokens',
        'frequency_penalty' => 'frequency_penalty',
        'presence_penalty' => 'presence_penalty',
        'web_search_options' => 'web_search_options',
        'top_logprobs' => 'top_logprobs',
        'response_format' => 'response_format',
        'service_tier' => 'service_tier',
        'audio' => 'audio',
        'store' => 'store',
        'stream' => 'stream',
        'stop' => 'stop',
        'logit_bias' => 'logit_bias',
        'logprobs' => 'logprobs',
        'max_tokens' => 'max_tokens',
        'n' => 'n',
        'prediction' => 'prediction',
        'seed' => 'seed',
        'stream_options' => 'stream_options',
        'tools' => 'tools',
        'tool_choice' => 'tool_choice',
        'parallel_tool_calls' => 'parallel_tool_calls',
        'function_call' => 'function_call',
        'functions' => 'functions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'metadata' => 'setMetadata',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP',
        'user' => 'setUser',
        'messages' => 'setMessages',
        'model' => 'setModel',
        'modalities' => 'setModalities',
        'reasoning_effort' => 'setReasoningEffort',
        'max_completion_tokens' => 'setMaxCompletionTokens',
        'frequency_penalty' => 'setFrequencyPenalty',
        'presence_penalty' => 'setPresencePenalty',
        'web_search_options' => 'setWebSearchOptions',
        'top_logprobs' => 'setTopLogprobs',
        'response_format' => 'setResponseFormat',
        'service_tier' => 'setServiceTier',
        'audio' => 'setAudio',
        'store' => 'setStore',
        'stream' => 'setStream',
        'stop' => 'setStop',
        'logit_bias' => 'setLogitBias',
        'logprobs' => 'setLogprobs',
        'max_tokens' => 'setMaxTokens',
        'n' => 'setN',
        'prediction' => 'setPrediction',
        'seed' => 'setSeed',
        'stream_options' => 'setStreamOptions',
        'tools' => 'setTools',
        'tool_choice' => 'setToolChoice',
        'parallel_tool_calls' => 'setParallelToolCalls',
        'function_call' => 'setFunctionCall',
        'functions' => 'setFunctions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'metadata' => 'getMetadata',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP',
        'user' => 'getUser',
        'messages' => 'getMessages',
        'model' => 'getModel',
        'modalities' => 'getModalities',
        'reasoning_effort' => 'getReasoningEffort',
        'max_completion_tokens' => 'getMaxCompletionTokens',
        'frequency_penalty' => 'getFrequencyPenalty',
        'presence_penalty' => 'getPresencePenalty',
        'web_search_options' => 'getWebSearchOptions',
        'top_logprobs' => 'getTopLogprobs',
        'response_format' => 'getResponseFormat',
        'service_tier' => 'getServiceTier',
        'audio' => 'getAudio',
        'store' => 'getStore',
        'stream' => 'getStream',
        'stop' => 'getStop',
        'logit_bias' => 'getLogitBias',
        'logprobs' => 'getLogprobs',
        'max_tokens' => 'getMaxTokens',
        'n' => 'getN',
        'prediction' => 'getPrediction',
        'seed' => 'getSeed',
        'stream_options' => 'getStreamOptions',
        'tools' => 'getTools',
        'tool_choice' => 'getToolChoice',
        'parallel_tool_calls' => 'getParallelToolCalls',
        'function_call' => 'getFunctionCall',
        'functions' => 'getFunctions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODALITIES_TEXT = 'text';
    public const MODALITIES_AUDIO = 'audio';
    public const SERVICE_TIER_AUTO = 'auto';
    public const SERVICE_TIER__DEFAULT = 'default';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModalitiesAllowableValues()
    {
        return [
            self::MODALITIES_TEXT,
            self::MODALITIES_AUDIO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceTierAllowableValues()
    {
        return [
            self::SERVICE_TIER_AUTO,
            self::SERVICE_TIER__DEFAULT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], 1);
        $this->setIfExists('top_p', $data ?? [], 1);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('modalities', $data ?? [], null);
        $this->setIfExists('reasoning_effort', $data ?? [], null);
        $this->setIfExists('max_completion_tokens', $data ?? [], null);
        $this->setIfExists('frequency_penalty', $data ?? [], 0);
        $this->setIfExists('presence_penalty', $data ?? [], 0);
        $this->setIfExists('web_search_options', $data ?? [], null);
        $this->setIfExists('top_logprobs', $data ?? [], null);
        $this->setIfExists('response_format', $data ?? [], null);
        $this->setIfExists('service_tier', $data ?? [], 'auto');
        $this->setIfExists('audio', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], false);
        $this->setIfExists('stream', $data ?? [], false);
        $this->setIfExists('stop', $data ?? [], null);
        $this->setIfExists('logit_bias', $data ?? [], null);
        $this->setIfExists('logprobs', $data ?? [], false);
        $this->setIfExists('max_tokens', $data ?? [], null);
        $this->setIfExists('n', $data ?? [], 1);
        $this->setIfExists('prediction', $data ?? [], null);
        $this->setIfExists('seed', $data ?? [], null);
        $this->setIfExists('stream_options', $data ?? [], null);
        $this->setIfExists('tools', $data ?? [], null);
        $this->setIfExists('tool_choice', $data ?? [], null);
        $this->setIfExists('parallel_tool_calls', $data ?? [], true);
        $this->setIfExists('function_call', $data ?? [], null);
        $this->setIfExists('functions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['temperature']) && ($this->container['temperature'] > 2)) {
            $invalidProperties[] = "invalid value for 'temperature', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['temperature']) && ($this->container['temperature'] < 0)) {
            $invalidProperties[] = "invalid value for 'temperature', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['top_p']) && ($this->container['top_p'] > 1)) {
            $invalidProperties[] = "invalid value for 'top_p', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['top_p']) && ($this->container['top_p'] < 0)) {
            $invalidProperties[] = "invalid value for 'top_p', must be bigger than or equal to 0.";
        }

        if ($this->container['messages'] === null) {
            $invalidProperties[] = "'messages' can't be null";
        }
        if ((count($this->container['messages']) < 1)) {
            $invalidProperties[] = "invalid value for 'messages', number of items must be greater than or equal to 1.";
        }

        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if (!is_null($this->container['frequency_penalty']) && ($this->container['frequency_penalty'] > 2)) {
            $invalidProperties[] = "invalid value for 'frequency_penalty', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['frequency_penalty']) && ($this->container['frequency_penalty'] < -2)) {
            $invalidProperties[] = "invalid value for 'frequency_penalty', must be bigger than or equal to -2.";
        }

        if (!is_null($this->container['presence_penalty']) && ($this->container['presence_penalty'] > 2)) {
            $invalidProperties[] = "invalid value for 'presence_penalty', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['presence_penalty']) && ($this->container['presence_penalty'] < -2)) {
            $invalidProperties[] = "invalid value for 'presence_penalty', must be bigger than or equal to -2.";
        }

        if (!is_null($this->container['top_logprobs']) && ($this->container['top_logprobs'] > 20)) {
            $invalidProperties[] = "invalid value for 'top_logprobs', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['top_logprobs']) && ($this->container['top_logprobs'] < 0)) {
            $invalidProperties[] = "invalid value for 'top_logprobs', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getServiceTierAllowableValues();
        if (!is_null($this->container['service_tier']) && !in_array($this->container['service_tier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service_tier', must be one of '%s'",
                $this->container['service_tier'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['n']) && ($this->container['n'] > 128)) {
            $invalidProperties[] = "invalid value for 'n', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['n']) && ($this->container['n'] < 1)) {
            $invalidProperties[] = "invalid value for 'n', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['functions']) && (count($this->container['functions']) > 128)) {
            $invalidProperties[] = "invalid value for 'functions', number of items must be less than or equal to 128.";
        }

        if (!is_null($this->container['functions']) && (count($this->container['functions']) < 1)) {
            $invalidProperties[] = "invalid value for 'functions', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            array_push($this->openAPINullablesSetToNull, 'temperature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temperature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($temperature) && ($temperature > 2)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling CreateChatCompletionRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($temperature) && ($temperature < 0)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling CreateChatCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float|null $top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        if (is_null($top_p)) {
            array_push($this->openAPINullablesSetToNull, 'top_p');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_p', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($top_p) && ($top_p > 1)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling CreateChatCompletionRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($top_p) && ($top_p < 0)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling CreateChatCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \JeedomOpenAI\Model\ChatCompletionRequestMessage[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \JeedomOpenAI\Model\ChatCompletionRequestMessage[] $messages A list of messages comprising the conversation so far. Depending on the [model](/docs/models) you use, different message types (modalities) are supported, like [text](/docs/guides/text-generation), [images](/docs/guides/vision), and [audio](/docs/guides/audio).
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }


        if ((count($messages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $messages when calling CreateChatCompletionRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \JeedomOpenAI\Model\ModelIdsShared
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \JeedomOpenAI\Model\ModelIdsShared $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets modalities
     *
     * @return string[]|null
     */
    public function getModalities()
    {
        return $this->container['modalities'];
    }

    /**
     * Sets modalities
     *
     * @param string[]|null $modalities Output types that you would like the model to generate. Most models are capable of generating text, which is the default:  `[\"text\"]`  The `gpt-4o-audio-preview` model can also be used to  [generate audio](/docs/guides/audio). To request that this model generate  both text and audio responses, you can use:  `[\"text\", \"audio\"]`
     *
     * @return self
     */
    public function setModalities($modalities)
    {
        if (is_null($modalities)) {
            array_push($this->openAPINullablesSetToNull, 'modalities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modalities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getModalitiesAllowableValues();
        if (!is_null($modalities) && array_diff($modalities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'modalities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modalities'] = $modalities;

        return $this;
    }

    /**
     * Gets reasoning_effort
     *
     * @return \JeedomOpenAI\Model\ReasoningEffort|null
     */
    public function getReasoningEffort()
    {
        return $this->container['reasoning_effort'];
    }

    /**
     * Sets reasoning_effort
     *
     * @param \JeedomOpenAI\Model\ReasoningEffort|null $reasoning_effort reasoning_effort
     *
     * @return self
     */
    public function setReasoningEffort($reasoning_effort)
    {
        if (is_null($reasoning_effort)) {
            array_push($this->openAPINullablesSetToNull, 'reasoning_effort');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reasoning_effort', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reasoning_effort'] = $reasoning_effort;

        return $this;
    }

    /**
     * Gets max_completion_tokens
     *
     * @return int|null
     */
    public function getMaxCompletionTokens()
    {
        return $this->container['max_completion_tokens'];
    }

    /**
     * Sets max_completion_tokens
     *
     * @param int|null $max_completion_tokens An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
     *
     * @return self
     */
    public function setMaxCompletionTokens($max_completion_tokens)
    {
        if (is_null($max_completion_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_completion_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_completion_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_completion_tokens'] = $max_completion_tokens;

        return $this;
    }

    /**
     * Gets frequency_penalty
     *
     * @return float|null
     */
    public function getFrequencyPenalty()
    {
        return $this->container['frequency_penalty'];
    }

    /**
     * Sets frequency_penalty
     *
     * @param float|null $frequency_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * @return self
     */
    public function setFrequencyPenalty($frequency_penalty)
    {
        if (is_null($frequency_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'frequency_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frequency_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($frequency_penalty) && ($frequency_penalty > 2)) {
            throw new \InvalidArgumentException('invalid value for $frequency_penalty when calling CreateChatCompletionRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($frequency_penalty) && ($frequency_penalty < -2)) {
            throw new \InvalidArgumentException('invalid value for $frequency_penalty when calling CreateChatCompletionRequest., must be bigger than or equal to -2.');
        }

        $this->container['frequency_penalty'] = $frequency_penalty;

        return $this;
    }

    /**
     * Gets presence_penalty
     *
     * @return float|null
     */
    public function getPresencePenalty()
    {
        return $this->container['presence_penalty'];
    }

    /**
     * Sets presence_penalty
     *
     * @param float|null $presence_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * @return self
     */
    public function setPresencePenalty($presence_penalty)
    {
        if (is_null($presence_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'presence_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('presence_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($presence_penalty) && ($presence_penalty > 2)) {
            throw new \InvalidArgumentException('invalid value for $presence_penalty when calling CreateChatCompletionRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($presence_penalty) && ($presence_penalty < -2)) {
            throw new \InvalidArgumentException('invalid value for $presence_penalty when calling CreateChatCompletionRequest., must be bigger than or equal to -2.');
        }

        $this->container['presence_penalty'] = $presence_penalty;

        return $this;
    }

    /**
     * Gets web_search_options
     *
     * @return \JeedomOpenAI\Model\WebSearch|null
     */
    public function getWebSearchOptions()
    {
        return $this->container['web_search_options'];
    }

    /**
     * Sets web_search_options
     *
     * @param \JeedomOpenAI\Model\WebSearch|null $web_search_options web_search_options
     *
     * @return self
     */
    public function setWebSearchOptions($web_search_options)
    {
        if (is_null($web_search_options)) {
            throw new \InvalidArgumentException('non-nullable web_search_options cannot be null');
        }
        $this->container['web_search_options'] = $web_search_options;

        return $this;
    }

    /**
     * Gets top_logprobs
     *
     * @return int|null
     */
    public function getTopLogprobs()
    {
        return $this->container['top_logprobs'];
    }

    /**
     * Sets top_logprobs
     *
     * @param int|null $top_logprobs An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     *
     * @return self
     */
    public function setTopLogprobs($top_logprobs)
    {
        if (is_null($top_logprobs)) {
            array_push($this->openAPINullablesSetToNull, 'top_logprobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_logprobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($top_logprobs) && ($top_logprobs > 20)) {
            throw new \InvalidArgumentException('invalid value for $top_logprobs when calling CreateChatCompletionRequest., must be smaller than or equal to 20.');
        }
        if (!is_null($top_logprobs) && ($top_logprobs < 0)) {
            throw new \InvalidArgumentException('invalid value for $top_logprobs when calling CreateChatCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['top_logprobs'] = $top_logprobs;

        return $this;
    }

    /**
     * Gets response_format
     *
     * @return \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfResponseFormat|null
     */
    public function getResponseFormat()
    {
        return $this->container['response_format'];
    }

    /**
     * Sets response_format
     *
     * @param \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfResponseFormat|null $response_format response_format
     *
     * @return self
     */
    public function setResponseFormat($response_format)
    {
        if (is_null($response_format)) {
            throw new \InvalidArgumentException('non-nullable response_format cannot be null');
        }
        $this->container['response_format'] = $response_format;

        return $this;
    }

    /**
     * Gets service_tier
     *
     * @return string|null
     */
    public function getServiceTier()
    {
        return $this->container['service_tier'];
    }

    /**
     * Sets service_tier
     *
     * @param string|null $service_tier Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to 'auto', and the Project is Scale tier enabled, the system     will utilize scale tier credits until they are exhausted.   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is 'auto'.    When this parameter is set, the response body will include the `service_tier` utilized.
     *
     * @return self
     */
    public function setServiceTier($service_tier)
    {
        if (is_null($service_tier)) {
            array_push($this->openAPINullablesSetToNull, 'service_tier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_tier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getServiceTierAllowableValues();
        if (!is_null($service_tier) && !in_array($service_tier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service_tier', must be one of '%s'",
                    $service_tier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_tier'] = $service_tier;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfAudio|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfAudio|null $audio audio
     *
     * @return self
     */
    public function setAudio($audio)
    {
        if (is_null($audio)) {
            array_push($this->openAPINullablesSetToNull, 'audio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets store
     *
     * @return bool|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param bool|null $store Whether or not to store the output of this chat completion request for  use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            array_push($this->openAPINullablesSetToNull, 'store');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return bool|null
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param bool|null $stream If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). See the [Streaming section below](/docs/api-reference/chat/streaming) for more information, along with the [streaming responses](/docs/guides/streaming-responses) guide for more information on how to handle the streaming events.
     *
     * @return self
     */
    public function setStream($stream)
    {
        if (is_null($stream)) {
            array_push($this->openAPINullablesSetToNull, 'stream');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stream', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stream'] = $stream;

        return $this;
    }

    /**
     * Gets stop
     *
     * @return \JeedomOpenAI\Model\StopConfiguration|null
     */
    public function getStop()
    {
        return $this->container['stop'];
    }

    /**
     * Sets stop
     *
     * @param \JeedomOpenAI\Model\StopConfiguration|null $stop stop
     *
     * @return self
     */
    public function setStop($stop)
    {
        if (is_null($stop)) {
            array_push($this->openAPINullablesSetToNull, 'stop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stop'] = $stop;

        return $this;
    }

    /**
     * Gets logit_bias
     *
     * @return array<string,int>|null
     */
    public function getLogitBias()
    {
        return $this->container['logit_bias'];
    }

    /**
     * Sets logit_bias
     *
     * @param array<string,int>|null $logit_bias Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     * @return self
     */
    public function setLogitBias($logit_bias)
    {
        if (is_null($logit_bias)) {
            array_push($this->openAPINullablesSetToNull, 'logit_bias');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logit_bias', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logit_bias'] = $logit_bias;

        return $this;
    }

    /**
     * Gets logprobs
     *
     * @return bool|null
     */
    public function getLogprobs()
    {
        return $this->container['logprobs'];
    }

    /**
     * Sets logprobs
     *
     * @param bool|null $logprobs Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
     *
     * @return self
     */
    public function setLogprobs($logprobs)
    {
        if (is_null($logprobs)) {
            array_push($this->openAPINullablesSetToNull, 'logprobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logprobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logprobs'] = $logprobs;

        return $this;
    }

    /**
     * Gets max_tokens
     *
     * @return int|null
     * @deprecated
     */
    public function getMaxTokens()
    {
        return $this->container['max_tokens'];
    }

    /**
     * Sets max_tokens
     *
     * @param int|null $max_tokens The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).
     *
     * @return self
     * @deprecated
     */
    public function setMaxTokens($max_tokens)
    {
        if (is_null($max_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_tokens'] = $max_tokens;

        return $this;
    }

    /**
     * Gets n
     *
     * @return int|null
     */
    public function getN()
    {
        return $this->container['n'];
    }

    /**
     * Sets n
     *
     * @param int|null $n How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     *
     * @return self
     */
    public function setN($n)
    {
        if (is_null($n)) {
            array_push($this->openAPINullablesSetToNull, 'n');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n) && ($n > 128)) {
            throw new \InvalidArgumentException('invalid value for $n when calling CreateChatCompletionRequest., must be smaller than or equal to 128.');
        }
        if (!is_null($n) && ($n < 1)) {
            throw new \InvalidArgumentException('invalid value for $n when calling CreateChatCompletionRequest., must be bigger than or equal to 1.');
        }

        $this->container['n'] = $n;

        return $this;
    }

    /**
     * Gets prediction
     *
     * @return \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfPrediction|null
     */
    public function getPrediction()
    {
        return $this->container['prediction'];
    }

    /**
     * Sets prediction
     *
     * @param \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfPrediction|null $prediction prediction
     *
     * @return self
     */
    public function setPrediction($prediction)
    {
        if (is_null($prediction)) {
            array_push($this->openAPINullablesSetToNull, 'prediction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prediction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prediction'] = $prediction;

        return $this;
    }

    /**
     * Gets seed
     *
     * @return int|null
     */
    public function getSeed()
    {
        return $this->container['seed'];
    }

    /**
     * Sets seed
     *
     * @param int|null $seed This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     * @return self
     */
    public function setSeed($seed)
    {
        if (is_null($seed)) {
            array_push($this->openAPINullablesSetToNull, 'seed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seed'] = $seed;

        return $this;
    }

    /**
     * Gets stream_options
     *
     * @return \JeedomOpenAI\Model\ChatCompletionStreamOptions|null
     */
    public function getStreamOptions()
    {
        return $this->container['stream_options'];
    }

    /**
     * Sets stream_options
     *
     * @param \JeedomOpenAI\Model\ChatCompletionStreamOptions|null $stream_options stream_options
     *
     * @return self
     */
    public function setStreamOptions($stream_options)
    {
        if (is_null($stream_options)) {
            array_push($this->openAPINullablesSetToNull, 'stream_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stream_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stream_options'] = $stream_options;

        return $this;
    }

    /**
     * Gets tools
     *
     * @return \JeedomOpenAI\Model\ChatCompletionTool[]|null
     */
    public function getTools()
    {
        return $this->container['tools'];
    }

    /**
     * Sets tools
     *
     * @param \JeedomOpenAI\Model\ChatCompletionTool[]|null $tools A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     *
     * @return self
     */
    public function setTools($tools)
    {
        if (is_null($tools)) {
            throw new \InvalidArgumentException('non-nullable tools cannot be null');
        }
        $this->container['tools'] = $tools;

        return $this;
    }

    /**
     * Gets tool_choice
     *
     * @return \JeedomOpenAI\Model\ChatCompletionToolChoiceOption|null
     */
    public function getToolChoice()
    {
        return $this->container['tool_choice'];
    }

    /**
     * Sets tool_choice
     *
     * @param \JeedomOpenAI\Model\ChatCompletionToolChoiceOption|null $tool_choice tool_choice
     *
     * @return self
     */
    public function setToolChoice($tool_choice)
    {
        if (is_null($tool_choice)) {
            throw new \InvalidArgumentException('non-nullable tool_choice cannot be null');
        }
        $this->container['tool_choice'] = $tool_choice;

        return $this;
    }

    /**
     * Gets parallel_tool_calls
     *
     * @return bool|null
     */
    public function getParallelToolCalls()
    {
        return $this->container['parallel_tool_calls'];
    }

    /**
     * Sets parallel_tool_calls
     *
     * @param bool|null $parallel_tool_calls Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
     *
     * @return self
     */
    public function setParallelToolCalls($parallel_tool_calls)
    {
        if (is_null($parallel_tool_calls)) {
            throw new \InvalidArgumentException('non-nullable parallel_tool_calls cannot be null');
        }
        $this->container['parallel_tool_calls'] = $parallel_tool_calls;

        return $this;
    }

    /**
     * Gets function_call
     *
     * @return \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfFunctionCall|null
     * @deprecated
     */
    public function getFunctionCall()
    {
        return $this->container['function_call'];
    }

    /**
     * Sets function_call
     *
     * @param \JeedomOpenAI\Model\CreateChatCompletionRequestAllOfFunctionCall|null $function_call function_call
     *
     * @return self
     * @deprecated
     */
    public function setFunctionCall($function_call)
    {
        if (is_null($function_call)) {
            throw new \InvalidArgumentException('non-nullable function_call cannot be null');
        }
        $this->container['function_call'] = $function_call;

        return $this;
    }

    /**
     * Gets functions
     *
     * @return \JeedomOpenAI\Model\ChatCompletionFunctions[]|null
     * @deprecated
     */
    public function getFunctions()
    {
        return $this->container['functions'];
    }

    /**
     * Sets functions
     *
     * @param \JeedomOpenAI\Model\ChatCompletionFunctions[]|null $functions Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.
     *
     * @return self
     * @deprecated
     */
    public function setFunctions($functions)
    {
        if (is_null($functions)) {
            throw new \InvalidArgumentException('non-nullable functions cannot be null');
        }

        if ((count($functions) > 128)) {
            throw new \InvalidArgumentException('invalid value for $functions when calling CreateChatCompletionRequest., number of items must be less than or equal to 128.');
        }
        if ((count($functions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $functions when calling CreateChatCompletionRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['functions'] = $functions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


