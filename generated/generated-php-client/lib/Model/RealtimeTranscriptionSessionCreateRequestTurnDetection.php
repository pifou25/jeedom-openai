<?php
/**
 * RealtimeTranscriptionSessionCreateRequestTurnDetection
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * RealtimeTranscriptionSessionCreateRequestTurnDetection Class Doc Comment
 *
 * @category Class
 * @description Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to &#x60;null&#x60; to turn off, in which case the client must manually trigger model response. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech. Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \&quot;uhhm\&quot;, the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealtimeTranscriptionSessionCreateRequestTurnDetection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealtimeTranscriptionSessionCreateRequest_turn_detection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'eagerness' => 'string',
        'threshold' => 'float',
        'prefix_padding_ms' => 'int',
        'silence_duration_ms' => 'int',
        'create_response' => 'bool',
        'interrupt_response' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'eagerness' => null,
        'threshold' => null,
        'prefix_padding_ms' => null,
        'silence_duration_ms' => null,
        'create_response' => null,
        'interrupt_response' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'eagerness' => false,
        'threshold' => false,
        'prefix_padding_ms' => false,
        'silence_duration_ms' => false,
        'create_response' => false,
        'interrupt_response' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'eagerness' => 'eagerness',
        'threshold' => 'threshold',
        'prefix_padding_ms' => 'prefix_padding_ms',
        'silence_duration_ms' => 'silence_duration_ms',
        'create_response' => 'create_response',
        'interrupt_response' => 'interrupt_response'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'eagerness' => 'setEagerness',
        'threshold' => 'setThreshold',
        'prefix_padding_ms' => 'setPrefixPaddingMs',
        'silence_duration_ms' => 'setSilenceDurationMs',
        'create_response' => 'setCreateResponse',
        'interrupt_response' => 'setInterruptResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'eagerness' => 'getEagerness',
        'threshold' => 'getThreshold',
        'prefix_padding_ms' => 'getPrefixPaddingMs',
        'silence_duration_ms' => 'getSilenceDurationMs',
        'create_response' => 'getCreateResponse',
        'interrupt_response' => 'getInterruptResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_SERVER_VAD = 'server_vad';
    public const TYPE_SEMANTIC_VAD = 'semantic_vad';
    public const EAGERNESS_LOW = 'low';
    public const EAGERNESS_MEDIUM = 'medium';
    public const EAGERNESS_HIGH = 'high';
    public const EAGERNESS_AUTO = 'auto';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SERVER_VAD,
            self::TYPE_SEMANTIC_VAD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEagernessAllowableValues()
    {
        return [
            self::EAGERNESS_LOW,
            self::EAGERNESS_MEDIUM,
            self::EAGERNESS_HIGH,
            self::EAGERNESS_AUTO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], 'server_vad');
        $this->setIfExists('eagerness', $data ?? [], 'auto');
        $this->setIfExists('threshold', $data ?? [], null);
        $this->setIfExists('prefix_padding_ms', $data ?? [], null);
        $this->setIfExists('silence_duration_ms', $data ?? [], null);
        $this->setIfExists('create_response', $data ?? [], true);
        $this->setIfExists('interrupt_response', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEagernessAllowableValues();
        if (!is_null($this->container['eagerness']) && !in_array($this->container['eagerness'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eagerness', must be one of '%s'",
                $this->container['eagerness'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of turn detection.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets eagerness
     *
     * @return string|null
     */
    public function getEagerness()
    {
        return $this->container['eagerness'];
    }

    /**
     * Sets eagerness
     *
     * @param string|null $eagerness Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
     *
     * @return self
     */
    public function setEagerness($eagerness)
    {
        if (is_null($eagerness)) {
            throw new \InvalidArgumentException('non-nullable eagerness cannot be null');
        }
        $allowedValues = $this->getEagernessAllowableValues();
        if (!in_array($eagerness, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eagerness', must be one of '%s'",
                    $eagerness,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eagerness'] = $eagerness;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return float|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param float|null $threshold Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments.
     *
     * @return self
     */
    public function setThreshold($threshold)
    {
        if (is_null($threshold)) {
            throw new \InvalidArgumentException('non-nullable threshold cannot be null');
        }
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets prefix_padding_ms
     *
     * @return int|null
     */
    public function getPrefixPaddingMs()
    {
        return $this->container['prefix_padding_ms'];
    }

    /**
     * Sets prefix_padding_ms
     *
     * @param int|null $prefix_padding_ms Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms.
     *
     * @return self
     */
    public function setPrefixPaddingMs($prefix_padding_ms)
    {
        if (is_null($prefix_padding_ms)) {
            throw new \InvalidArgumentException('non-nullable prefix_padding_ms cannot be null');
        }
        $this->container['prefix_padding_ms'] = $prefix_padding_ms;

        return $this;
    }

    /**
     * Gets silence_duration_ms
     *
     * @return int|null
     */
    public function getSilenceDurationMs()
    {
        return $this->container['silence_duration_ms'];
    }

    /**
     * Sets silence_duration_ms
     *
     * @param int|null $silence_duration_ms Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user.
     *
     * @return self
     */
    public function setSilenceDurationMs($silence_duration_ms)
    {
        if (is_null($silence_duration_ms)) {
            throw new \InvalidArgumentException('non-nullable silence_duration_ms cannot be null');
        }
        $this->container['silence_duration_ms'] = $silence_duration_ms;

        return $this;
    }

    /**
     * Gets create_response
     *
     * @return bool|null
     */
    public function getCreateResponse()
    {
        return $this->container['create_response'];
    }

    /**
     * Sets create_response
     *
     * @param bool|null $create_response Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.
     *
     * @return self
     */
    public function setCreateResponse($create_response)
    {
        if (is_null($create_response)) {
            throw new \InvalidArgumentException('non-nullable create_response cannot be null');
        }
        $this->container['create_response'] = $create_response;

        return $this;
    }

    /**
     * Gets interrupt_response
     *
     * @return bool|null
     */
    public function getInterruptResponse()
    {
        return $this->container['interrupt_response'];
    }

    /**
     * Sets interrupt_response
     *
     * @param bool|null $interrupt_response Whether or not to automatically interrupt any ongoing response with output to the default conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.
     *
     * @return self
     */
    public function setInterruptResponse($interrupt_response)
    {
        if (is_null($interrupt_response)) {
            throw new \InvalidArgumentException('non-nullable interrupt_response cannot be null');
        }
        $this->container['interrupt_response'] = $interrupt_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


