<?php
/**
 * RealtimeServerEvent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * RealtimeServerEvent Class Doc Comment
 *
 * @category Class
 * @description A realtime server event.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealtimeServerEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealtimeServerEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_id' => 'string',
        'type' => 'string',
        'conversation' => '\JeedomOpenAI\Model\RealtimeServerEventConversationCreatedConversation',
        'previous_item_id' => 'string',
        'item' => '\JeedomOpenAI\Model\RealtimeConversationItem',
        'item_id' => 'string',
        'content_index' => 'int',
        'transcript' => 'string',
        'logprobs' => '\JeedomOpenAI\Model\LogProbProperties[]',
        'delta' => 'string',
        'error' => '\JeedomOpenAI\Model\RealtimeServerEventErrorError',
        'audio_end_ms' => 'int',
        'audio_start_ms' => 'int',
        'rate_limits' => '\JeedomOpenAI\Model\RealtimeServerEventRateLimitsUpdatedRateLimitsInner[]',
        'response_id' => 'string',
        'output_index' => 'int',
        'part' => '\JeedomOpenAI\Model\RealtimeServerEventResponseContentPartDonePart',
        'response' => '\JeedomOpenAI\Model\RealtimeResponse',
        'call_id' => 'string',
        'arguments' => 'string',
        'text' => 'string',
        'session' => '\JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event_id' => null,
        'type' => null,
        'conversation' => null,
        'previous_item_id' => null,
        'item' => null,
        'item_id' => null,
        'content_index' => null,
        'transcript' => null,
        'logprobs' => null,
        'delta' => null,
        'error' => null,
        'audio_end_ms' => null,
        'audio_start_ms' => null,
        'rate_limits' => null,
        'response_id' => null,
        'output_index' => null,
        'part' => null,
        'response' => null,
        'call_id' => null,
        'arguments' => null,
        'text' => null,
        'session' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'event_id' => false,
        'type' => false,
        'conversation' => false,
        'previous_item_id' => false,
        'item' => false,
        'item_id' => false,
        'content_index' => false,
        'transcript' => false,
        'logprobs' => true,
        'delta' => false,
        'error' => false,
        'audio_end_ms' => false,
        'audio_start_ms' => false,
        'rate_limits' => false,
        'response_id' => false,
        'output_index' => false,
        'part' => false,
        'response' => false,
        'call_id' => false,
        'arguments' => false,
        'text' => false,
        'session' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'event_id',
        'type' => 'type',
        'conversation' => 'conversation',
        'previous_item_id' => 'previous_item_id',
        'item' => 'item',
        'item_id' => 'item_id',
        'content_index' => 'content_index',
        'transcript' => 'transcript',
        'logprobs' => 'logprobs',
        'delta' => 'delta',
        'error' => 'error',
        'audio_end_ms' => 'audio_end_ms',
        'audio_start_ms' => 'audio_start_ms',
        'rate_limits' => 'rate_limits',
        'response_id' => 'response_id',
        'output_index' => 'output_index',
        'part' => 'part',
        'response' => 'response',
        'call_id' => 'call_id',
        'arguments' => 'arguments',
        'text' => 'text',
        'session' => 'session'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'type' => 'setType',
        'conversation' => 'setConversation',
        'previous_item_id' => 'setPreviousItemId',
        'item' => 'setItem',
        'item_id' => 'setItemId',
        'content_index' => 'setContentIndex',
        'transcript' => 'setTranscript',
        'logprobs' => 'setLogprobs',
        'delta' => 'setDelta',
        'error' => 'setError',
        'audio_end_ms' => 'setAudioEndMs',
        'audio_start_ms' => 'setAudioStartMs',
        'rate_limits' => 'setRateLimits',
        'response_id' => 'setResponseId',
        'output_index' => 'setOutputIndex',
        'part' => 'setPart',
        'response' => 'setResponse',
        'call_id' => 'setCallId',
        'arguments' => 'setArguments',
        'text' => 'setText',
        'session' => 'setSession'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'type' => 'getType',
        'conversation' => 'getConversation',
        'previous_item_id' => 'getPreviousItemId',
        'item' => 'getItem',
        'item_id' => 'getItemId',
        'content_index' => 'getContentIndex',
        'transcript' => 'getTranscript',
        'logprobs' => 'getLogprobs',
        'delta' => 'getDelta',
        'error' => 'getError',
        'audio_end_ms' => 'getAudioEndMs',
        'audio_start_ms' => 'getAudioStartMs',
        'rate_limits' => 'getRateLimits',
        'response_id' => 'getResponseId',
        'output_index' => 'getOutputIndex',
        'part' => 'getPart',
        'response' => 'getResponse',
        'call_id' => 'getCallId',
        'arguments' => 'getArguments',
        'text' => 'getText',
        'session' => 'getSession'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CONVERSATION_CREATED = 'conversation.created';
    public const TYPE_CONVERSATION_ITEM_CREATED = 'conversation.item.created';
    public const TYPE_CONVERSATION_ITEM_DELETED = 'conversation.item.deleted';
    public const TYPE_CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_COMPLETED = 'conversation.item.input_audio_transcription.completed';
    public const TYPE_CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_DELTA = 'conversation.item.input_audio_transcription.delta';
    public const TYPE_CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_FAILED = 'conversation.item.input_audio_transcription.failed';
    public const TYPE_CONVERSATION_ITEM_RETRIEVED = 'conversation.item.retrieved';
    public const TYPE_CONVERSATION_ITEM_TRUNCATED = 'conversation.item.truncated';
    public const TYPE_ERROR = 'error';
    public const TYPE_INPUT_AUDIO_BUFFER_CLEARED = 'input_audio_buffer.cleared';
    public const TYPE_INPUT_AUDIO_BUFFER_COMMITTED = 'input_audio_buffer.committed';
    public const TYPE_INPUT_AUDIO_BUFFER_SPEECH_STARTED = 'input_audio_buffer.speech_started';
    public const TYPE_INPUT_AUDIO_BUFFER_SPEECH_STOPPED = 'input_audio_buffer.speech_stopped';
    public const TYPE_RATE_LIMITS_UPDATED = 'rate_limits.updated';
    public const TYPE_RESPONSE_AUDIO_DELTA = 'response.audio.delta';
    public const TYPE_RESPONSE_AUDIO_DONE = 'response.audio.done';
    public const TYPE_RESPONSE_AUDIO_TRANSCRIPT_DELTA = 'response.audio_transcript.delta';
    public const TYPE_RESPONSE_AUDIO_TRANSCRIPT_DONE = 'response.audio_transcript.done';
    public const TYPE_RESPONSE_CONTENT_PART_ADDED = 'response.content_part.added';
    public const TYPE_RESPONSE_CONTENT_PART_DONE = 'response.content_part.done';
    public const TYPE_RESPONSE_CREATED = 'response.created';
    public const TYPE_RESPONSE_DONE = 'response.done';
    public const TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DELTA = 'response.function_call_arguments.delta';
    public const TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DONE = 'response.function_call_arguments.done';
    public const TYPE_RESPONSE_OUTPUT_ITEM_ADDED = 'response.output_item.added';
    public const TYPE_RESPONSE_OUTPUT_ITEM_DONE = 'response.output_item.done';
    public const TYPE_RESPONSE_TEXT_DELTA = 'response.text.delta';
    public const TYPE_RESPONSE_TEXT_DONE = 'response.text.done';
    public const TYPE_SESSION_CREATED = 'session.created';
    public const TYPE_SESSION_UPDATED = 'session.updated';
    public const TYPE_TRANSCRIPTION_SESSION_UPDATED = 'transcription_session.updated';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CONVERSATION_CREATED,
            self::TYPE_CONVERSATION_ITEM_CREATED,
            self::TYPE_CONVERSATION_ITEM_DELETED,
            self::TYPE_CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_COMPLETED,
            self::TYPE_CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_DELTA,
            self::TYPE_CONVERSATION_ITEM_INPUT_AUDIO_TRANSCRIPTION_FAILED,
            self::TYPE_CONVERSATION_ITEM_RETRIEVED,
            self::TYPE_CONVERSATION_ITEM_TRUNCATED,
            self::TYPE_ERROR,
            self::TYPE_INPUT_AUDIO_BUFFER_CLEARED,
            self::TYPE_INPUT_AUDIO_BUFFER_COMMITTED,
            self::TYPE_INPUT_AUDIO_BUFFER_SPEECH_STARTED,
            self::TYPE_INPUT_AUDIO_BUFFER_SPEECH_STOPPED,
            self::TYPE_RATE_LIMITS_UPDATED,
            self::TYPE_RESPONSE_AUDIO_DELTA,
            self::TYPE_RESPONSE_AUDIO_DONE,
            self::TYPE_RESPONSE_AUDIO_TRANSCRIPT_DELTA,
            self::TYPE_RESPONSE_AUDIO_TRANSCRIPT_DONE,
            self::TYPE_RESPONSE_CONTENT_PART_ADDED,
            self::TYPE_RESPONSE_CONTENT_PART_DONE,
            self::TYPE_RESPONSE_CREATED,
            self::TYPE_RESPONSE_DONE,
            self::TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DELTA,
            self::TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DONE,
            self::TYPE_RESPONSE_OUTPUT_ITEM_ADDED,
            self::TYPE_RESPONSE_OUTPUT_ITEM_DONE,
            self::TYPE_RESPONSE_TEXT_DELTA,
            self::TYPE_RESPONSE_TEXT_DONE,
            self::TYPE_SESSION_CREATED,
            self::TYPE_SESSION_UPDATED,
            self::TYPE_TRANSCRIPTION_SESSION_UPDATED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('conversation', $data ?? [], null);
        $this->setIfExists('previous_item_id', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('content_index', $data ?? [], null);
        $this->setIfExists('transcript', $data ?? [], null);
        $this->setIfExists('logprobs', $data ?? [], null);
        $this->setIfExists('delta', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('audio_end_ms', $data ?? [], null);
        $this->setIfExists('audio_start_ms', $data ?? [], null);
        $this->setIfExists('rate_limits', $data ?? [], null);
        $this->setIfExists('response_id', $data ?? [], null);
        $this->setIfExists('output_index', $data ?? [], null);
        $this->setIfExists('part', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('arguments', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('session', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event_id'] === null) {
            $invalidProperties[] = "'event_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['conversation'] === null) {
            $invalidProperties[] = "'conversation' can't be null";
        }
        if ($this->container['previous_item_id'] === null) {
            $invalidProperties[] = "'previous_item_id' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['content_index'] === null) {
            $invalidProperties[] = "'content_index' can't be null";
        }
        if ($this->container['transcript'] === null) {
            $invalidProperties[] = "'transcript' can't be null";
        }
        if ($this->container['delta'] === null) {
            $invalidProperties[] = "'delta' can't be null";
        }
        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['audio_end_ms'] === null) {
            $invalidProperties[] = "'audio_end_ms' can't be null";
        }
        if ($this->container['audio_start_ms'] === null) {
            $invalidProperties[] = "'audio_start_ms' can't be null";
        }
        if ($this->container['rate_limits'] === null) {
            $invalidProperties[] = "'rate_limits' can't be null";
        }
        if ($this->container['response_id'] === null) {
            $invalidProperties[] = "'response_id' can't be null";
        }
        if ($this->container['output_index'] === null) {
            $invalidProperties[] = "'output_index' can't be null";
        }
        if ($this->container['part'] === null) {
            $invalidProperties[] = "'part' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        if ($this->container['call_id'] === null) {
            $invalidProperties[] = "'call_id' can't be null";
        }
        if ($this->container['arguments'] === null) {
            $invalidProperties[] = "'arguments' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['session'] === null) {
            $invalidProperties[] = "'session' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id The unique ID of the server event.
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        if (is_null($event_id)) {
            throw new \InvalidArgumentException('non-nullable event_id cannot be null');
        }
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The event type, must be `conversation.created`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets conversation
     *
     * @return \JeedomOpenAI\Model\RealtimeServerEventConversationCreatedConversation
     */
    public function getConversation()
    {
        return $this->container['conversation'];
    }

    /**
     * Sets conversation
     *
     * @param \JeedomOpenAI\Model\RealtimeServerEventConversationCreatedConversation $conversation conversation
     *
     * @return self
     */
    public function setConversation($conversation)
    {
        if (is_null($conversation)) {
            throw new \InvalidArgumentException('non-nullable conversation cannot be null');
        }
        $this->container['conversation'] = $conversation;

        return $this;
    }

    /**
     * Gets previous_item_id
     *
     * @return string
     */
    public function getPreviousItemId()
    {
        return $this->container['previous_item_id'];
    }

    /**
     * Sets previous_item_id
     *
     * @param string $previous_item_id The ID of the preceding item after which the new item will be inserted.
     *
     * @return self
     */
    public function setPreviousItemId($previous_item_id)
    {
        if (is_null($previous_item_id)) {
            throw new \InvalidArgumentException('non-nullable previous_item_id cannot be null');
        }
        $this->container['previous_item_id'] = $previous_item_id;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \JeedomOpenAI\Model\RealtimeConversationItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \JeedomOpenAI\Model\RealtimeConversationItem $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The ID of the item.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets content_index
     *
     * @return int
     */
    public function getContentIndex()
    {
        return $this->container['content_index'];
    }

    /**
     * Sets content_index
     *
     * @param int $content_index The index of the content part in the item's content array.
     *
     * @return self
     */
    public function setContentIndex($content_index)
    {
        if (is_null($content_index)) {
            throw new \InvalidArgumentException('non-nullable content_index cannot be null');
        }
        $this->container['content_index'] = $content_index;

        return $this;
    }

    /**
     * Gets transcript
     *
     * @return string
     */
    public function getTranscript()
    {
        return $this->container['transcript'];
    }

    /**
     * Sets transcript
     *
     * @param string $transcript The final transcript of the audio.
     *
     * @return self
     */
    public function setTranscript($transcript)
    {
        if (is_null($transcript)) {
            throw new \InvalidArgumentException('non-nullable transcript cannot be null');
        }
        $this->container['transcript'] = $transcript;

        return $this;
    }

    /**
     * Gets logprobs
     *
     * @return \JeedomOpenAI\Model\LogProbProperties[]|null
     */
    public function getLogprobs()
    {
        return $this->container['logprobs'];
    }

    /**
     * Sets logprobs
     *
     * @param \JeedomOpenAI\Model\LogProbProperties[]|null $logprobs The log probabilities of the transcription.
     *
     * @return self
     */
    public function setLogprobs($logprobs)
    {
        if (is_null($logprobs)) {
            array_push($this->openAPINullablesSetToNull, 'logprobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logprobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logprobs'] = $logprobs;

        return $this;
    }

    /**
     * Gets delta
     *
     * @return string
     */
    public function getDelta()
    {
        return $this->container['delta'];
    }

    /**
     * Sets delta
     *
     * @param string $delta The text delta.
     *
     * @return self
     */
    public function setDelta($delta)
    {
        if (is_null($delta)) {
            throw new \InvalidArgumentException('non-nullable delta cannot be null');
        }
        $this->container['delta'] = $delta;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \JeedomOpenAI\Model\RealtimeServerEventErrorError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \JeedomOpenAI\Model\RealtimeServerEventErrorError $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets audio_end_ms
     *
     * @return int
     */
    public function getAudioEndMs()
    {
        return $this->container['audio_end_ms'];
    }

    /**
     * Sets audio_end_ms
     *
     * @param int $audio_end_ms Milliseconds since the session started when speech stopped. This will  correspond to the end of audio sent to the model, and thus includes the  `min_silence_duration_ms` configured in the Session.
     *
     * @return self
     */
    public function setAudioEndMs($audio_end_ms)
    {
        if (is_null($audio_end_ms)) {
            throw new \InvalidArgumentException('non-nullable audio_end_ms cannot be null');
        }
        $this->container['audio_end_ms'] = $audio_end_ms;

        return $this;
    }

    /**
     * Gets audio_start_ms
     *
     * @return int
     */
    public function getAudioStartMs()
    {
        return $this->container['audio_start_ms'];
    }

    /**
     * Sets audio_start_ms
     *
     * @param int $audio_start_ms Milliseconds from the start of all audio written to the buffer during the  session when speech was first detected. This will correspond to the  beginning of audio sent to the model, and thus includes the  `prefix_padding_ms` configured in the Session.
     *
     * @return self
     */
    public function setAudioStartMs($audio_start_ms)
    {
        if (is_null($audio_start_ms)) {
            throw new \InvalidArgumentException('non-nullable audio_start_ms cannot be null');
        }
        $this->container['audio_start_ms'] = $audio_start_ms;

        return $this;
    }

    /**
     * Gets rate_limits
     *
     * @return \JeedomOpenAI\Model\RealtimeServerEventRateLimitsUpdatedRateLimitsInner[]
     */
    public function getRateLimits()
    {
        return $this->container['rate_limits'];
    }

    /**
     * Sets rate_limits
     *
     * @param \JeedomOpenAI\Model\RealtimeServerEventRateLimitsUpdatedRateLimitsInner[] $rate_limits List of rate limit information.
     *
     * @return self
     */
    public function setRateLimits($rate_limits)
    {
        if (is_null($rate_limits)) {
            throw new \InvalidArgumentException('non-nullable rate_limits cannot be null');
        }
        $this->container['rate_limits'] = $rate_limits;

        return $this;
    }

    /**
     * Gets response_id
     *
     * @return string
     */
    public function getResponseId()
    {
        return $this->container['response_id'];
    }

    /**
     * Sets response_id
     *
     * @param string $response_id The ID of the response.
     *
     * @return self
     */
    public function setResponseId($response_id)
    {
        if (is_null($response_id)) {
            throw new \InvalidArgumentException('non-nullable response_id cannot be null');
        }
        $this->container['response_id'] = $response_id;

        return $this;
    }

    /**
     * Gets output_index
     *
     * @return int
     */
    public function getOutputIndex()
    {
        return $this->container['output_index'];
    }

    /**
     * Sets output_index
     *
     * @param int $output_index The index of the output item in the response.
     *
     * @return self
     */
    public function setOutputIndex($output_index)
    {
        if (is_null($output_index)) {
            throw new \InvalidArgumentException('non-nullable output_index cannot be null');
        }
        $this->container['output_index'] = $output_index;

        return $this;
    }

    /**
     * Gets part
     *
     * @return \JeedomOpenAI\Model\RealtimeServerEventResponseContentPartDonePart
     */
    public function getPart()
    {
        return $this->container['part'];
    }

    /**
     * Sets part
     *
     * @param \JeedomOpenAI\Model\RealtimeServerEventResponseContentPartDonePart $part part
     *
     * @return self
     */
    public function setPart($part)
    {
        if (is_null($part)) {
            throw new \InvalidArgumentException('non-nullable part cannot be null');
        }
        $this->container['part'] = $part;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \JeedomOpenAI\Model\RealtimeResponse
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \JeedomOpenAI\Model\RealtimeResponse $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            throw new \InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string $call_id The ID of the function call.
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets arguments
     *
     * @return string
     */
    public function getArguments()
    {
        return $this->container['arguments'];
    }

    /**
     * Sets arguments
     *
     * @param string $arguments The final arguments as a JSON string.
     *
     * @return self
     */
    public function setArguments($arguments)
    {
        if (is_null($arguments)) {
            throw new \InvalidArgumentException('non-nullable arguments cannot be null');
        }
        $this->container['arguments'] = $arguments;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The final text content.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateResponse
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateResponse $session session
     *
     * @return self
     */
    public function setSession($session)
    {
        if (is_null($session)) {
            throw new \InvalidArgumentException('non-nullable session cannot be null');
        }
        $this->container['session'] = $session;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


