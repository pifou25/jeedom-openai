<?php
/**
 * Batch
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * Batch Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Batch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Batch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'endpoint' => 'string',
        'errors' => '\JeedomOpenAI\Model\BatchErrors',
        'input_file_id' => 'string',
        'completion_window' => 'string',
        'status' => 'string',
        'output_file_id' => 'string',
        'error_file_id' => 'string',
        'created_at' => 'int',
        'in_progress_at' => 'int',
        'expires_at' => 'int',
        'finalizing_at' => 'int',
        'completed_at' => 'int',
        'failed_at' => 'int',
        'expired_at' => 'int',
        'cancelling_at' => 'int',
        'cancelled_at' => 'int',
        'request_counts' => '\JeedomOpenAI\Model\BatchRequestCounts',
        'metadata' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'endpoint' => null,
        'errors' => null,
        'input_file_id' => null,
        'completion_window' => null,
        'status' => null,
        'output_file_id' => null,
        'error_file_id' => null,
        'created_at' => null,
        'in_progress_at' => null,
        'expires_at' => null,
        'finalizing_at' => null,
        'completed_at' => null,
        'failed_at' => null,
        'expired_at' => null,
        'cancelling_at' => null,
        'cancelled_at' => null,
        'request_counts' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'object' => false,
        'endpoint' => false,
        'errors' => false,
        'input_file_id' => false,
        'completion_window' => false,
        'status' => false,
        'output_file_id' => false,
        'error_file_id' => false,
        'created_at' => false,
        'in_progress_at' => false,
        'expires_at' => false,
        'finalizing_at' => false,
        'completed_at' => false,
        'failed_at' => false,
        'expired_at' => false,
        'cancelling_at' => false,
        'cancelled_at' => false,
        'request_counts' => false,
        'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'endpoint' => 'endpoint',
        'errors' => 'errors',
        'input_file_id' => 'input_file_id',
        'completion_window' => 'completion_window',
        'status' => 'status',
        'output_file_id' => 'output_file_id',
        'error_file_id' => 'error_file_id',
        'created_at' => 'created_at',
        'in_progress_at' => 'in_progress_at',
        'expires_at' => 'expires_at',
        'finalizing_at' => 'finalizing_at',
        'completed_at' => 'completed_at',
        'failed_at' => 'failed_at',
        'expired_at' => 'expired_at',
        'cancelling_at' => 'cancelling_at',
        'cancelled_at' => 'cancelled_at',
        'request_counts' => 'request_counts',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'endpoint' => 'setEndpoint',
        'errors' => 'setErrors',
        'input_file_id' => 'setInputFileId',
        'completion_window' => 'setCompletionWindow',
        'status' => 'setStatus',
        'output_file_id' => 'setOutputFileId',
        'error_file_id' => 'setErrorFileId',
        'created_at' => 'setCreatedAt',
        'in_progress_at' => 'setInProgressAt',
        'expires_at' => 'setExpiresAt',
        'finalizing_at' => 'setFinalizingAt',
        'completed_at' => 'setCompletedAt',
        'failed_at' => 'setFailedAt',
        'expired_at' => 'setExpiredAt',
        'cancelling_at' => 'setCancellingAt',
        'cancelled_at' => 'setCancelledAt',
        'request_counts' => 'setRequestCounts',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'endpoint' => 'getEndpoint',
        'errors' => 'getErrors',
        'input_file_id' => 'getInputFileId',
        'completion_window' => 'getCompletionWindow',
        'status' => 'getStatus',
        'output_file_id' => 'getOutputFileId',
        'error_file_id' => 'getErrorFileId',
        'created_at' => 'getCreatedAt',
        'in_progress_at' => 'getInProgressAt',
        'expires_at' => 'getExpiresAt',
        'finalizing_at' => 'getFinalizingAt',
        'completed_at' => 'getCompletedAt',
        'failed_at' => 'getFailedAt',
        'expired_at' => 'getExpiredAt',
        'cancelling_at' => 'getCancellingAt',
        'cancelled_at' => 'getCancelledAt',
        'request_counts' => 'getRequestCounts',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OBJECT_BATCH = 'batch';
    public const STATUS_VALIDATING = 'validating';
    public const STATUS_FAILED = 'failed';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_FINALIZING = 'finalizing';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_EXPIRED = 'expired';
    public const STATUS_CANCELLING = 'cancelling';
    public const STATUS_CANCELLED = 'cancelled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_BATCH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_VALIDATING,
            self::STATUS_FAILED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_FINALIZING,
            self::STATUS_COMPLETED,
            self::STATUS_EXPIRED,
            self::STATUS_CANCELLING,
            self::STATUS_CANCELLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('endpoint', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('input_file_id', $data ?? [], null);
        $this->setIfExists('completion_window', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('output_file_id', $data ?? [], null);
        $this->setIfExists('error_file_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('in_progress_at', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('finalizing_at', $data ?? [], null);
        $this->setIfExists('completed_at', $data ?? [], null);
        $this->setIfExists('failed_at', $data ?? [], null);
        $this->setIfExists('expired_at', $data ?? [], null);
        $this->setIfExists('cancelling_at', $data ?? [], null);
        $this->setIfExists('cancelled_at', $data ?? [], null);
        $this->setIfExists('request_counts', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['endpoint'] === null) {
            $invalidProperties[] = "'endpoint' can't be null";
        }
        if ($this->container['input_file_id'] === null) {
            $invalidProperties[] = "'input_file_id' can't be null";
        }
        if ($this->container['completion_window'] === null) {
            $invalidProperties[] = "'completion_window' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object The object type, which is always `batch`.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string $endpoint The OpenAI API endpoint used by the batch.
     *
     * @return self
     */
    public function setEndpoint($endpoint)
    {
        if (is_null($endpoint)) {
            throw new \InvalidArgumentException('non-nullable endpoint cannot be null');
        }
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \JeedomOpenAI\Model\BatchErrors|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \JeedomOpenAI\Model\BatchErrors|null $errors errors
     *
     * @return self
     */
    public function setErrors($errors)
    {
        if (is_null($errors)) {
            throw new \InvalidArgumentException('non-nullable errors cannot be null');
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets input_file_id
     *
     * @return string
     */
    public function getInputFileId()
    {
        return $this->container['input_file_id'];
    }

    /**
     * Sets input_file_id
     *
     * @param string $input_file_id The ID of the input file for the batch.
     *
     * @return self
     */
    public function setInputFileId($input_file_id)
    {
        if (is_null($input_file_id)) {
            throw new \InvalidArgumentException('non-nullable input_file_id cannot be null');
        }
        $this->container['input_file_id'] = $input_file_id;

        return $this;
    }

    /**
     * Gets completion_window
     *
     * @return string
     */
    public function getCompletionWindow()
    {
        return $this->container['completion_window'];
    }

    /**
     * Sets completion_window
     *
     * @param string $completion_window The time frame within which the batch should be processed.
     *
     * @return self
     */
    public function setCompletionWindow($completion_window)
    {
        if (is_null($completion_window)) {
            throw new \InvalidArgumentException('non-nullable completion_window cannot be null');
        }
        $this->container['completion_window'] = $completion_window;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the batch.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets output_file_id
     *
     * @return string|null
     */
    public function getOutputFileId()
    {
        return $this->container['output_file_id'];
    }

    /**
     * Sets output_file_id
     *
     * @param string|null $output_file_id The ID of the file containing the outputs of successfully executed requests.
     *
     * @return self
     */
    public function setOutputFileId($output_file_id)
    {
        if (is_null($output_file_id)) {
            throw new \InvalidArgumentException('non-nullable output_file_id cannot be null');
        }
        $this->container['output_file_id'] = $output_file_id;

        return $this;
    }

    /**
     * Gets error_file_id
     *
     * @return string|null
     */
    public function getErrorFileId()
    {
        return $this->container['error_file_id'];
    }

    /**
     * Sets error_file_id
     *
     * @param string|null $error_file_id The ID of the file containing the outputs of requests with errors.
     *
     * @return self
     */
    public function setErrorFileId($error_file_id)
    {
        if (is_null($error_file_id)) {
            throw new \InvalidArgumentException('non-nullable error_file_id cannot be null');
        }
        $this->container['error_file_id'] = $error_file_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at The Unix timestamp (in seconds) for when the batch was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets in_progress_at
     *
     * @return int|null
     */
    public function getInProgressAt()
    {
        return $this->container['in_progress_at'];
    }

    /**
     * Sets in_progress_at
     *
     * @param int|null $in_progress_at The Unix timestamp (in seconds) for when the batch started processing.
     *
     * @return self
     */
    public function setInProgressAt($in_progress_at)
    {
        if (is_null($in_progress_at)) {
            throw new \InvalidArgumentException('non-nullable in_progress_at cannot be null');
        }
        $this->container['in_progress_at'] = $in_progress_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return int|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param int|null $expires_at The Unix timestamp (in seconds) for when the batch will expire.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets finalizing_at
     *
     * @return int|null
     */
    public function getFinalizingAt()
    {
        return $this->container['finalizing_at'];
    }

    /**
     * Sets finalizing_at
     *
     * @param int|null $finalizing_at The Unix timestamp (in seconds) for when the batch started finalizing.
     *
     * @return self
     */
    public function setFinalizingAt($finalizing_at)
    {
        if (is_null($finalizing_at)) {
            throw new \InvalidArgumentException('non-nullable finalizing_at cannot be null');
        }
        $this->container['finalizing_at'] = $finalizing_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return int|null
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param int|null $completed_at The Unix timestamp (in seconds) for when the batch was completed.
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        if (is_null($completed_at)) {
            throw new \InvalidArgumentException('non-nullable completed_at cannot be null');
        }
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets failed_at
     *
     * @return int|null
     */
    public function getFailedAt()
    {
        return $this->container['failed_at'];
    }

    /**
     * Sets failed_at
     *
     * @param int|null $failed_at The Unix timestamp (in seconds) for when the batch failed.
     *
     * @return self
     */
    public function setFailedAt($failed_at)
    {
        if (is_null($failed_at)) {
            throw new \InvalidArgumentException('non-nullable failed_at cannot be null');
        }
        $this->container['failed_at'] = $failed_at;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return int|null
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param int|null $expired_at The Unix timestamp (in seconds) for when the batch expired.
     *
     * @return self
     */
    public function setExpiredAt($expired_at)
    {
        if (is_null($expired_at)) {
            throw new \InvalidArgumentException('non-nullable expired_at cannot be null');
        }
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets cancelling_at
     *
     * @return int|null
     */
    public function getCancellingAt()
    {
        return $this->container['cancelling_at'];
    }

    /**
     * Sets cancelling_at
     *
     * @param int|null $cancelling_at The Unix timestamp (in seconds) for when the batch started cancelling.
     *
     * @return self
     */
    public function setCancellingAt($cancelling_at)
    {
        if (is_null($cancelling_at)) {
            throw new \InvalidArgumentException('non-nullable cancelling_at cannot be null');
        }
        $this->container['cancelling_at'] = $cancelling_at;

        return $this;
    }

    /**
     * Gets cancelled_at
     *
     * @return int|null
     */
    public function getCancelledAt()
    {
        return $this->container['cancelled_at'];
    }

    /**
     * Sets cancelled_at
     *
     * @param int|null $cancelled_at The Unix timestamp (in seconds) for when the batch was cancelled.
     *
     * @return self
     */
    public function setCancelledAt($cancelled_at)
    {
        if (is_null($cancelled_at)) {
            throw new \InvalidArgumentException('non-nullable cancelled_at cannot be null');
        }
        $this->container['cancelled_at'] = $cancelled_at;

        return $this;
    }

    /**
     * Gets request_counts
     *
     * @return \JeedomOpenAI\Model\BatchRequestCounts|null
     */
    public function getRequestCounts()
    {
        return $this->container['request_counts'];
    }

    /**
     * Sets request_counts
     *
     * @param \JeedomOpenAI\Model\BatchRequestCounts|null $request_counts request_counts
     *
     * @return self
     */
    public function setRequestCounts($request_counts)
    {
        if (is_null($request_counts)) {
            throw new \InvalidArgumentException('non-nullable request_counts cannot be null');
        }
        $this->container['request_counts'] = $request_counts;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


