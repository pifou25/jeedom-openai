<?php
/**
 * RunObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * RunObject Class Doc Comment
 *
 * @category Class
 * @description Represents an execution run on a [thread](/docs/api-reference/threads).
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RunObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RunObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'created_at' => 'int',
        'thread_id' => 'string',
        'assistant_id' => 'string',
        'status' => 'string',
        'required_action' => '\JeedomOpenAI\Model\RunObjectRequiredAction',
        'last_error' => '\JeedomOpenAI\Model\RunObjectLastError',
        'expires_at' => 'int',
        'started_at' => 'int',
        'cancelled_at' => 'int',
        'failed_at' => 'int',
        'completed_at' => 'int',
        'incomplete_details' => '\JeedomOpenAI\Model\RunObjectIncompleteDetails',
        'model' => 'string',
        'instructions' => 'string',
        'tools' => '\JeedomOpenAI\Model\AssistantObjectToolsInner[]',
        'metadata' => 'array<string,string>',
        'usage' => '\JeedomOpenAI\Model\RunCompletionUsage',
        'temperature' => 'float',
        'top_p' => 'float',
        'max_prompt_tokens' => 'int',
        'max_completion_tokens' => 'int',
        'truncation_strategy' => '\JeedomOpenAI\Model\CreateRunRequestTruncationStrategy',
        'tool_choice' => '\JeedomOpenAI\Model\CreateRunRequestToolChoice',
        'parallel_tool_calls' => 'bool',
        'response_format' => '\JeedomOpenAI\Model\AssistantsApiResponseFormatOption'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'created_at' => null,
        'thread_id' => null,
        'assistant_id' => null,
        'status' => null,
        'required_action' => null,
        'last_error' => null,
        'expires_at' => null,
        'started_at' => null,
        'cancelled_at' => null,
        'failed_at' => null,
        'completed_at' => null,
        'incomplete_details' => null,
        'model' => null,
        'instructions' => null,
        'tools' => null,
        'metadata' => null,
        'usage' => null,
        'temperature' => null,
        'top_p' => null,
        'max_prompt_tokens' => null,
        'max_completion_tokens' => null,
        'truncation_strategy' => null,
        'tool_choice' => null,
        'parallel_tool_calls' => null,
        'response_format' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'object' => false,
        'created_at' => false,
        'thread_id' => false,
        'assistant_id' => false,
        'status' => false,
        'required_action' => true,
        'last_error' => true,
        'expires_at' => true,
        'started_at' => true,
        'cancelled_at' => true,
        'failed_at' => true,
        'completed_at' => true,
        'incomplete_details' => true,
        'model' => false,
        'instructions' => false,
        'tools' => false,
        'metadata' => true,
        'usage' => true,
        'temperature' => true,
        'top_p' => true,
        'max_prompt_tokens' => true,
        'max_completion_tokens' => true,
        'truncation_strategy' => false,
        'tool_choice' => false,
        'parallel_tool_calls' => false,
        'response_format' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'created_at' => 'created_at',
        'thread_id' => 'thread_id',
        'assistant_id' => 'assistant_id',
        'status' => 'status',
        'required_action' => 'required_action',
        'last_error' => 'last_error',
        'expires_at' => 'expires_at',
        'started_at' => 'started_at',
        'cancelled_at' => 'cancelled_at',
        'failed_at' => 'failed_at',
        'completed_at' => 'completed_at',
        'incomplete_details' => 'incomplete_details',
        'model' => 'model',
        'instructions' => 'instructions',
        'tools' => 'tools',
        'metadata' => 'metadata',
        'usage' => 'usage',
        'temperature' => 'temperature',
        'top_p' => 'top_p',
        'max_prompt_tokens' => 'max_prompt_tokens',
        'max_completion_tokens' => 'max_completion_tokens',
        'truncation_strategy' => 'truncation_strategy',
        'tool_choice' => 'tool_choice',
        'parallel_tool_calls' => 'parallel_tool_calls',
        'response_format' => 'response_format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'created_at' => 'setCreatedAt',
        'thread_id' => 'setThreadId',
        'assistant_id' => 'setAssistantId',
        'status' => 'setStatus',
        'required_action' => 'setRequiredAction',
        'last_error' => 'setLastError',
        'expires_at' => 'setExpiresAt',
        'started_at' => 'setStartedAt',
        'cancelled_at' => 'setCancelledAt',
        'failed_at' => 'setFailedAt',
        'completed_at' => 'setCompletedAt',
        'incomplete_details' => 'setIncompleteDetails',
        'model' => 'setModel',
        'instructions' => 'setInstructions',
        'tools' => 'setTools',
        'metadata' => 'setMetadata',
        'usage' => 'setUsage',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP',
        'max_prompt_tokens' => 'setMaxPromptTokens',
        'max_completion_tokens' => 'setMaxCompletionTokens',
        'truncation_strategy' => 'setTruncationStrategy',
        'tool_choice' => 'setToolChoice',
        'parallel_tool_calls' => 'setParallelToolCalls',
        'response_format' => 'setResponseFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'created_at' => 'getCreatedAt',
        'thread_id' => 'getThreadId',
        'assistant_id' => 'getAssistantId',
        'status' => 'getStatus',
        'required_action' => 'getRequiredAction',
        'last_error' => 'getLastError',
        'expires_at' => 'getExpiresAt',
        'started_at' => 'getStartedAt',
        'cancelled_at' => 'getCancelledAt',
        'failed_at' => 'getFailedAt',
        'completed_at' => 'getCompletedAt',
        'incomplete_details' => 'getIncompleteDetails',
        'model' => 'getModel',
        'instructions' => 'getInstructions',
        'tools' => 'getTools',
        'metadata' => 'getMetadata',
        'usage' => 'getUsage',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP',
        'max_prompt_tokens' => 'getMaxPromptTokens',
        'max_completion_tokens' => 'getMaxCompletionTokens',
        'truncation_strategy' => 'getTruncationStrategy',
        'tool_choice' => 'getToolChoice',
        'parallel_tool_calls' => 'getParallelToolCalls',
        'response_format' => 'getResponseFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OBJECT_THREAD_RUN = 'thread.run';
    public const STATUS_QUEUED = 'queued';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_REQUIRES_ACTION = 'requires_action';
    public const STATUS_CANCELLING = 'cancelling';
    public const STATUS_CANCELLED = 'cancelled';
    public const STATUS_FAILED = 'failed';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_INCOMPLETE = 'incomplete';
    public const STATUS_EXPIRED = 'expired';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_THREAD_RUN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_REQUIRES_ACTION,
            self::STATUS_CANCELLING,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_COMPLETED,
            self::STATUS_INCOMPLETE,
            self::STATUS_EXPIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('thread_id', $data ?? [], null);
        $this->setIfExists('assistant_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('required_action', $data ?? [], null);
        $this->setIfExists('last_error', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('started_at', $data ?? [], null);
        $this->setIfExists('cancelled_at', $data ?? [], null);
        $this->setIfExists('failed_at', $data ?? [], null);
        $this->setIfExists('completed_at', $data ?? [], null);
        $this->setIfExists('incomplete_details', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('tools', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('top_p', $data ?? [], null);
        $this->setIfExists('max_prompt_tokens', $data ?? [], null);
        $this->setIfExists('max_completion_tokens', $data ?? [], null);
        $this->setIfExists('truncation_strategy', $data ?? [], null);
        $this->setIfExists('tool_choice', $data ?? [], null);
        $this->setIfExists('parallel_tool_calls', $data ?? [], true);
        $this->setIfExists('response_format', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['thread_id'] === null) {
            $invalidProperties[] = "'thread_id' can't be null";
        }
        if ($this->container['assistant_id'] === null) {
            $invalidProperties[] = "'assistant_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['required_action'] === null) {
            $invalidProperties[] = "'required_action' can't be null";
        }
        if ($this->container['last_error'] === null) {
            $invalidProperties[] = "'last_error' can't be null";
        }
        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['started_at'] === null) {
            $invalidProperties[] = "'started_at' can't be null";
        }
        if ($this->container['cancelled_at'] === null) {
            $invalidProperties[] = "'cancelled_at' can't be null";
        }
        if ($this->container['failed_at'] === null) {
            $invalidProperties[] = "'failed_at' can't be null";
        }
        if ($this->container['completed_at'] === null) {
            $invalidProperties[] = "'completed_at' can't be null";
        }
        if ($this->container['incomplete_details'] === null) {
            $invalidProperties[] = "'incomplete_details' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['instructions'] === null) {
            $invalidProperties[] = "'instructions' can't be null";
        }
        if ($this->container['tools'] === null) {
            $invalidProperties[] = "'tools' can't be null";
        }
        if ((count($this->container['tools']) > 20)) {
            $invalidProperties[] = "invalid value for 'tools', number of items must be less than or equal to 20.";
        }

        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['usage'] === null) {
            $invalidProperties[] = "'usage' can't be null";
        }
        if ($this->container['max_prompt_tokens'] === null) {
            $invalidProperties[] = "'max_prompt_tokens' can't be null";
        }
        if (($this->container['max_prompt_tokens'] < 256)) {
            $invalidProperties[] = "invalid value for 'max_prompt_tokens', must be bigger than or equal to 256.";
        }

        if ($this->container['max_completion_tokens'] === null) {
            $invalidProperties[] = "'max_completion_tokens' can't be null";
        }
        if (($this->container['max_completion_tokens'] < 256)) {
            $invalidProperties[] = "invalid value for 'max_completion_tokens', must be bigger than or equal to 256.";
        }

        if ($this->container['truncation_strategy'] === null) {
            $invalidProperties[] = "'truncation_strategy' can't be null";
        }
        if ($this->container['tool_choice'] === null) {
            $invalidProperties[] = "'tool_choice' can't be null";
        }
        if ($this->container['parallel_tool_calls'] === null) {
            $invalidProperties[] = "'parallel_tool_calls' can't be null";
        }
        if ($this->container['response_format'] === null) {
            $invalidProperties[] = "'response_format' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The identifier, which can be referenced in API endpoints.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object The object type, which is always `thread.run`.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at The Unix timestamp (in seconds) for when the run was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets thread_id
     *
     * @return string
     */
    public function getThreadId()
    {
        return $this->container['thread_id'];
    }

    /**
     * Sets thread_id
     *
     * @param string $thread_id The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
     *
     * @return self
     */
    public function setThreadId($thread_id)
    {
        if (is_null($thread_id)) {
            throw new \InvalidArgumentException('non-nullable thread_id cannot be null');
        }
        $this->container['thread_id'] = $thread_id;

        return $this;
    }

    /**
     * Gets assistant_id
     *
     * @return string
     */
    public function getAssistantId()
    {
        return $this->container['assistant_id'];
    }

    /**
     * Sets assistant_id
     *
     * @param string $assistant_id The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
     *
     * @return self
     */
    public function setAssistantId($assistant_id)
    {
        if (is_null($assistant_id)) {
            throw new \InvalidArgumentException('non-nullable assistant_id cannot be null');
        }
        $this->container['assistant_id'] = $assistant_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets required_action
     *
     * @return \JeedomOpenAI\Model\RunObjectRequiredAction
     */
    public function getRequiredAction()
    {
        return $this->container['required_action'];
    }

    /**
     * Sets required_action
     *
     * @param \JeedomOpenAI\Model\RunObjectRequiredAction $required_action required_action
     *
     * @return self
     */
    public function setRequiredAction($required_action)
    {
        if (is_null($required_action)) {
            array_push($this->openAPINullablesSetToNull, 'required_action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('required_action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['required_action'] = $required_action;

        return $this;
    }

    /**
     * Gets last_error
     *
     * @return \JeedomOpenAI\Model\RunObjectLastError
     */
    public function getLastError()
    {
        return $this->container['last_error'];
    }

    /**
     * Sets last_error
     *
     * @param \JeedomOpenAI\Model\RunObjectLastError $last_error last_error
     *
     * @return self
     */
    public function setLastError($last_error)
    {
        if (is_null($last_error)) {
            array_push($this->openAPINullablesSetToNull, 'last_error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_error'] = $last_error;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return int
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param int $expires_at The Unix timestamp (in seconds) for when the run will expire.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return int
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param int $started_at The Unix timestamp (in seconds) for when the run was started.
     *
     * @return self
     */
    public function setStartedAt($started_at)
    {
        if (is_null($started_at)) {
            array_push($this->openAPINullablesSetToNull, 'started_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('started_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets cancelled_at
     *
     * @return int
     */
    public function getCancelledAt()
    {
        return $this->container['cancelled_at'];
    }

    /**
     * Sets cancelled_at
     *
     * @param int $cancelled_at The Unix timestamp (in seconds) for when the run was cancelled.
     *
     * @return self
     */
    public function setCancelledAt($cancelled_at)
    {
        if (is_null($cancelled_at)) {
            array_push($this->openAPINullablesSetToNull, 'cancelled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelled_at'] = $cancelled_at;

        return $this;
    }

    /**
     * Gets failed_at
     *
     * @return int
     */
    public function getFailedAt()
    {
        return $this->container['failed_at'];
    }

    /**
     * Sets failed_at
     *
     * @param int $failed_at The Unix timestamp (in seconds) for when the run failed.
     *
     * @return self
     */
    public function setFailedAt($failed_at)
    {
        if (is_null($failed_at)) {
            array_push($this->openAPINullablesSetToNull, 'failed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failed_at'] = $failed_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return int
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param int $completed_at The Unix timestamp (in seconds) for when the run was completed.
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        if (is_null($completed_at)) {
            array_push($this->openAPINullablesSetToNull, 'completed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets incomplete_details
     *
     * @return \JeedomOpenAI\Model\RunObjectIncompleteDetails
     */
    public function getIncompleteDetails()
    {
        return $this->container['incomplete_details'];
    }

    /**
     * Sets incomplete_details
     *
     * @param \JeedomOpenAI\Model\RunObjectIncompleteDetails $incomplete_details incomplete_details
     *
     * @return self
     */
    public function setIncompleteDetails($incomplete_details)
    {
        if (is_null($incomplete_details)) {
            array_push($this->openAPINullablesSetToNull, 'incomplete_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incomplete_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incomplete_details'] = $incomplete_details;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model The model that the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string $instructions The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets tools
     *
     * @return \JeedomOpenAI\Model\AssistantObjectToolsInner[]
     */
    public function getTools()
    {
        return $this->container['tools'];
    }

    /**
     * Sets tools
     *
     * @param \JeedomOpenAI\Model\AssistantObjectToolsInner[] $tools The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
     *
     * @return self
     */
    public function setTools($tools)
    {
        if (is_null($tools)) {
            throw new \InvalidArgumentException('non-nullable tools cannot be null');
        }

        if ((count($tools) > 20)) {
            throw new \InvalidArgumentException('invalid value for $tools when calling RunObject., number of items must be less than or equal to 20.');
        }
        $this->container['tools'] = $tools;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string> $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \JeedomOpenAI\Model\RunCompletionUsage
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \JeedomOpenAI\Model\RunCompletionUsage $usage usage
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            array_push($this->openAPINullablesSetToNull, 'usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature The sampling temperature used for this run. If not set, defaults to 1.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            array_push($this->openAPINullablesSetToNull, 'temperature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temperature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float|null $top_p The nucleus sampling value used for this run. If not set, defaults to 1.
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        if (is_null($top_p)) {
            array_push($this->openAPINullablesSetToNull, 'top_p');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_p', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets max_prompt_tokens
     *
     * @return int
     */
    public function getMaxPromptTokens()
    {
        return $this->container['max_prompt_tokens'];
    }

    /**
     * Sets max_prompt_tokens
     *
     * @param int $max_prompt_tokens The maximum number of prompt tokens specified to have been used over the course of the run.
     *
     * @return self
     */
    public function setMaxPromptTokens($max_prompt_tokens)
    {
        if (is_null($max_prompt_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_prompt_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_prompt_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_prompt_tokens) && ($max_prompt_tokens < 256)) {
            throw new \InvalidArgumentException('invalid value for $max_prompt_tokens when calling RunObject., must be bigger than or equal to 256.');
        }

        $this->container['max_prompt_tokens'] = $max_prompt_tokens;

        return $this;
    }

    /**
     * Gets max_completion_tokens
     *
     * @return int
     */
    public function getMaxCompletionTokens()
    {
        return $this->container['max_completion_tokens'];
    }

    /**
     * Sets max_completion_tokens
     *
     * @param int $max_completion_tokens The maximum number of completion tokens specified to have been used over the course of the run.
     *
     * @return self
     */
    public function setMaxCompletionTokens($max_completion_tokens)
    {
        if (is_null($max_completion_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_completion_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_completion_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_completion_tokens) && ($max_completion_tokens < 256)) {
            throw new \InvalidArgumentException('invalid value for $max_completion_tokens when calling RunObject., must be bigger than or equal to 256.');
        }

        $this->container['max_completion_tokens'] = $max_completion_tokens;

        return $this;
    }

    /**
     * Gets truncation_strategy
     *
     * @return \JeedomOpenAI\Model\CreateRunRequestTruncationStrategy
     */
    public function getTruncationStrategy()
    {
        return $this->container['truncation_strategy'];
    }

    /**
     * Sets truncation_strategy
     *
     * @param \JeedomOpenAI\Model\CreateRunRequestTruncationStrategy $truncation_strategy truncation_strategy
     *
     * @return self
     */
    public function setTruncationStrategy($truncation_strategy)
    {
        if (is_null($truncation_strategy)) {
            throw new \InvalidArgumentException('non-nullable truncation_strategy cannot be null');
        }
        $this->container['truncation_strategy'] = $truncation_strategy;

        return $this;
    }

    /**
     * Gets tool_choice
     *
     * @return \JeedomOpenAI\Model\CreateRunRequestToolChoice
     */
    public function getToolChoice()
    {
        return $this->container['tool_choice'];
    }

    /**
     * Sets tool_choice
     *
     * @param \JeedomOpenAI\Model\CreateRunRequestToolChoice $tool_choice tool_choice
     *
     * @return self
     */
    public function setToolChoice($tool_choice)
    {
        if (is_null($tool_choice)) {
            throw new \InvalidArgumentException('non-nullable tool_choice cannot be null');
        }
        $this->container['tool_choice'] = $tool_choice;

        return $this;
    }

    /**
     * Gets parallel_tool_calls
     *
     * @return bool
     */
    public function getParallelToolCalls()
    {
        return $this->container['parallel_tool_calls'];
    }

    /**
     * Sets parallel_tool_calls
     *
     * @param bool $parallel_tool_calls Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
     *
     * @return self
     */
    public function setParallelToolCalls($parallel_tool_calls)
    {
        if (is_null($parallel_tool_calls)) {
            throw new \InvalidArgumentException('non-nullable parallel_tool_calls cannot be null');
        }
        $this->container['parallel_tool_calls'] = $parallel_tool_calls;

        return $this;
    }

    /**
     * Gets response_format
     *
     * @return \JeedomOpenAI\Model\AssistantsApiResponseFormatOption
     */
    public function getResponseFormat()
    {
        return $this->container['response_format'];
    }

    /**
     * Sets response_format
     *
     * @param \JeedomOpenAI\Model\AssistantsApiResponseFormatOption $response_format response_format
     *
     * @return self
     */
    public function setResponseFormat($response_format)
    {
        if (is_null($response_format)) {
            throw new \InvalidArgumentException('non-nullable response_format cannot be null');
        }
        $this->container['response_format'] = $response_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


