<?php
/**
 * CreateThreadAndRunRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * CreateThreadAndRunRequest Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateThreadAndRunRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateThreadAndRunRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assistant_id' => 'string',
        'thread' => '\JeedomOpenAI\Model\CreateThreadRequest',
        'model' => '\JeedomOpenAI\Model\CreateThreadAndRunRequestModel',
        'instructions' => 'string',
        'tools' => '\JeedomOpenAI\Model\CreateThreadAndRunRequestToolsInner[]',
        'tool_resources' => '\JeedomOpenAI\Model\CreateThreadAndRunRequestToolResources',
        'metadata' => 'array<string,string>',
        'temperature' => 'float',
        'top_p' => 'float',
        'stream' => 'bool',
        'max_prompt_tokens' => 'int',
        'max_completion_tokens' => 'int',
        'truncation_strategy' => '\JeedomOpenAI\Model\CreateRunRequestTruncationStrategy',
        'tool_choice' => '\JeedomOpenAI\Model\CreateRunRequestToolChoice',
        'parallel_tool_calls' => 'bool',
        'response_format' => '\JeedomOpenAI\Model\AssistantsApiResponseFormatOption'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assistant_id' => null,
        'thread' => null,
        'model' => null,
        'instructions' => null,
        'tools' => null,
        'tool_resources' => null,
        'metadata' => null,
        'temperature' => null,
        'top_p' => null,
        'stream' => null,
        'max_prompt_tokens' => null,
        'max_completion_tokens' => null,
        'truncation_strategy' => null,
        'tool_choice' => null,
        'parallel_tool_calls' => null,
        'response_format' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assistant_id' => false,
        'thread' => false,
        'model' => true,
        'instructions' => true,
        'tools' => true,
        'tool_resources' => true,
        'metadata' => true,
        'temperature' => true,
        'top_p' => true,
        'stream' => true,
        'max_prompt_tokens' => true,
        'max_completion_tokens' => true,
        'truncation_strategy' => false,
        'tool_choice' => false,
        'parallel_tool_calls' => false,
        'response_format' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assistant_id' => 'assistant_id',
        'thread' => 'thread',
        'model' => 'model',
        'instructions' => 'instructions',
        'tools' => 'tools',
        'tool_resources' => 'tool_resources',
        'metadata' => 'metadata',
        'temperature' => 'temperature',
        'top_p' => 'top_p',
        'stream' => 'stream',
        'max_prompt_tokens' => 'max_prompt_tokens',
        'max_completion_tokens' => 'max_completion_tokens',
        'truncation_strategy' => 'truncation_strategy',
        'tool_choice' => 'tool_choice',
        'parallel_tool_calls' => 'parallel_tool_calls',
        'response_format' => 'response_format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assistant_id' => 'setAssistantId',
        'thread' => 'setThread',
        'model' => 'setModel',
        'instructions' => 'setInstructions',
        'tools' => 'setTools',
        'tool_resources' => 'setToolResources',
        'metadata' => 'setMetadata',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP',
        'stream' => 'setStream',
        'max_prompt_tokens' => 'setMaxPromptTokens',
        'max_completion_tokens' => 'setMaxCompletionTokens',
        'truncation_strategy' => 'setTruncationStrategy',
        'tool_choice' => 'setToolChoice',
        'parallel_tool_calls' => 'setParallelToolCalls',
        'response_format' => 'setResponseFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assistant_id' => 'getAssistantId',
        'thread' => 'getThread',
        'model' => 'getModel',
        'instructions' => 'getInstructions',
        'tools' => 'getTools',
        'tool_resources' => 'getToolResources',
        'metadata' => 'getMetadata',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP',
        'stream' => 'getStream',
        'max_prompt_tokens' => 'getMaxPromptTokens',
        'max_completion_tokens' => 'getMaxCompletionTokens',
        'truncation_strategy' => 'getTruncationStrategy',
        'tool_choice' => 'getToolChoice',
        'parallel_tool_calls' => 'getParallelToolCalls',
        'response_format' => 'getResponseFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('assistant_id', $data ?? [], null);
        $this->setIfExists('thread', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('tools', $data ?? [], null);
        $this->setIfExists('tool_resources', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], 1);
        $this->setIfExists('top_p', $data ?? [], 1);
        $this->setIfExists('stream', $data ?? [], null);
        $this->setIfExists('max_prompt_tokens', $data ?? [], null);
        $this->setIfExists('max_completion_tokens', $data ?? [], null);
        $this->setIfExists('truncation_strategy', $data ?? [], null);
        $this->setIfExists('tool_choice', $data ?? [], null);
        $this->setIfExists('parallel_tool_calls', $data ?? [], true);
        $this->setIfExists('response_format', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['assistant_id'] === null) {
            $invalidProperties[] = "'assistant_id' can't be null";
        }
        if (!is_null($this->container['tools']) && (count($this->container['tools']) > 20)) {
            $invalidProperties[] = "invalid value for 'tools', number of items must be less than or equal to 20.";
        }

        if (!is_null($this->container['temperature']) && ($this->container['temperature'] > 2)) {
            $invalidProperties[] = "invalid value for 'temperature', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['temperature']) && ($this->container['temperature'] < 0)) {
            $invalidProperties[] = "invalid value for 'temperature', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['top_p']) && ($this->container['top_p'] > 1)) {
            $invalidProperties[] = "invalid value for 'top_p', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['top_p']) && ($this->container['top_p'] < 0)) {
            $invalidProperties[] = "invalid value for 'top_p', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_prompt_tokens']) && ($this->container['max_prompt_tokens'] < 256)) {
            $invalidProperties[] = "invalid value for 'max_prompt_tokens', must be bigger than or equal to 256.";
        }

        if (!is_null($this->container['max_completion_tokens']) && ($this->container['max_completion_tokens'] < 256)) {
            $invalidProperties[] = "invalid value for 'max_completion_tokens', must be bigger than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assistant_id
     *
     * @return string
     */
    public function getAssistantId()
    {
        return $this->container['assistant_id'];
    }

    /**
     * Sets assistant_id
     *
     * @param string $assistant_id The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
     *
     * @return self
     */
    public function setAssistantId($assistant_id)
    {
        if (is_null($assistant_id)) {
            throw new \InvalidArgumentException('non-nullable assistant_id cannot be null');
        }
        $this->container['assistant_id'] = $assistant_id;

        return $this;
    }

    /**
     * Gets thread
     *
     * @return \JeedomOpenAI\Model\CreateThreadRequest|null
     */
    public function getThread()
    {
        return $this->container['thread'];
    }

    /**
     * Sets thread
     *
     * @param \JeedomOpenAI\Model\CreateThreadRequest|null $thread thread
     *
     * @return self
     */
    public function setThread($thread)
    {
        if (is_null($thread)) {
            throw new \InvalidArgumentException('non-nullable thread cannot be null');
        }
        $this->container['thread'] = $thread;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \JeedomOpenAI\Model\CreateThreadAndRunRequestModel|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \JeedomOpenAI\Model\CreateThreadAndRunRequestModel|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            array_push($this->openAPINullablesSetToNull, 'model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            array_push($this->openAPINullablesSetToNull, 'instructions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instructions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets tools
     *
     * @return \JeedomOpenAI\Model\CreateThreadAndRunRequestToolsInner[]|null
     */
    public function getTools()
    {
        return $this->container['tools'];
    }

    /**
     * Sets tools
     *
     * @param \JeedomOpenAI\Model\CreateThreadAndRunRequestToolsInner[]|null $tools Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
     *
     * @return self
     */
    public function setTools($tools)
    {
        if (is_null($tools)) {
            array_push($this->openAPINullablesSetToNull, 'tools');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tools', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tools) && (count($tools) > 20)) {
            throw new \InvalidArgumentException('invalid value for $tools when calling CreateThreadAndRunRequest., number of items must be less than or equal to 20.');
        }
        $this->container['tools'] = $tools;

        return $this;
    }

    /**
     * Gets tool_resources
     *
     * @return \JeedomOpenAI\Model\CreateThreadAndRunRequestToolResources|null
     */
    public function getToolResources()
    {
        return $this->container['tool_resources'];
    }

    /**
     * Sets tool_resources
     *
     * @param \JeedomOpenAI\Model\CreateThreadAndRunRequestToolResources|null $tool_resources tool_resources
     *
     * @return self
     */
    public function setToolResources($tool_resources)
    {
        if (is_null($tool_resources)) {
            array_push($this->openAPINullablesSetToNull, 'tool_resources');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tool_resources', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tool_resources'] = $tool_resources;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            array_push($this->openAPINullablesSetToNull, 'temperature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temperature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($temperature) && ($temperature > 2)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling CreateThreadAndRunRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($temperature) && ($temperature < 0)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling CreateThreadAndRunRequest., must be bigger than or equal to 0.');
        }

        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float|null $top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        if (is_null($top_p)) {
            array_push($this->openAPINullablesSetToNull, 'top_p');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_p', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($top_p) && ($top_p > 1)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling CreateThreadAndRunRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($top_p) && ($top_p < 0)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling CreateThreadAndRunRequest., must be bigger than or equal to 0.');
        }

        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return bool|null
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param bool|null $stream If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
     *
     * @return self
     */
    public function setStream($stream)
    {
        if (is_null($stream)) {
            array_push($this->openAPINullablesSetToNull, 'stream');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stream', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stream'] = $stream;

        return $this;
    }

    /**
     * Gets max_prompt_tokens
     *
     * @return int|null
     */
    public function getMaxPromptTokens()
    {
        return $this->container['max_prompt_tokens'];
    }

    /**
     * Sets max_prompt_tokens
     *
     * @param int|null $max_prompt_tokens The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
     *
     * @return self
     */
    public function setMaxPromptTokens($max_prompt_tokens)
    {
        if (is_null($max_prompt_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_prompt_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_prompt_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_prompt_tokens) && ($max_prompt_tokens < 256)) {
            throw new \InvalidArgumentException('invalid value for $max_prompt_tokens when calling CreateThreadAndRunRequest., must be bigger than or equal to 256.');
        }

        $this->container['max_prompt_tokens'] = $max_prompt_tokens;

        return $this;
    }

    /**
     * Gets max_completion_tokens
     *
     * @return int|null
     */
    public function getMaxCompletionTokens()
    {
        return $this->container['max_completion_tokens'];
    }

    /**
     * Sets max_completion_tokens
     *
     * @param int|null $max_completion_tokens The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
     *
     * @return self
     */
    public function setMaxCompletionTokens($max_completion_tokens)
    {
        if (is_null($max_completion_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_completion_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_completion_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_completion_tokens) && ($max_completion_tokens < 256)) {
            throw new \InvalidArgumentException('invalid value for $max_completion_tokens when calling CreateThreadAndRunRequest., must be bigger than or equal to 256.');
        }

        $this->container['max_completion_tokens'] = $max_completion_tokens;

        return $this;
    }

    /**
     * Gets truncation_strategy
     *
     * @return \JeedomOpenAI\Model\CreateRunRequestTruncationStrategy|null
     */
    public function getTruncationStrategy()
    {
        return $this->container['truncation_strategy'];
    }

    /**
     * Sets truncation_strategy
     *
     * @param \JeedomOpenAI\Model\CreateRunRequestTruncationStrategy|null $truncation_strategy truncation_strategy
     *
     * @return self
     */
    public function setTruncationStrategy($truncation_strategy)
    {
        if (is_null($truncation_strategy)) {
            throw new \InvalidArgumentException('non-nullable truncation_strategy cannot be null');
        }
        $this->container['truncation_strategy'] = $truncation_strategy;

        return $this;
    }

    /**
     * Gets tool_choice
     *
     * @return \JeedomOpenAI\Model\CreateRunRequestToolChoice|null
     */
    public function getToolChoice()
    {
        return $this->container['tool_choice'];
    }

    /**
     * Sets tool_choice
     *
     * @param \JeedomOpenAI\Model\CreateRunRequestToolChoice|null $tool_choice tool_choice
     *
     * @return self
     */
    public function setToolChoice($tool_choice)
    {
        if (is_null($tool_choice)) {
            throw new \InvalidArgumentException('non-nullable tool_choice cannot be null');
        }
        $this->container['tool_choice'] = $tool_choice;

        return $this;
    }

    /**
     * Gets parallel_tool_calls
     *
     * @return bool|null
     */
    public function getParallelToolCalls()
    {
        return $this->container['parallel_tool_calls'];
    }

    /**
     * Sets parallel_tool_calls
     *
     * @param bool|null $parallel_tool_calls Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
     *
     * @return self
     */
    public function setParallelToolCalls($parallel_tool_calls)
    {
        if (is_null($parallel_tool_calls)) {
            throw new \InvalidArgumentException('non-nullable parallel_tool_calls cannot be null');
        }
        $this->container['parallel_tool_calls'] = $parallel_tool_calls;

        return $this;
    }

    /**
     * Gets response_format
     *
     * @return \JeedomOpenAI\Model\AssistantsApiResponseFormatOption|null
     */
    public function getResponseFormat()
    {
        return $this->container['response_format'];
    }

    /**
     * Sets response_format
     *
     * @param \JeedomOpenAI\Model\AssistantsApiResponseFormatOption|null $response_format response_format
     *
     * @return self
     */
    public function setResponseFormat($response_format)
    {
        if (is_null($response_format)) {
            throw new \InvalidArgumentException('non-nullable response_format cannot be null');
        }
        $this->container['response_format'] = $response_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


