<?php
/**
 * ItemResource
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * ItemResource Class Doc Comment
 *
 * @category Class
 * @description Content item used to generate a response.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'role' => 'string',
        'status' => 'string',
        'content' => '\JeedomOpenAI\Model\OutputContent[]',
        'id' => 'string',
        'queries' => 'string[]',
        'results' => '\JeedomOpenAI\Model\FileSearchToolCallResultsInner[]',
        'call_id' => 'string',
        'action' => '\JeedomOpenAI\Model\ComputerAction',
        'pending_safety_checks' => '\JeedomOpenAI\Model\ComputerToolCallSafetyCheck[]',
        'acknowledged_safety_checks' => '\JeedomOpenAI\Model\ComputerToolCallSafetyCheck[]',
        'output' => 'string',
        'name' => 'string',
        'arguments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'role' => null,
        'status' => null,
        'content' => null,
        'id' => null,
        'queries' => null,
        'results' => null,
        'call_id' => null,
        'action' => null,
        'pending_safety_checks' => null,
        'acknowledged_safety_checks' => null,
        'output' => null,
        'name' => null,
        'arguments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'role' => false,
        'status' => false,
        'content' => false,
        'id' => false,
        'queries' => false,
        'results' => true,
        'call_id' => false,
        'action' => false,
        'pending_safety_checks' => false,
        'acknowledged_safety_checks' => false,
        'output' => false,
        'name' => false,
        'arguments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'role' => 'role',
        'status' => 'status',
        'content' => 'content',
        'id' => 'id',
        'queries' => 'queries',
        'results' => 'results',
        'call_id' => 'call_id',
        'action' => 'action',
        'pending_safety_checks' => 'pending_safety_checks',
        'acknowledged_safety_checks' => 'acknowledged_safety_checks',
        'output' => 'output',
        'name' => 'name',
        'arguments' => 'arguments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'role' => 'setRole',
        'status' => 'setStatus',
        'content' => 'setContent',
        'id' => 'setId',
        'queries' => 'setQueries',
        'results' => 'setResults',
        'call_id' => 'setCallId',
        'action' => 'setAction',
        'pending_safety_checks' => 'setPendingSafetyChecks',
        'acknowledged_safety_checks' => 'setAcknowledgedSafetyChecks',
        'output' => 'setOutput',
        'name' => 'setName',
        'arguments' => 'setArguments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'role' => 'getRole',
        'status' => 'getStatus',
        'content' => 'getContent',
        'id' => 'getId',
        'queries' => 'getQueries',
        'results' => 'getResults',
        'call_id' => 'getCallId',
        'action' => 'getAction',
        'pending_safety_checks' => 'getPendingSafetyChecks',
        'acknowledged_safety_checks' => 'getAcknowledgedSafetyChecks',
        'output' => 'getOutput',
        'name' => 'getName',
        'arguments' => 'getArguments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_MESSAGE = 'message';
    public const TYPE_FILE_SEARCH_CALL = 'file_search_call';
    public const TYPE_COMPUTER_CALL = 'computer_call';
    public const TYPE_COMPUTER_CALL_OUTPUT = 'computer_call_output';
    public const TYPE_WEB_SEARCH_CALL = 'web_search_call';
    public const TYPE_FUNCTION_CALL = 'function_call';
    public const TYPE_FUNCTION_CALL_OUTPUT = 'function_call_output';
    public const ROLE_ASSISTANT = 'assistant';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_INCOMPLETE = 'incomplete';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MESSAGE,
            self::TYPE_FILE_SEARCH_CALL,
            self::TYPE_COMPUTER_CALL,
            self::TYPE_COMPUTER_CALL_OUTPUT,
            self::TYPE_WEB_SEARCH_CALL,
            self::TYPE_FUNCTION_CALL,
            self::TYPE_FUNCTION_CALL_OUTPUT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_ASSISTANT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_INCOMPLETE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('queries', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('pending_safety_checks', $data ?? [], null);
        $this->setIfExists('acknowledged_safety_checks', $data ?? [], null);
        $this->setIfExists('output', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('arguments', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['queries'] === null) {
            $invalidProperties[] = "'queries' can't be null";
        }
        if ($this->container['call_id'] === null) {
            $invalidProperties[] = "'call_id' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['pending_safety_checks'] === null) {
            $invalidProperties[] = "'pending_safety_checks' can't be null";
        }
        if ($this->container['output'] === null) {
            $invalidProperties[] = "'output' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['arguments'] === null) {
            $invalidProperties[] = "'arguments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the message input. Always set to `message`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role The role of the output message. Always `assistant`.
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets content
     *
     * @return \JeedomOpenAI\Model\OutputContent[]
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \JeedomOpenAI\Model\OutputContent[] $content The content of the output message.
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the function call tool output.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets queries
     *
     * @return string[]
     */
    public function getQueries()
    {
        return $this->container['queries'];
    }

    /**
     * Sets queries
     *
     * @param string[] $queries The queries used to search for files.
     *
     * @return self
     */
    public function setQueries($queries)
    {
        if (is_null($queries)) {
            throw new \InvalidArgumentException('non-nullable queries cannot be null');
        }
        $this->container['queries'] = $queries;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \JeedomOpenAI\Model\FileSearchToolCallResultsInner[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \JeedomOpenAI\Model\FileSearchToolCallResultsInner[]|null $results The results of the file search tool call.
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            array_push($this->openAPINullablesSetToNull, 'results');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('results', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string $call_id The unique ID of the function tool call generated by the model.
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \JeedomOpenAI\Model\ComputerAction
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \JeedomOpenAI\Model\ComputerAction $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets pending_safety_checks
     *
     * @return \JeedomOpenAI\Model\ComputerToolCallSafetyCheck[]
     */
    public function getPendingSafetyChecks()
    {
        return $this->container['pending_safety_checks'];
    }

    /**
     * Sets pending_safety_checks
     *
     * @param \JeedomOpenAI\Model\ComputerToolCallSafetyCheck[] $pending_safety_checks The pending safety checks for the computer call.
     *
     * @return self
     */
    public function setPendingSafetyChecks($pending_safety_checks)
    {
        if (is_null($pending_safety_checks)) {
            throw new \InvalidArgumentException('non-nullable pending_safety_checks cannot be null');
        }
        $this->container['pending_safety_checks'] = $pending_safety_checks;

        return $this;
    }

    /**
     * Gets acknowledged_safety_checks
     *
     * @return \JeedomOpenAI\Model\ComputerToolCallSafetyCheck[]|null
     */
    public function getAcknowledgedSafetyChecks()
    {
        return $this->container['acknowledged_safety_checks'];
    }

    /**
     * Sets acknowledged_safety_checks
     *
     * @param \JeedomOpenAI\Model\ComputerToolCallSafetyCheck[]|null $acknowledged_safety_checks The safety checks reported by the API that have been acknowledged by the  developer.
     *
     * @return self
     */
    public function setAcknowledgedSafetyChecks($acknowledged_safety_checks)
    {
        if (is_null($acknowledged_safety_checks)) {
            throw new \InvalidArgumentException('non-nullable acknowledged_safety_checks cannot be null');
        }
        $this->container['acknowledged_safety_checks'] = $acknowledged_safety_checks;

        return $this;
    }

    /**
     * Gets output
     *
     * @return string
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param string $output A JSON string of the output of the function tool call.
     *
     * @return self
     */
    public function setOutput($output)
    {
        if (is_null($output)) {
            throw new \InvalidArgumentException('non-nullable output cannot be null');
        }
        $this->container['output'] = $output;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the function to run.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets arguments
     *
     * @return string
     */
    public function getArguments()
    {
        return $this->container['arguments'];
    }

    /**
     * Sets arguments
     *
     * @param string $arguments A JSON string of the arguments to pass to the function.
     *
     * @return self
     */
    public function setArguments($arguments)
    {
        if (is_null($arguments)) {
            throw new \InvalidArgumentException('non-nullable arguments cannot be null');
        }
        $this->container['arguments'] = $arguments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


