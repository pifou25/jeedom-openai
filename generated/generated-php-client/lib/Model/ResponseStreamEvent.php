<?php
/**
 * ResponseStreamEvent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * ResponseStreamEvent Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseStreamEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResponseStreamEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'delta' => 'string',
        'output_index' => 'int',
        'code' => 'string',
        'code_interpreter_call' => '\JeedomOpenAI\Model\CodeInterpreterToolCall',
        'response' => '\JeedomOpenAI\Model\Response',
        'item_id' => 'string',
        'content_index' => 'int',
        'part' => '\JeedomOpenAI\Model\OutputContent',
        'message' => 'string',
        'param' => 'string',
        'arguments' => 'string',
        'item' => '\JeedomOpenAI\Model\OutputItem',
        'refusal' => 'string',
        'annotation_index' => 'int',
        'annotation' => '\JeedomOpenAI\Model\Annotation',
        'text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'delta' => null,
        'output_index' => null,
        'code' => null,
        'code_interpreter_call' => null,
        'response' => null,
        'item_id' => null,
        'content_index' => null,
        'part' => null,
        'message' => null,
        'param' => null,
        'arguments' => null,
        'item' => null,
        'refusal' => null,
        'annotation_index' => null,
        'annotation' => null,
        'text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'delta' => false,
        'output_index' => false,
        'code' => true,
        'code_interpreter_call' => false,
        'response' => false,
        'item_id' => false,
        'content_index' => false,
        'part' => false,
        'message' => false,
        'param' => true,
        'arguments' => false,
        'item' => false,
        'refusal' => false,
        'annotation_index' => false,
        'annotation' => false,
        'text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'delta' => 'delta',
        'output_index' => 'output_index',
        'code' => 'code',
        'code_interpreter_call' => 'code_interpreter_call',
        'response' => 'response',
        'item_id' => 'item_id',
        'content_index' => 'content_index',
        'part' => 'part',
        'message' => 'message',
        'param' => 'param',
        'arguments' => 'arguments',
        'item' => 'item',
        'refusal' => 'refusal',
        'annotation_index' => 'annotation_index',
        'annotation' => 'annotation',
        'text' => 'text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'delta' => 'setDelta',
        'output_index' => 'setOutputIndex',
        'code' => 'setCode',
        'code_interpreter_call' => 'setCodeInterpreterCall',
        'response' => 'setResponse',
        'item_id' => 'setItemId',
        'content_index' => 'setContentIndex',
        'part' => 'setPart',
        'message' => 'setMessage',
        'param' => 'setParam',
        'arguments' => 'setArguments',
        'item' => 'setItem',
        'refusal' => 'setRefusal',
        'annotation_index' => 'setAnnotationIndex',
        'annotation' => 'setAnnotation',
        'text' => 'setText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'delta' => 'getDelta',
        'output_index' => 'getOutputIndex',
        'code' => 'getCode',
        'code_interpreter_call' => 'getCodeInterpreterCall',
        'response' => 'getResponse',
        'item_id' => 'getItemId',
        'content_index' => 'getContentIndex',
        'part' => 'getPart',
        'message' => 'getMessage',
        'param' => 'getParam',
        'arguments' => 'getArguments',
        'item' => 'getItem',
        'refusal' => 'getRefusal',
        'annotation_index' => 'getAnnotationIndex',
        'annotation' => 'getAnnotation',
        'text' => 'getText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_RESPONSE_AUDIO_DELTA = 'response.audio.delta';
    public const TYPE_RESPONSE_AUDIO_DONE = 'response.audio.done';
    public const TYPE_RESPONSE_AUDIO_TRANSCRIPT_DELTA = 'response.audio.transcript.delta';
    public const TYPE_RESPONSE_AUDIO_TRANSCRIPT_DONE = 'response.audio.transcript.done';
    public const TYPE_RESPONSE_CODE_INTERPRETER_CALL_CODE_DELTA = 'response.code_interpreter_call.code.delta';
    public const TYPE_RESPONSE_CODE_INTERPRETER_CALL_CODE_DONE = 'response.code_interpreter_call.code.done';
    public const TYPE_RESPONSE_CODE_INTERPRETER_CALL_COMPLETED = 'response.code_interpreter_call.completed';
    public const TYPE_RESPONSE_CODE_INTERPRETER_CALL_IN_PROGRESS = 'response.code_interpreter_call.in_progress';
    public const TYPE_RESPONSE_CODE_INTERPRETER_CALL_INTERPRETING = 'response.code_interpreter_call.interpreting';
    public const TYPE_RESPONSE_COMPLETED = 'response.completed';
    public const TYPE_RESPONSE_CONTENT_PART_ADDED = 'response.content_part.added';
    public const TYPE_RESPONSE_CONTENT_PART_DONE = 'response.content_part.done';
    public const TYPE_RESPONSE_CREATED = 'response.created';
    public const TYPE_ERROR = 'error';
    public const TYPE_RESPONSE_FILE_SEARCH_CALL_COMPLETED = 'response.file_search_call.completed';
    public const TYPE_RESPONSE_FILE_SEARCH_CALL_IN_PROGRESS = 'response.file_search_call.in_progress';
    public const TYPE_RESPONSE_FILE_SEARCH_CALL_SEARCHING = 'response.file_search_call.searching';
    public const TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DELTA = 'response.function_call_arguments.delta';
    public const TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DONE = 'response.function_call_arguments.done';
    public const TYPE_RESPONSE_IN_PROGRESS = 'response.in_progress';
    public const TYPE_RESPONSE_FAILED = 'response.failed';
    public const TYPE_RESPONSE_INCOMPLETE = 'response.incomplete';
    public const TYPE_RESPONSE_OUTPUT_ITEM_ADDED = 'response.output_item.added';
    public const TYPE_RESPONSE_OUTPUT_ITEM_DONE = 'response.output_item.done';
    public const TYPE_RESPONSE_REFUSAL_DELTA = 'response.refusal.delta';
    public const TYPE_RESPONSE_REFUSAL_DONE = 'response.refusal.done';
    public const TYPE_RESPONSE_OUTPUT_TEXT_ANNOTATION_ADDED = 'response.output_text.annotation.added';
    public const TYPE_RESPONSE_OUTPUT_TEXT_DELTA = 'response.output_text.delta';
    public const TYPE_RESPONSE_OUTPUT_TEXT_DONE = 'response.output_text.done';
    public const TYPE_RESPONSE_WEB_SEARCH_CALL_COMPLETED = 'response.web_search_call.completed';
    public const TYPE_RESPONSE_WEB_SEARCH_CALL_IN_PROGRESS = 'response.web_search_call.in_progress';
    public const TYPE_RESPONSE_WEB_SEARCH_CALL_SEARCHING = 'response.web_search_call.searching';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_RESPONSE_AUDIO_DELTA,
            self::TYPE_RESPONSE_AUDIO_DONE,
            self::TYPE_RESPONSE_AUDIO_TRANSCRIPT_DELTA,
            self::TYPE_RESPONSE_AUDIO_TRANSCRIPT_DONE,
            self::TYPE_RESPONSE_CODE_INTERPRETER_CALL_CODE_DELTA,
            self::TYPE_RESPONSE_CODE_INTERPRETER_CALL_CODE_DONE,
            self::TYPE_RESPONSE_CODE_INTERPRETER_CALL_COMPLETED,
            self::TYPE_RESPONSE_CODE_INTERPRETER_CALL_IN_PROGRESS,
            self::TYPE_RESPONSE_CODE_INTERPRETER_CALL_INTERPRETING,
            self::TYPE_RESPONSE_COMPLETED,
            self::TYPE_RESPONSE_CONTENT_PART_ADDED,
            self::TYPE_RESPONSE_CONTENT_PART_DONE,
            self::TYPE_RESPONSE_CREATED,
            self::TYPE_ERROR,
            self::TYPE_RESPONSE_FILE_SEARCH_CALL_COMPLETED,
            self::TYPE_RESPONSE_FILE_SEARCH_CALL_IN_PROGRESS,
            self::TYPE_RESPONSE_FILE_SEARCH_CALL_SEARCHING,
            self::TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DELTA,
            self::TYPE_RESPONSE_FUNCTION_CALL_ARGUMENTS_DONE,
            self::TYPE_RESPONSE_IN_PROGRESS,
            self::TYPE_RESPONSE_FAILED,
            self::TYPE_RESPONSE_INCOMPLETE,
            self::TYPE_RESPONSE_OUTPUT_ITEM_ADDED,
            self::TYPE_RESPONSE_OUTPUT_ITEM_DONE,
            self::TYPE_RESPONSE_REFUSAL_DELTA,
            self::TYPE_RESPONSE_REFUSAL_DONE,
            self::TYPE_RESPONSE_OUTPUT_TEXT_ANNOTATION_ADDED,
            self::TYPE_RESPONSE_OUTPUT_TEXT_DELTA,
            self::TYPE_RESPONSE_OUTPUT_TEXT_DONE,
            self::TYPE_RESPONSE_WEB_SEARCH_CALL_COMPLETED,
            self::TYPE_RESPONSE_WEB_SEARCH_CALL_IN_PROGRESS,
            self::TYPE_RESPONSE_WEB_SEARCH_CALL_SEARCHING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('delta', $data ?? [], null);
        $this->setIfExists('output_index', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('code_interpreter_call', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('content_index', $data ?? [], null);
        $this->setIfExists('part', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('param', $data ?? [], null);
        $this->setIfExists('arguments', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('refusal', $data ?? [], null);
        $this->setIfExists('annotation_index', $data ?? [], null);
        $this->setIfExists('annotation', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['delta'] === null) {
            $invalidProperties[] = "'delta' can't be null";
        }
        if ($this->container['output_index'] === null) {
            $invalidProperties[] = "'output_index' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['code_interpreter_call'] === null) {
            $invalidProperties[] = "'code_interpreter_call' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['content_index'] === null) {
            $invalidProperties[] = "'content_index' can't be null";
        }
        if ($this->container['part'] === null) {
            $invalidProperties[] = "'part' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['param'] === null) {
            $invalidProperties[] = "'param' can't be null";
        }
        if ($this->container['arguments'] === null) {
            $invalidProperties[] = "'arguments' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['refusal'] === null) {
            $invalidProperties[] = "'refusal' can't be null";
        }
        if ($this->container['annotation_index'] === null) {
            $invalidProperties[] = "'annotation_index' can't be null";
        }
        if ($this->container['annotation'] === null) {
            $invalidProperties[] = "'annotation' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the event. Always `response.audio.delta`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets delta
     *
     * @return string
     */
    public function getDelta()
    {
        return $this->container['delta'];
    }

    /**
     * Sets delta
     *
     * @param string $delta The text delta that was added.
     *
     * @return self
     */
    public function setDelta($delta)
    {
        if (is_null($delta)) {
            throw new \InvalidArgumentException('non-nullable delta cannot be null');
        }
        $this->container['delta'] = $delta;

        return $this;
    }

    /**
     * Gets output_index
     *
     * @return int
     */
    public function getOutputIndex()
    {
        return $this->container['output_index'];
    }

    /**
     * Sets output_index
     *
     * @param int $output_index The index of the output item that the web search call is associated with.
     *
     * @return self
     */
    public function setOutputIndex($output_index)
    {
        if (is_null($output_index)) {
            throw new \InvalidArgumentException('non-nullable output_index cannot be null');
        }
        $this->container['output_index'] = $output_index;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The error code.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets code_interpreter_call
     *
     * @return \JeedomOpenAI\Model\CodeInterpreterToolCall
     */
    public function getCodeInterpreterCall()
    {
        return $this->container['code_interpreter_call'];
    }

    /**
     * Sets code_interpreter_call
     *
     * @param \JeedomOpenAI\Model\CodeInterpreterToolCall $code_interpreter_call code_interpreter_call
     *
     * @return self
     */
    public function setCodeInterpreterCall($code_interpreter_call)
    {
        if (is_null($code_interpreter_call)) {
            throw new \InvalidArgumentException('non-nullable code_interpreter_call cannot be null');
        }
        $this->container['code_interpreter_call'] = $code_interpreter_call;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \JeedomOpenAI\Model\Response
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \JeedomOpenAI\Model\Response $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            throw new \InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id Unique ID for the output item associated with the web search call.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets content_index
     *
     * @return int
     */
    public function getContentIndex()
    {
        return $this->container['content_index'];
    }

    /**
     * Sets content_index
     *
     * @param int $content_index The index of the content part that the text content is finalized.
     *
     * @return self
     */
    public function setContentIndex($content_index)
    {
        if (is_null($content_index)) {
            throw new \InvalidArgumentException('non-nullable content_index cannot be null');
        }
        $this->container['content_index'] = $content_index;

        return $this;
    }

    /**
     * Gets part
     *
     * @return \JeedomOpenAI\Model\OutputContent
     */
    public function getPart()
    {
        return $this->container['part'];
    }

    /**
     * Sets part
     *
     * @param \JeedomOpenAI\Model\OutputContent $part part
     *
     * @return self
     */
    public function setPart($part)
    {
        if (is_null($part)) {
            throw new \InvalidArgumentException('non-nullable part cannot be null');
        }
        $this->container['part'] = $part;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The error message.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets param
     *
     * @return string
     */
    public function getParam()
    {
        return $this->container['param'];
    }

    /**
     * Sets param
     *
     * @param string $param The error parameter.
     *
     * @return self
     */
    public function setParam($param)
    {
        if (is_null($param)) {
            array_push($this->openAPINullablesSetToNull, 'param');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('param', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['param'] = $param;

        return $this;
    }

    /**
     * Gets arguments
     *
     * @return string
     */
    public function getArguments()
    {
        return $this->container['arguments'];
    }

    /**
     * Sets arguments
     *
     * @param string $arguments The function-call arguments.
     *
     * @return self
     */
    public function setArguments($arguments)
    {
        if (is_null($arguments)) {
            throw new \InvalidArgumentException('non-nullable arguments cannot be null');
        }
        $this->container['arguments'] = $arguments;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \JeedomOpenAI\Model\OutputItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \JeedomOpenAI\Model\OutputItem $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets refusal
     *
     * @return string
     */
    public function getRefusal()
    {
        return $this->container['refusal'];
    }

    /**
     * Sets refusal
     *
     * @param string $refusal The refusal text that is finalized.
     *
     * @return self
     */
    public function setRefusal($refusal)
    {
        if (is_null($refusal)) {
            throw new \InvalidArgumentException('non-nullable refusal cannot be null');
        }
        $this->container['refusal'] = $refusal;

        return $this;
    }

    /**
     * Gets annotation_index
     *
     * @return int
     */
    public function getAnnotationIndex()
    {
        return $this->container['annotation_index'];
    }

    /**
     * Sets annotation_index
     *
     * @param int $annotation_index The index of the annotation that was added.
     *
     * @return self
     */
    public function setAnnotationIndex($annotation_index)
    {
        if (is_null($annotation_index)) {
            throw new \InvalidArgumentException('non-nullable annotation_index cannot be null');
        }
        $this->container['annotation_index'] = $annotation_index;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return \JeedomOpenAI\Model\Annotation
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param \JeedomOpenAI\Model\Annotation $annotation annotation
     *
     * @return self
     */
    public function setAnnotation($annotation)
    {
        if (is_null($annotation)) {
            throw new \InvalidArgumentException('non-nullable annotation cannot be null');
        }
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The text content that is finalized.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


