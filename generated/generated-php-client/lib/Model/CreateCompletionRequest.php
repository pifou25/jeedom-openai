<?php
/**
 * CreateCompletionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * CreateCompletionRequest Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCompletionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCompletionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'model' => '\JeedomOpenAI\Model\CreateCompletionRequestModel',
        'prompt' => '\JeedomOpenAI\Model\CreateCompletionRequestPrompt',
        'best_of' => 'int',
        'echo' => 'bool',
        'frequency_penalty' => 'float',
        'logit_bias' => 'array<string,int>',
        'logprobs' => 'int',
        'max_tokens' => 'int',
        'n' => 'int',
        'presence_penalty' => 'float',
        'seed' => 'int',
        'stop' => '\JeedomOpenAI\Model\StopConfiguration',
        'stream' => 'bool',
        'stream_options' => '\JeedomOpenAI\Model\ChatCompletionStreamOptions',
        'suffix' => 'string',
        'temperature' => 'float',
        'top_p' => 'float',
        'user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'model' => null,
        'prompt' => null,
        'best_of' => null,
        'echo' => null,
        'frequency_penalty' => null,
        'logit_bias' => null,
        'logprobs' => null,
        'max_tokens' => null,
        'n' => null,
        'presence_penalty' => null,
        'seed' => 'int64',
        'stop' => null,
        'stream' => null,
        'stream_options' => null,
        'suffix' => null,
        'temperature' => null,
        'top_p' => null,
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'model' => false,
        'prompt' => true,
        'best_of' => true,
        'echo' => true,
        'frequency_penalty' => true,
        'logit_bias' => true,
        'logprobs' => true,
        'max_tokens' => true,
        'n' => true,
        'presence_penalty' => true,
        'seed' => true,
        'stop' => true,
        'stream' => true,
        'stream_options' => true,
        'suffix' => true,
        'temperature' => true,
        'top_p' => true,
        'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model' => 'model',
        'prompt' => 'prompt',
        'best_of' => 'best_of',
        'echo' => 'echo',
        'frequency_penalty' => 'frequency_penalty',
        'logit_bias' => 'logit_bias',
        'logprobs' => 'logprobs',
        'max_tokens' => 'max_tokens',
        'n' => 'n',
        'presence_penalty' => 'presence_penalty',
        'seed' => 'seed',
        'stop' => 'stop',
        'stream' => 'stream',
        'stream_options' => 'stream_options',
        'suffix' => 'suffix',
        'temperature' => 'temperature',
        'top_p' => 'top_p',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model' => 'setModel',
        'prompt' => 'setPrompt',
        'best_of' => 'setBestOf',
        'echo' => 'setEcho',
        'frequency_penalty' => 'setFrequencyPenalty',
        'logit_bias' => 'setLogitBias',
        'logprobs' => 'setLogprobs',
        'max_tokens' => 'setMaxTokens',
        'n' => 'setN',
        'presence_penalty' => 'setPresencePenalty',
        'seed' => 'setSeed',
        'stop' => 'setStop',
        'stream' => 'setStream',
        'stream_options' => 'setStreamOptions',
        'suffix' => 'setSuffix',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model' => 'getModel',
        'prompt' => 'getPrompt',
        'best_of' => 'getBestOf',
        'echo' => 'getEcho',
        'frequency_penalty' => 'getFrequencyPenalty',
        'logit_bias' => 'getLogitBias',
        'logprobs' => 'getLogprobs',
        'max_tokens' => 'getMaxTokens',
        'n' => 'getN',
        'presence_penalty' => 'getPresencePenalty',
        'seed' => 'getSeed',
        'stop' => 'getStop',
        'stream' => 'getStream',
        'stream_options' => 'getStreamOptions',
        'suffix' => 'getSuffix',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('prompt', $data ?? [], null);
        $this->setIfExists('best_of', $data ?? [], 1);
        $this->setIfExists('echo', $data ?? [], false);
        $this->setIfExists('frequency_penalty', $data ?? [], 0);
        $this->setIfExists('logit_bias', $data ?? [], null);
        $this->setIfExists('logprobs', $data ?? [], null);
        $this->setIfExists('max_tokens', $data ?? [], 16);
        $this->setIfExists('n', $data ?? [], 1);
        $this->setIfExists('presence_penalty', $data ?? [], 0);
        $this->setIfExists('seed', $data ?? [], null);
        $this->setIfExists('stop', $data ?? [], null);
        $this->setIfExists('stream', $data ?? [], false);
        $this->setIfExists('stream_options', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], 1);
        $this->setIfExists('top_p', $data ?? [], 1);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['prompt'] === null) {
            $invalidProperties[] = "'prompt' can't be null";
        }
        if (!is_null($this->container['best_of']) && ($this->container['best_of'] > 20)) {
            $invalidProperties[] = "invalid value for 'best_of', must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['best_of']) && ($this->container['best_of'] < 0)) {
            $invalidProperties[] = "invalid value for 'best_of', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['frequency_penalty']) && ($this->container['frequency_penalty'] > 2)) {
            $invalidProperties[] = "invalid value for 'frequency_penalty', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['frequency_penalty']) && ($this->container['frequency_penalty'] < -2)) {
            $invalidProperties[] = "invalid value for 'frequency_penalty', must be bigger than or equal to -2.";
        }

        if (!is_null($this->container['logprobs']) && ($this->container['logprobs'] > 5)) {
            $invalidProperties[] = "invalid value for 'logprobs', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['logprobs']) && ($this->container['logprobs'] < 0)) {
            $invalidProperties[] = "invalid value for 'logprobs', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_tokens']) && ($this->container['max_tokens'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_tokens', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['n']) && ($this->container['n'] > 128)) {
            $invalidProperties[] = "invalid value for 'n', must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['n']) && ($this->container['n'] < 1)) {
            $invalidProperties[] = "invalid value for 'n', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['presence_penalty']) && ($this->container['presence_penalty'] > 2)) {
            $invalidProperties[] = "invalid value for 'presence_penalty', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['presence_penalty']) && ($this->container['presence_penalty'] < -2)) {
            $invalidProperties[] = "invalid value for 'presence_penalty', must be bigger than or equal to -2.";
        }

        if (!is_null($this->container['temperature']) && ($this->container['temperature'] > 2)) {
            $invalidProperties[] = "invalid value for 'temperature', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['temperature']) && ($this->container['temperature'] < 0)) {
            $invalidProperties[] = "invalid value for 'temperature', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['top_p']) && ($this->container['top_p'] > 1)) {
            $invalidProperties[] = "invalid value for 'top_p', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['top_p']) && ($this->container['top_p'] < 0)) {
            $invalidProperties[] = "invalid value for 'top_p', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model
     *
     * @return \JeedomOpenAI\Model\CreateCompletionRequestModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \JeedomOpenAI\Model\CreateCompletionRequestModel $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return \JeedomOpenAI\Model\CreateCompletionRequestPrompt
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param \JeedomOpenAI\Model\CreateCompletionRequestPrompt $prompt prompt
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        if (is_null($prompt)) {
            array_push($this->openAPINullablesSetToNull, 'prompt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prompt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets best_of
     *
     * @return int|null
     */
    public function getBestOf()
    {
        return $this->container['best_of'];
    }

    /**
     * Sets best_of
     *
     * @param int|null $best_of Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     *
     * @return self
     */
    public function setBestOf($best_of)
    {
        if (is_null($best_of)) {
            array_push($this->openAPINullablesSetToNull, 'best_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('best_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($best_of) && ($best_of > 20)) {
            throw new \InvalidArgumentException('invalid value for $best_of when calling CreateCompletionRequest., must be smaller than or equal to 20.');
        }
        if (!is_null($best_of) && ($best_of < 0)) {
            throw new \InvalidArgumentException('invalid value for $best_of when calling CreateCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['best_of'] = $best_of;

        return $this;
    }

    /**
     * Gets echo
     *
     * @return bool|null
     */
    public function getEcho()
    {
        return $this->container['echo'];
    }

    /**
     * Sets echo
     *
     * @param bool|null $echo Echo back the prompt in addition to the completion
     *
     * @return self
     */
    public function setEcho($echo)
    {
        if (is_null($echo)) {
            array_push($this->openAPINullablesSetToNull, 'echo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('echo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['echo'] = $echo;

        return $this;
    }

    /**
     * Gets frequency_penalty
     *
     * @return float|null
     */
    public function getFrequencyPenalty()
    {
        return $this->container['frequency_penalty'];
    }

    /**
     * Sets frequency_penalty
     *
     * @param float|null $frequency_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation)
     *
     * @return self
     */
    public function setFrequencyPenalty($frequency_penalty)
    {
        if (is_null($frequency_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'frequency_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frequency_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($frequency_penalty) && ($frequency_penalty > 2)) {
            throw new \InvalidArgumentException('invalid value for $frequency_penalty when calling CreateCompletionRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($frequency_penalty) && ($frequency_penalty < -2)) {
            throw new \InvalidArgumentException('invalid value for $frequency_penalty when calling CreateCompletionRequest., must be bigger than or equal to -2.');
        }

        $this->container['frequency_penalty'] = $frequency_penalty;

        return $this;
    }

    /**
     * Gets logit_bias
     *
     * @return array<string,int>|null
     */
    public function getLogitBias()
    {
        return $this->container['logit_bias'];
    }

    /**
     * Sets logit_bias
     *
     * @param array<string,int>|null $logit_bias Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.
     *
     * @return self
     */
    public function setLogitBias($logit_bias)
    {
        if (is_null($logit_bias)) {
            array_push($this->openAPINullablesSetToNull, 'logit_bias');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logit_bias', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logit_bias'] = $logit_bias;

        return $this;
    }

    /**
     * Gets logprobs
     *
     * @return int|null
     */
    public function getLogprobs()
    {
        return $this->container['logprobs'];
    }

    /**
     * Sets logprobs
     *
     * @param int|null $logprobs Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.
     *
     * @return self
     */
    public function setLogprobs($logprobs)
    {
        if (is_null($logprobs)) {
            array_push($this->openAPINullablesSetToNull, 'logprobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logprobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($logprobs) && ($logprobs > 5)) {
            throw new \InvalidArgumentException('invalid value for $logprobs when calling CreateCompletionRequest., must be smaller than or equal to 5.');
        }
        if (!is_null($logprobs) && ($logprobs < 0)) {
            throw new \InvalidArgumentException('invalid value for $logprobs when calling CreateCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['logprobs'] = $logprobs;

        return $this;
    }

    /**
     * Gets max_tokens
     *
     * @return int|null
     */
    public function getMaxTokens()
    {
        return $this->container['max_tokens'];
    }

    /**
     * Sets max_tokens
     *
     * @param int|null $max_tokens The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     * @return self
     */
    public function setMaxTokens($max_tokens)
    {
        if (is_null($max_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_tokens) && ($max_tokens < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_tokens when calling CreateCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['max_tokens'] = $max_tokens;

        return $this;
    }

    /**
     * Gets n
     *
     * @return int|null
     */
    public function getN()
    {
        return $this->container['n'];
    }

    /**
     * Sets n
     *
     * @param int|null $n How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     *
     * @return self
     */
    public function setN($n)
    {
        if (is_null($n)) {
            array_push($this->openAPINullablesSetToNull, 'n');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n) && ($n > 128)) {
            throw new \InvalidArgumentException('invalid value for $n when calling CreateCompletionRequest., must be smaller than or equal to 128.');
        }
        if (!is_null($n) && ($n < 1)) {
            throw new \InvalidArgumentException('invalid value for $n when calling CreateCompletionRequest., must be bigger than or equal to 1.');
        }

        $this->container['n'] = $n;

        return $this;
    }

    /**
     * Gets presence_penalty
     *
     * @return float|null
     */
    public function getPresencePenalty()
    {
        return $this->container['presence_penalty'];
    }

    /**
     * Sets presence_penalty
     *
     * @param float|null $presence_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation)
     *
     * @return self
     */
    public function setPresencePenalty($presence_penalty)
    {
        if (is_null($presence_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'presence_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('presence_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($presence_penalty) && ($presence_penalty > 2)) {
            throw new \InvalidArgumentException('invalid value for $presence_penalty when calling CreateCompletionRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($presence_penalty) && ($presence_penalty < -2)) {
            throw new \InvalidArgumentException('invalid value for $presence_penalty when calling CreateCompletionRequest., must be bigger than or equal to -2.');
        }

        $this->container['presence_penalty'] = $presence_penalty;

        return $this;
    }

    /**
     * Gets seed
     *
     * @return int|null
     */
    public function getSeed()
    {
        return $this->container['seed'];
    }

    /**
     * Sets seed
     *
     * @param int|null $seed If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     * @return self
     */
    public function setSeed($seed)
    {
        if (is_null($seed)) {
            array_push($this->openAPINullablesSetToNull, 'seed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seed'] = $seed;

        return $this;
    }

    /**
     * Gets stop
     *
     * @return \JeedomOpenAI\Model\StopConfiguration|null
     */
    public function getStop()
    {
        return $this->container['stop'];
    }

    /**
     * Sets stop
     *
     * @param \JeedomOpenAI\Model\StopConfiguration|null $stop stop
     *
     * @return self
     */
    public function setStop($stop)
    {
        if (is_null($stop)) {
            array_push($this->openAPINullablesSetToNull, 'stop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stop'] = $stop;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return bool|null
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param bool|null $stream Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @return self
     */
    public function setStream($stream)
    {
        if (is_null($stream)) {
            array_push($this->openAPINullablesSetToNull, 'stream');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stream', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stream'] = $stream;

        return $this;
    }

    /**
     * Gets stream_options
     *
     * @return \JeedomOpenAI\Model\ChatCompletionStreamOptions|null
     */
    public function getStreamOptions()
    {
        return $this->container['stream_options'];
    }

    /**
     * Sets stream_options
     *
     * @param \JeedomOpenAI\Model\ChatCompletionStreamOptions|null $stream_options stream_options
     *
     * @return self
     */
    public function setStreamOptions($stream_options)
    {
        if (is_null($stream_options)) {
            array_push($this->openAPINullablesSetToNull, 'stream_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stream_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stream_options'] = $stream_options;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`.
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            array_push($this->openAPINullablesSetToNull, 'temperature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temperature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($temperature) && ($temperature > 2)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling CreateCompletionRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($temperature) && ($temperature < 0)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling CreateCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float|null $top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        if (is_null($top_p)) {
            array_push($this->openAPINullablesSetToNull, 'top_p');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_p', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($top_p) && ($top_p > 1)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling CreateCompletionRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($top_p) && ($top_p < 0)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling CreateCompletionRequest., must be bigger than or equal to 0.');
        }

        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


