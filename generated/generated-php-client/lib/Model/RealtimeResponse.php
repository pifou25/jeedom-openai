<?php
/**
 * RealtimeResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * RealtimeResponse Class Doc Comment
 *
 * @category Class
 * @description The response resource.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealtimeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealtimeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'status' => 'string',
        'status_details' => '\JeedomOpenAI\Model\RealtimeResponseStatusDetails',
        'output' => '\JeedomOpenAI\Model\RealtimeConversationItem[]',
        'metadata' => 'array<string,string>',
        'usage' => '\JeedomOpenAI\Model\RealtimeResponseUsage',
        'conversation_id' => 'string',
        'voice' => '\JeedomOpenAI\Model\VoiceIdsShared',
        'modalities' => 'string[]',
        'output_audio_format' => 'string',
        'temperature' => 'float',
        'max_output_tokens' => '\JeedomOpenAI\Model\RealtimeResponseMaxOutputTokens'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'status' => null,
        'status_details' => null,
        'output' => null,
        'metadata' => null,
        'usage' => null,
        'conversation_id' => null,
        'voice' => null,
        'modalities' => null,
        'output_audio_format' => null,
        'temperature' => null,
        'max_output_tokens' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'object' => false,
        'status' => false,
        'status_details' => false,
        'output' => false,
        'metadata' => true,
        'usage' => false,
        'conversation_id' => false,
        'voice' => false,
        'modalities' => false,
        'output_audio_format' => false,
        'temperature' => false,
        'max_output_tokens' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'status' => 'status',
        'status_details' => 'status_details',
        'output' => 'output',
        'metadata' => 'metadata',
        'usage' => 'usage',
        'conversation_id' => 'conversation_id',
        'voice' => 'voice',
        'modalities' => 'modalities',
        'output_audio_format' => 'output_audio_format',
        'temperature' => 'temperature',
        'max_output_tokens' => 'max_output_tokens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'status' => 'setStatus',
        'status_details' => 'setStatusDetails',
        'output' => 'setOutput',
        'metadata' => 'setMetadata',
        'usage' => 'setUsage',
        'conversation_id' => 'setConversationId',
        'voice' => 'setVoice',
        'modalities' => 'setModalities',
        'output_audio_format' => 'setOutputAudioFormat',
        'temperature' => 'setTemperature',
        'max_output_tokens' => 'setMaxOutputTokens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'status' => 'getStatus',
        'status_details' => 'getStatusDetails',
        'output' => 'getOutput',
        'metadata' => 'getMetadata',
        'usage' => 'getUsage',
        'conversation_id' => 'getConversationId',
        'voice' => 'getVoice',
        'modalities' => 'getModalities',
        'output_audio_format' => 'getOutputAudioFormat',
        'temperature' => 'getTemperature',
        'max_output_tokens' => 'getMaxOutputTokens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OBJECT_REALTIME_RESPONSE = 'realtime.response';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_CANCELLED = 'cancelled';
    public const STATUS_FAILED = 'failed';
    public const STATUS_INCOMPLETE = 'incomplete';
    public const MODALITIES_TEXT = 'text';
    public const MODALITIES_AUDIO = 'audio';
    public const OUTPUT_AUDIO_FORMAT_PCM16 = 'pcm16';
    public const OUTPUT_AUDIO_FORMAT_G711_ULAW = 'g711_ulaw';
    public const OUTPUT_AUDIO_FORMAT_G711_ALAW = 'g711_alaw';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_REALTIME_RESPONSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_INCOMPLETE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModalitiesAllowableValues()
    {
        return [
            self::MODALITIES_TEXT,
            self::MODALITIES_AUDIO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutputAudioFormatAllowableValues()
    {
        return [
            self::OUTPUT_AUDIO_FORMAT_PCM16,
            self::OUTPUT_AUDIO_FORMAT_G711_ULAW,
            self::OUTPUT_AUDIO_FORMAT_G711_ALAW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_details', $data ?? [], null);
        $this->setIfExists('output', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('conversation_id', $data ?? [], null);
        $this->setIfExists('voice', $data ?? [], null);
        $this->setIfExists('modalities', $data ?? [], null);
        $this->setIfExists('output_audio_format', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('max_output_tokens', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutputAudioFormatAllowableValues();
        if (!is_null($this->container['output_audio_format']) && !in_array($this->container['output_audio_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'output_audio_format', must be one of '%s'",
                $this->container['output_audio_format'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique ID of the response.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object The object type, must be `realtime.response`.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`).
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_details
     *
     * @return \JeedomOpenAI\Model\RealtimeResponseStatusDetails|null
     */
    public function getStatusDetails()
    {
        return $this->container['status_details'];
    }

    /**
     * Sets status_details
     *
     * @param \JeedomOpenAI\Model\RealtimeResponseStatusDetails|null $status_details status_details
     *
     * @return self
     */
    public function setStatusDetails($status_details)
    {
        if (is_null($status_details)) {
            throw new \InvalidArgumentException('non-nullable status_details cannot be null');
        }
        $this->container['status_details'] = $status_details;

        return $this;
    }

    /**
     * Gets output
     *
     * @return \JeedomOpenAI\Model\RealtimeConversationItem[]|null
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param \JeedomOpenAI\Model\RealtimeConversationItem[]|null $output The list of output items generated by the response.
     *
     * @return self
     */
    public function setOutput($output)
    {
        if (is_null($output)) {
            throw new \InvalidArgumentException('non-nullable output cannot be null');
        }
        $this->container['output'] = $output;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \JeedomOpenAI\Model\RealtimeResponseUsage|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \JeedomOpenAI\Model\RealtimeResponseUsage|null $usage usage
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            throw new \InvalidArgumentException('non-nullable usage cannot be null');
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets conversation_id
     *
     * @return string|null
     */
    public function getConversationId()
    {
        return $this->container['conversation_id'];
    }

    /**
     * Sets conversation_id
     *
     * @param string|null $conversation_id Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`.
     *
     * @return self
     */
    public function setConversationId($conversation_id)
    {
        if (is_null($conversation_id)) {
            throw new \InvalidArgumentException('non-nullable conversation_id cannot be null');
        }
        $this->container['conversation_id'] = $conversation_id;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return \JeedomOpenAI\Model\VoiceIdsShared|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param \JeedomOpenAI\Model\VoiceIdsShared|null $voice voice
     *
     * @return self
     */
    public function setVoice($voice)
    {
        if (is_null($voice)) {
            throw new \InvalidArgumentException('non-nullable voice cannot be null');
        }
        $this->container['voice'] = $voice;

        return $this;
    }

    /**
     * Gets modalities
     *
     * @return string[]|null
     */
    public function getModalities()
    {
        return $this->container['modalities'];
    }

    /**
     * Sets modalities
     *
     * @param string[]|null $modalities The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model could be responding in either text or audio.
     *
     * @return self
     */
    public function setModalities($modalities)
    {
        if (is_null($modalities)) {
            throw new \InvalidArgumentException('non-nullable modalities cannot be null');
        }
        $allowedValues = $this->getModalitiesAllowableValues();
        if (array_diff($modalities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'modalities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modalities'] = $modalities;

        return $this;
    }

    /**
     * Gets output_audio_format
     *
     * @return string|null
     */
    public function getOutputAudioFormat()
    {
        return $this->container['output_audio_format'];
    }

    /**
     * Sets output_audio_format
     *
     * @param string|null $output_audio_format The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
     *
     * @return self
     */
    public function setOutputAudioFormat($output_audio_format)
    {
        if (is_null($output_audio_format)) {
            throw new \InvalidArgumentException('non-nullable output_audio_format cannot be null');
        }
        $allowedValues = $this->getOutputAudioFormatAllowableValues();
        if (!in_array($output_audio_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'output_audio_format', must be one of '%s'",
                    $output_audio_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['output_audio_format'] = $output_audio_format;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets max_output_tokens
     *
     * @return \JeedomOpenAI\Model\RealtimeResponseMaxOutputTokens|null
     */
    public function getMaxOutputTokens()
    {
        return $this->container['max_output_tokens'];
    }

    /**
     * Sets max_output_tokens
     *
     * @param \JeedomOpenAI\Model\RealtimeResponseMaxOutputTokens|null $max_output_tokens max_output_tokens
     *
     * @return self
     */
    public function setMaxOutputTokens($max_output_tokens)
    {
        if (is_null($max_output_tokens)) {
            throw new \InvalidArgumentException('non-nullable max_output_tokens cannot be null');
        }
        $this->container['max_output_tokens'] = $max_output_tokens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


