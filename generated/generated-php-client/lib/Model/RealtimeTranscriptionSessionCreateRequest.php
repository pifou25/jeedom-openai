<?php
/**
 * RealtimeTranscriptionSessionCreateRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * RealtimeTranscriptionSessionCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Realtime transcription session object configuration.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealtimeTranscriptionSessionCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealtimeTranscriptionSessionCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'modalities' => 'string[]',
        'input_audio_format' => 'string',
        'input_audio_transcription' => '\JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequestInputAudioTranscription',
        'turn_detection' => '\JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequestTurnDetection',
        'input_audio_noise_reduction' => '\JeedomOpenAI\Model\RealtimeSessionInputAudioNoiseReduction',
        'include' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'modalities' => null,
        'input_audio_format' => null,
        'input_audio_transcription' => null,
        'turn_detection' => null,
        'input_audio_noise_reduction' => null,
        'include' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'modalities' => false,
        'input_audio_format' => false,
        'input_audio_transcription' => false,
        'turn_detection' => false,
        'input_audio_noise_reduction' => false,
        'include' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'modalities' => 'modalities',
        'input_audio_format' => 'input_audio_format',
        'input_audio_transcription' => 'input_audio_transcription',
        'turn_detection' => 'turn_detection',
        'input_audio_noise_reduction' => 'input_audio_noise_reduction',
        'include' => 'include'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'modalities' => 'setModalities',
        'input_audio_format' => 'setInputAudioFormat',
        'input_audio_transcription' => 'setInputAudioTranscription',
        'turn_detection' => 'setTurnDetection',
        'input_audio_noise_reduction' => 'setInputAudioNoiseReduction',
        'include' => 'setInclude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'modalities' => 'getModalities',
        'input_audio_format' => 'getInputAudioFormat',
        'input_audio_transcription' => 'getInputAudioTranscription',
        'turn_detection' => 'getTurnDetection',
        'input_audio_noise_reduction' => 'getInputAudioNoiseReduction',
        'include' => 'getInclude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODALITIES_TEXT = 'text';
    public const MODALITIES_AUDIO = 'audio';
    public const INPUT_AUDIO_FORMAT_PCM16 = 'pcm16';
    public const INPUT_AUDIO_FORMAT_G711_ULAW = 'g711_ulaw';
    public const INPUT_AUDIO_FORMAT_G711_ALAW = 'g711_alaw';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModalitiesAllowableValues()
    {
        return [
            self::MODALITIES_TEXT,
            self::MODALITIES_AUDIO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInputAudioFormatAllowableValues()
    {
        return [
            self::INPUT_AUDIO_FORMAT_PCM16,
            self::INPUT_AUDIO_FORMAT_G711_ULAW,
            self::INPUT_AUDIO_FORMAT_G711_ALAW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('modalities', $data ?? [], null);
        $this->setIfExists('input_audio_format', $data ?? [], 'pcm16');
        $this->setIfExists('input_audio_transcription', $data ?? [], null);
        $this->setIfExists('turn_detection', $data ?? [], null);
        $this->setIfExists('input_audio_noise_reduction', $data ?? [], null);
        $this->setIfExists('include', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInputAudioFormatAllowableValues();
        if (!is_null($this->container['input_audio_format']) && !in_array($this->container['input_audio_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'input_audio_format', must be one of '%s'",
                $this->container['input_audio_format'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets modalities
     *
     * @return string[]|null
     */
    public function getModalities()
    {
        return $this->container['modalities'];
    }

    /**
     * Sets modalities
     *
     * @param string[]|null $modalities The set of modalities the model can respond with. To disable audio, set this to [\"text\"].
     *
     * @return self
     */
    public function setModalities($modalities)
    {
        if (is_null($modalities)) {
            throw new \InvalidArgumentException('non-nullable modalities cannot be null');
        }
        $allowedValues = $this->getModalitiesAllowableValues();
        if (array_diff($modalities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'modalities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modalities'] = $modalities;

        return $this;
    }

    /**
     * Gets input_audio_format
     *
     * @return string|null
     */
    public function getInputAudioFormat()
    {
        return $this->container['input_audio_format'];
    }

    /**
     * Sets input_audio_format
     *
     * @param string|null $input_audio_format The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,  single channel (mono), and little-endian byte order.
     *
     * @return self
     */
    public function setInputAudioFormat($input_audio_format)
    {
        if (is_null($input_audio_format)) {
            throw new \InvalidArgumentException('non-nullable input_audio_format cannot be null');
        }
        $allowedValues = $this->getInputAudioFormatAllowableValues();
        if (!in_array($input_audio_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'input_audio_format', must be one of '%s'",
                    $input_audio_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['input_audio_format'] = $input_audio_format;

        return $this;
    }

    /**
     * Gets input_audio_transcription
     *
     * @return \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequestInputAudioTranscription|null
     */
    public function getInputAudioTranscription()
    {
        return $this->container['input_audio_transcription'];
    }

    /**
     * Sets input_audio_transcription
     *
     * @param \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequestInputAudioTranscription|null $input_audio_transcription input_audio_transcription
     *
     * @return self
     */
    public function setInputAudioTranscription($input_audio_transcription)
    {
        if (is_null($input_audio_transcription)) {
            throw new \InvalidArgumentException('non-nullable input_audio_transcription cannot be null');
        }
        $this->container['input_audio_transcription'] = $input_audio_transcription;

        return $this;
    }

    /**
     * Gets turn_detection
     *
     * @return \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequestTurnDetection|null
     */
    public function getTurnDetection()
    {
        return $this->container['turn_detection'];
    }

    /**
     * Sets turn_detection
     *
     * @param \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequestTurnDetection|null $turn_detection turn_detection
     *
     * @return self
     */
    public function setTurnDetection($turn_detection)
    {
        if (is_null($turn_detection)) {
            throw new \InvalidArgumentException('non-nullable turn_detection cannot be null');
        }
        $this->container['turn_detection'] = $turn_detection;

        return $this;
    }

    /**
     * Gets input_audio_noise_reduction
     *
     * @return \JeedomOpenAI\Model\RealtimeSessionInputAudioNoiseReduction|null
     */
    public function getInputAudioNoiseReduction()
    {
        return $this->container['input_audio_noise_reduction'];
    }

    /**
     * Sets input_audio_noise_reduction
     *
     * @param \JeedomOpenAI\Model\RealtimeSessionInputAudioNoiseReduction|null $input_audio_noise_reduction input_audio_noise_reduction
     *
     * @return self
     */
    public function setInputAudioNoiseReduction($input_audio_noise_reduction)
    {
        if (is_null($input_audio_noise_reduction)) {
            throw new \InvalidArgumentException('non-nullable input_audio_noise_reduction cannot be null');
        }
        $this->container['input_audio_noise_reduction'] = $input_audio_noise_reduction;

        return $this;
    }

    /**
     * Gets include
     *
     * @return string[]|null
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param string[]|null $include The set of items to include in the transcription. Current available items are: - `item.input_audio_transcription.logprobs`
     *
     * @return self
     */
    public function setInclude($include)
    {
        if (is_null($include)) {
            throw new \InvalidArgumentException('non-nullable include cannot be null');
        }
        $this->container['include'] = $include;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


