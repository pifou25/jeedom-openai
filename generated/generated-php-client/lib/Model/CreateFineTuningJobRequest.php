<?php
/**
 * CreateFineTuningJobRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * CreateFineTuningJobRequest Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateFineTuningJobRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateFineTuningJobRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'model' => '\JeedomOpenAI\Model\CreateFineTuningJobRequestModel',
        'training_file' => 'string',
        'hyperparameters' => '\JeedomOpenAI\Model\CreateFineTuningJobRequestHyperparameters',
        'suffix' => 'string',
        'validation_file' => 'string',
        'integrations' => '\JeedomOpenAI\Model\CreateFineTuningJobRequestIntegrationsInner[]',
        'seed' => 'int',
        'method' => '\JeedomOpenAI\Model\FineTuneMethod',
        'metadata' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'model' => null,
        'training_file' => null,
        'hyperparameters' => null,
        'suffix' => null,
        'validation_file' => null,
        'integrations' => null,
        'seed' => null,
        'method' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'model' => false,
        'training_file' => false,
        'hyperparameters' => false,
        'suffix' => true,
        'validation_file' => true,
        'integrations' => true,
        'seed' => true,
        'method' => false,
        'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model' => 'model',
        'training_file' => 'training_file',
        'hyperparameters' => 'hyperparameters',
        'suffix' => 'suffix',
        'validation_file' => 'validation_file',
        'integrations' => 'integrations',
        'seed' => 'seed',
        'method' => 'method',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model' => 'setModel',
        'training_file' => 'setTrainingFile',
        'hyperparameters' => 'setHyperparameters',
        'suffix' => 'setSuffix',
        'validation_file' => 'setValidationFile',
        'integrations' => 'setIntegrations',
        'seed' => 'setSeed',
        'method' => 'setMethod',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model' => 'getModel',
        'training_file' => 'getTrainingFile',
        'hyperparameters' => 'getHyperparameters',
        'suffix' => 'getSuffix',
        'validation_file' => 'getValidationFile',
        'integrations' => 'getIntegrations',
        'seed' => 'getSeed',
        'method' => 'getMethod',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('training_file', $data ?? [], null);
        $this->setIfExists('hyperparameters', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('validation_file', $data ?? [], null);
        $this->setIfExists('integrations', $data ?? [], null);
        $this->setIfExists('seed', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['training_file'] === null) {
            $invalidProperties[] = "'training_file' can't be null";
        }
        if (!is_null($this->container['suffix']) && (mb_strlen($this->container['suffix']) > 64)) {
            $invalidProperties[] = "invalid value for 'suffix', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['suffix']) && (mb_strlen($this->container['suffix']) < 1)) {
            $invalidProperties[] = "invalid value for 'suffix', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['seed']) && ($this->container['seed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'seed', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['seed']) && ($this->container['seed'] < 0)) {
            $invalidProperties[] = "invalid value for 'seed', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model
     *
     * @return \JeedomOpenAI\Model\CreateFineTuningJobRequestModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \JeedomOpenAI\Model\CreateFineTuningJobRequestModel $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets training_file
     *
     * @return string
     */
    public function getTrainingFile()
    {
        return $this->container['training_file'];
    }

    /**
     * Sets training_file
     *
     * @param string $training_file The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
     *
     * @return self
     */
    public function setTrainingFile($training_file)
    {
        if (is_null($training_file)) {
            throw new \InvalidArgumentException('non-nullable training_file cannot be null');
        }
        $this->container['training_file'] = $training_file;

        return $this;
    }

    /**
     * Gets hyperparameters
     *
     * @return \JeedomOpenAI\Model\CreateFineTuningJobRequestHyperparameters|null
     * @deprecated
     */
    public function getHyperparameters()
    {
        return $this->container['hyperparameters'];
    }

    /**
     * Sets hyperparameters
     *
     * @param \JeedomOpenAI\Model\CreateFineTuningJobRequestHyperparameters|null $hyperparameters hyperparameters
     *
     * @return self
     * @deprecated
     */
    public function setHyperparameters($hyperparameters)
    {
        if (is_null($hyperparameters)) {
            throw new \InvalidArgumentException('non-nullable hyperparameters cannot be null');
        }
        $this->container['hyperparameters'] = $hyperparameters;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix A string of up to 64 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($suffix) && (mb_strlen($suffix) > 64)) {
            throw new \InvalidArgumentException('invalid length for $suffix when calling CreateFineTuningJobRequest., must be smaller than or equal to 64.');
        }
        if (!is_null($suffix) && (mb_strlen($suffix) < 1)) {
            throw new \InvalidArgumentException('invalid length for $suffix when calling CreateFineTuningJobRequest., must be bigger than or equal to 1.');
        }

        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets validation_file
     *
     * @return string|null
     */
    public function getValidationFile()
    {
        return $this->container['validation_file'];
    }

    /**
     * Sets validation_file
     *
     * @param string|null $validation_file The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
     *
     * @return self
     */
    public function setValidationFile($validation_file)
    {
        if (is_null($validation_file)) {
            array_push($this->openAPINullablesSetToNull, 'validation_file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validation_file', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validation_file'] = $validation_file;

        return $this;
    }

    /**
     * Gets integrations
     *
     * @return \JeedomOpenAI\Model\CreateFineTuningJobRequestIntegrationsInner[]|null
     */
    public function getIntegrations()
    {
        return $this->container['integrations'];
    }

    /**
     * Sets integrations
     *
     * @param \JeedomOpenAI\Model\CreateFineTuningJobRequestIntegrationsInner[]|null $integrations A list of integrations to enable for your fine-tuning job.
     *
     * @return self
     */
    public function setIntegrations($integrations)
    {
        if (is_null($integrations)) {
            array_push($this->openAPINullablesSetToNull, 'integrations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('integrations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['integrations'] = $integrations;

        return $this;
    }

    /**
     * Gets seed
     *
     * @return int|null
     */
    public function getSeed()
    {
        return $this->container['seed'];
    }

    /**
     * Sets seed
     *
     * @param int|null $seed The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you.
     *
     * @return self
     */
    public function setSeed($seed)
    {
        if (is_null($seed)) {
            array_push($this->openAPINullablesSetToNull, 'seed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($seed) && ($seed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $seed when calling CreateFineTuningJobRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($seed) && ($seed < 0)) {
            throw new \InvalidArgumentException('invalid value for $seed when calling CreateFineTuningJobRequest., must be bigger than or equal to 0.');
        }

        $this->container['seed'] = $seed;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \JeedomOpenAI\Model\FineTuneMethod|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \JeedomOpenAI\Model\FineTuneMethod|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


