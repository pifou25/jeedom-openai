<?php
/**
 * RealtimeClientEvent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * RealtimeClientEvent Class Doc Comment
 *
 * @category Class
 * @description A realtime client event.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealtimeClientEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealtimeClientEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_id' => 'string',
        'type' => 'string',
        'previous_item_id' => 'string',
        'item' => '\JeedomOpenAI\Model\RealtimeConversationItem',
        'item_id' => 'string',
        'content_index' => 'int',
        'audio_end_ms' => 'int',
        'audio' => 'string',
        'response_id' => 'string',
        'response' => '\JeedomOpenAI\Model\RealtimeResponseCreateParams',
        'session' => '\JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event_id' => null,
        'type' => null,
        'previous_item_id' => null,
        'item' => null,
        'item_id' => null,
        'content_index' => null,
        'audio_end_ms' => null,
        'audio' => null,
        'response_id' => null,
        'response' => null,
        'session' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'event_id' => false,
        'type' => false,
        'previous_item_id' => false,
        'item' => false,
        'item_id' => false,
        'content_index' => false,
        'audio_end_ms' => false,
        'audio' => false,
        'response_id' => false,
        'response' => false,
        'session' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'event_id',
        'type' => 'type',
        'previous_item_id' => 'previous_item_id',
        'item' => 'item',
        'item_id' => 'item_id',
        'content_index' => 'content_index',
        'audio_end_ms' => 'audio_end_ms',
        'audio' => 'audio',
        'response_id' => 'response_id',
        'response' => 'response',
        'session' => 'session'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'type' => 'setType',
        'previous_item_id' => 'setPreviousItemId',
        'item' => 'setItem',
        'item_id' => 'setItemId',
        'content_index' => 'setContentIndex',
        'audio_end_ms' => 'setAudioEndMs',
        'audio' => 'setAudio',
        'response_id' => 'setResponseId',
        'response' => 'setResponse',
        'session' => 'setSession'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'type' => 'getType',
        'previous_item_id' => 'getPreviousItemId',
        'item' => 'getItem',
        'item_id' => 'getItemId',
        'content_index' => 'getContentIndex',
        'audio_end_ms' => 'getAudioEndMs',
        'audio' => 'getAudio',
        'response_id' => 'getResponseId',
        'response' => 'getResponse',
        'session' => 'getSession'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CONVERSATION_ITEM_CREATE = 'conversation.item.create';
    public const TYPE_CONVERSATION_ITEM_DELETE = 'conversation.item.delete';
    public const TYPE_CONVERSATION_ITEM_RETRIEVE = 'conversation.item.retrieve';
    public const TYPE_CONVERSATION_ITEM_TRUNCATE = 'conversation.item.truncate';
    public const TYPE_INPUT_AUDIO_BUFFER_APPEND = 'input_audio_buffer.append';
    public const TYPE_INPUT_AUDIO_BUFFER_CLEAR = 'input_audio_buffer.clear';
    public const TYPE_INPUT_AUDIO_BUFFER_COMMIT = 'input_audio_buffer.commit';
    public const TYPE_RESPONSE_CANCEL = 'response.cancel';
    public const TYPE_RESPONSE_CREATE = 'response.create';
    public const TYPE_SESSION_UPDATE = 'session.update';
    public const TYPE_TRANSCRIPTION_SESSION_UPDATE = 'transcription_session.update';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CONVERSATION_ITEM_CREATE,
            self::TYPE_CONVERSATION_ITEM_DELETE,
            self::TYPE_CONVERSATION_ITEM_RETRIEVE,
            self::TYPE_CONVERSATION_ITEM_TRUNCATE,
            self::TYPE_INPUT_AUDIO_BUFFER_APPEND,
            self::TYPE_INPUT_AUDIO_BUFFER_CLEAR,
            self::TYPE_INPUT_AUDIO_BUFFER_COMMIT,
            self::TYPE_RESPONSE_CANCEL,
            self::TYPE_RESPONSE_CREATE,
            self::TYPE_SESSION_UPDATE,
            self::TYPE_TRANSCRIPTION_SESSION_UPDATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('previous_item_id', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('content_index', $data ?? [], null);
        $this->setIfExists('audio_end_ms', $data ?? [], null);
        $this->setIfExists('audio', $data ?? [], null);
        $this->setIfExists('response_id', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('session', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['content_index'] === null) {
            $invalidProperties[] = "'content_index' can't be null";
        }
        if ($this->container['audio_end_ms'] === null) {
            $invalidProperties[] = "'audio_end_ms' can't be null";
        }
        if ($this->container['audio'] === null) {
            $invalidProperties[] = "'audio' can't be null";
        }
        if ($this->container['session'] === null) {
            $invalidProperties[] = "'session' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string|null
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string|null $event_id Optional client-generated ID used to identify this event.
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        if (is_null($event_id)) {
            throw new \InvalidArgumentException('non-nullable event_id cannot be null');
        }
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The event type, must be `conversation.item.create`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets previous_item_id
     *
     * @return string|null
     */
    public function getPreviousItemId()
    {
        return $this->container['previous_item_id'];
    }

    /**
     * Sets previous_item_id
     *
     * @param string|null $previous_item_id The ID of the preceding item after which the new item will be inserted.  If not set, the new item will be appended to the end of the conversation. If set to `root`, the new item will be added to the beginning of the conversation. If set to an existing ID, it allows an item to be inserted mid-conversation. If the ID cannot be found, an error will be returned and the item will not be added.
     *
     * @return self
     */
    public function setPreviousItemId($previous_item_id)
    {
        if (is_null($previous_item_id)) {
            throw new \InvalidArgumentException('non-nullable previous_item_id cannot be null');
        }
        $this->container['previous_item_id'] = $previous_item_id;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \JeedomOpenAI\Model\RealtimeConversationItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \JeedomOpenAI\Model\RealtimeConversationItem $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The ID of the assistant message item to truncate. Only assistant message  items can be truncated.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets content_index
     *
     * @return int
     */
    public function getContentIndex()
    {
        return $this->container['content_index'];
    }

    /**
     * Sets content_index
     *
     * @param int $content_index The index of the content part to truncate. Set this to 0.
     *
     * @return self
     */
    public function setContentIndex($content_index)
    {
        if (is_null($content_index)) {
            throw new \InvalidArgumentException('non-nullable content_index cannot be null');
        }
        $this->container['content_index'] = $content_index;

        return $this;
    }

    /**
     * Gets audio_end_ms
     *
     * @return int
     */
    public function getAudioEndMs()
    {
        return $this->container['audio_end_ms'];
    }

    /**
     * Sets audio_end_ms
     *
     * @param int $audio_end_ms Inclusive duration up to which audio is truncated, in milliseconds. If  the audio_end_ms is greater than the actual audio duration, the server  will respond with an error.
     *
     * @return self
     */
    public function setAudioEndMs($audio_end_ms)
    {
        if (is_null($audio_end_ms)) {
            throw new \InvalidArgumentException('non-nullable audio_end_ms cannot be null');
        }
        $this->container['audio_end_ms'] = $audio_end_ms;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return string
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param string $audio Base64-encoded audio bytes. This must be in the format specified by the  `input_audio_format` field in the session configuration.
     *
     * @return self
     */
    public function setAudio($audio)
    {
        if (is_null($audio)) {
            throw new \InvalidArgumentException('non-nullable audio cannot be null');
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets response_id
     *
     * @return string|null
     */
    public function getResponseId()
    {
        return $this->container['response_id'];
    }

    /**
     * Sets response_id
     *
     * @param string|null $response_id A specific response ID to cancel - if not provided, will cancel an  in-progress response in the default conversation.
     *
     * @return self
     */
    public function setResponseId($response_id)
    {
        if (is_null($response_id)) {
            throw new \InvalidArgumentException('non-nullable response_id cannot be null');
        }
        $this->container['response_id'] = $response_id;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \JeedomOpenAI\Model\RealtimeResponseCreateParams|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \JeedomOpenAI\Model\RealtimeResponseCreateParams|null $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            throw new \InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequest
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \JeedomOpenAI\Model\RealtimeTranscriptionSessionCreateRequest $session session
     *
     * @return self
     */
    public function setSession($session)
    {
        if (is_null($session)) {
            throw new \InvalidArgumentException('non-nullable session cannot be null');
        }
        $this->container['session'] = $session;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


