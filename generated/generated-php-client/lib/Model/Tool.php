<?php
/**
 * Tool
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * Tool Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tool implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'vector_store_ids' => 'string[]',
        'max_num_results' => 'int',
        'filters' => '\JeedomOpenAI\Model\FileSearchToolFilters',
        'ranking_options' => '\JeedomOpenAI\Model\FileSearchToolRankingOptions',
        'name' => 'string',
        'description' => 'string',
        'parameters' => 'array<string,mixed>',
        'strict' => 'bool',
        'display_width' => 'float',
        'display_height' => 'float',
        'environment' => 'string',
        'user_location' => '\JeedomOpenAI\Model\WebSearchToolUserLocation',
        'search_context_size' => '\JeedomOpenAI\Model\WebSearchContextSize'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'vector_store_ids' => null,
        'max_num_results' => null,
        'filters' => null,
        'ranking_options' => null,
        'name' => null,
        'description' => null,
        'parameters' => null,
        'strict' => null,
        'display_width' => null,
        'display_height' => null,
        'environment' => null,
        'user_location' => null,
        'search_context_size' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'vector_store_ids' => false,
        'max_num_results' => false,
        'filters' => false,
        'ranking_options' => false,
        'name' => false,
        'description' => true,
        'parameters' => false,
        'strict' => false,
        'display_width' => false,
        'display_height' => false,
        'environment' => false,
        'user_location' => true,
        'search_context_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'vector_store_ids' => 'vector_store_ids',
        'max_num_results' => 'max_num_results',
        'filters' => 'filters',
        'ranking_options' => 'ranking_options',
        'name' => 'name',
        'description' => 'description',
        'parameters' => 'parameters',
        'strict' => 'strict',
        'display_width' => 'display_width',
        'display_height' => 'display_height',
        'environment' => 'environment',
        'user_location' => 'user_location',
        'search_context_size' => 'search_context_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'vector_store_ids' => 'setVectorStoreIds',
        'max_num_results' => 'setMaxNumResults',
        'filters' => 'setFilters',
        'ranking_options' => 'setRankingOptions',
        'name' => 'setName',
        'description' => 'setDescription',
        'parameters' => 'setParameters',
        'strict' => 'setStrict',
        'display_width' => 'setDisplayWidth',
        'display_height' => 'setDisplayHeight',
        'environment' => 'setEnvironment',
        'user_location' => 'setUserLocation',
        'search_context_size' => 'setSearchContextSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'vector_store_ids' => 'getVectorStoreIds',
        'max_num_results' => 'getMaxNumResults',
        'filters' => 'getFilters',
        'ranking_options' => 'getRankingOptions',
        'name' => 'getName',
        'description' => 'getDescription',
        'parameters' => 'getParameters',
        'strict' => 'getStrict',
        'display_width' => 'getDisplayWidth',
        'display_height' => 'getDisplayHeight',
        'environment' => 'getEnvironment',
        'user_location' => 'getUserLocation',
        'search_context_size' => 'getSearchContextSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_FILE_SEARCH = 'file_search';
    public const TYPE__FUNCTION = 'function';
    public const TYPE_COMPUTER_USE_PREVIEW = 'computer_use_preview';
    public const TYPE_WEB_SEARCH_PREVIEW = 'web_search_preview';
    public const TYPE_WEB_SEARCH_PREVIEW_2025_03_11 = 'web_search_preview_2025_03_11';
    public const ENVIRONMENT_MAC = 'mac';
    public const ENVIRONMENT_WINDOWS = 'windows';
    public const ENVIRONMENT_UBUNTU = 'ubuntu';
    public const ENVIRONMENT_BROWSER = 'browser';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FILE_SEARCH,
            self::TYPE__FUNCTION,
            self::TYPE_COMPUTER_USE_PREVIEW,
            self::TYPE_WEB_SEARCH_PREVIEW,
            self::TYPE_WEB_SEARCH_PREVIEW_2025_03_11,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentAllowableValues()
    {
        return [
            self::ENVIRONMENT_MAC,
            self::ENVIRONMENT_WINDOWS,
            self::ENVIRONMENT_UBUNTU,
            self::ENVIRONMENT_BROWSER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('vector_store_ids', $data ?? [], null);
        $this->setIfExists('max_num_results', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('ranking_options', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('parameters', $data ?? [], null);
        $this->setIfExists('strict', $data ?? [], null);
        $this->setIfExists('display_width', $data ?? [], null);
        $this->setIfExists('display_height', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], null);
        $this->setIfExists('user_location', $data ?? [], null);
        $this->setIfExists('search_context_size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vector_store_ids'] === null) {
            $invalidProperties[] = "'vector_store_ids' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['parameters'] === null) {
            $invalidProperties[] = "'parameters' can't be null";
        }
        if ($this->container['strict'] === null) {
            $invalidProperties[] = "'strict' can't be null";
        }
        if ($this->container['display_width'] === null) {
            $invalidProperties[] = "'display_width' can't be null";
        }
        if ($this->container['display_height'] === null) {
            $invalidProperties[] = "'display_height' can't be null";
        }
        if ($this->container['environment'] === null) {
            $invalidProperties[] = "'environment' can't be null";
        }
        $allowedValues = $this->getEnvironmentAllowableValues();
        if (!is_null($this->container['environment']) && !in_array($this->container['environment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'environment', must be one of '%s'",
                $this->container['environment'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the file search tool. Always `file_search`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vector_store_ids
     *
     * @return string[]
     */
    public function getVectorStoreIds()
    {
        return $this->container['vector_store_ids'];
    }

    /**
     * Sets vector_store_ids
     *
     * @param string[] $vector_store_ids The IDs of the vector stores to search.
     *
     * @return self
     */
    public function setVectorStoreIds($vector_store_ids)
    {
        if (is_null($vector_store_ids)) {
            throw new \InvalidArgumentException('non-nullable vector_store_ids cannot be null');
        }
        $this->container['vector_store_ids'] = $vector_store_ids;

        return $this;
    }

    /**
     * Gets max_num_results
     *
     * @return int|null
     */
    public function getMaxNumResults()
    {
        return $this->container['max_num_results'];
    }

    /**
     * Sets max_num_results
     *
     * @param int|null $max_num_results The maximum number of results to return. This number should be between 1  and 50 inclusive.
     *
     * @return self
     */
    public function setMaxNumResults($max_num_results)
    {
        if (is_null($max_num_results)) {
            throw new \InvalidArgumentException('non-nullable max_num_results cannot be null');
        }
        $this->container['max_num_results'] = $max_num_results;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \JeedomOpenAI\Model\FileSearchToolFilters|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \JeedomOpenAI\Model\FileSearchToolFilters|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets ranking_options
     *
     * @return \JeedomOpenAI\Model\FileSearchToolRankingOptions|null
     */
    public function getRankingOptions()
    {
        return $this->container['ranking_options'];
    }

    /**
     * Sets ranking_options
     *
     * @param \JeedomOpenAI\Model\FileSearchToolRankingOptions|null $ranking_options ranking_options
     *
     * @return self
     */
    public function setRankingOptions($ranking_options)
    {
        if (is_null($ranking_options)) {
            throw new \InvalidArgumentException('non-nullable ranking_options cannot be null');
        }
        $this->container['ranking_options'] = $ranking_options;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the function to call.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the function. Used by the model to determine whether or not to call the function.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return array<string,mixed>
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param array<string,mixed> $parameters A JSON schema object describing the parameters of the function.
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        if (is_null($parameters)) {
            throw new \InvalidArgumentException('non-nullable parameters cannot be null');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets strict
     *
     * @return bool
     */
    public function getStrict()
    {
        return $this->container['strict'];
    }

    /**
     * Sets strict
     *
     * @param bool $strict Whether to enforce strict parameter validation. Default `true`.
     *
     * @return self
     */
    public function setStrict($strict)
    {
        if (is_null($strict)) {
            throw new \InvalidArgumentException('non-nullable strict cannot be null');
        }
        $this->container['strict'] = $strict;

        return $this;
    }

    /**
     * Gets display_width
     *
     * @return float
     */
    public function getDisplayWidth()
    {
        return $this->container['display_width'];
    }

    /**
     * Sets display_width
     *
     * @param float $display_width The width of the computer display.
     *
     * @return self
     */
    public function setDisplayWidth($display_width)
    {
        if (is_null($display_width)) {
            throw new \InvalidArgumentException('non-nullable display_width cannot be null');
        }
        $this->container['display_width'] = $display_width;

        return $this;
    }

    /**
     * Gets display_height
     *
     * @return float
     */
    public function getDisplayHeight()
    {
        return $this->container['display_height'];
    }

    /**
     * Sets display_height
     *
     * @param float $display_height The height of the computer display.
     *
     * @return self
     */
    public function setDisplayHeight($display_height)
    {
        if (is_null($display_height)) {
            throw new \InvalidArgumentException('non-nullable display_height cannot be null');
        }
        $this->container['display_height'] = $display_height;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string $environment The type of computer environment to control.
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            throw new \InvalidArgumentException('non-nullable environment cannot be null');
        }
        $allowedValues = $this->getEnvironmentAllowableValues();
        if (!in_array($environment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'environment', must be one of '%s'",
                    $environment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets user_location
     *
     * @return \JeedomOpenAI\Model\WebSearchToolUserLocation|null
     */
    public function getUserLocation()
    {
        return $this->container['user_location'];
    }

    /**
     * Sets user_location
     *
     * @param \JeedomOpenAI\Model\WebSearchToolUserLocation|null $user_location user_location
     *
     * @return self
     */
    public function setUserLocation($user_location)
    {
        if (is_null($user_location)) {
            array_push($this->openAPINullablesSetToNull, 'user_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_location'] = $user_location;

        return $this;
    }

    /**
     * Gets search_context_size
     *
     * @return \JeedomOpenAI\Model\WebSearchContextSize|null
     */
    public function getSearchContextSize()
    {
        return $this->container['search_context_size'];
    }

    /**
     * Sets search_context_size
     *
     * @param \JeedomOpenAI\Model\WebSearchContextSize|null $search_context_size search_context_size
     *
     * @return self
     */
    public function setSearchContextSize($search_context_size)
    {
        if (is_null($search_context_size)) {
            throw new \InvalidArgumentException('non-nullable search_context_size cannot be null');
        }
        $this->container['search_context_size'] = $search_context_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


