<?php
/**
 * ResponseErrorCode
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;
use \JeedomOpenAI\ObjectSerializer;

/**
 * ResponseErrorCode Class Doc Comment
 *
 * @category Class
 * @description The error code for the response.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResponseErrorCode
{
    /**
     * Possible values of this enum
     */
    public const SERVER_ERROR = 'server_error';

    public const RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded';

    public const INVALID_PROMPT = 'invalid_prompt';

    public const VECTOR_STORE_TIMEOUT = 'vector_store_timeout';

    public const INVALID_IMAGE = 'invalid_image';

    public const INVALID_IMAGE_FORMAT = 'invalid_image_format';

    public const INVALID_BASE64_IMAGE = 'invalid_base64_image';

    public const INVALID_IMAGE_URL = 'invalid_image_url';

    public const IMAGE_TOO_LARGE = 'image_too_large';

    public const IMAGE_TOO_SMALL = 'image_too_small';

    public const IMAGE_PARSE_ERROR = 'image_parse_error';

    public const IMAGE_CONTENT_POLICY_VIOLATION = 'image_content_policy_violation';

    public const INVALID_IMAGE_MODE = 'invalid_image_mode';

    public const IMAGE_FILE_TOO_LARGE = 'image_file_too_large';

    public const UNSUPPORTED_IMAGE_MEDIA_TYPE = 'unsupported_image_media_type';

    public const EMPTY_IMAGE_FILE = 'empty_image_file';

    public const FAILED_TO_DOWNLOAD_IMAGE = 'failed_to_download_image';

    public const IMAGE_FILE_NOT_FOUND = 'image_file_not_found';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::SERVER_ERROR,
            self::RATE_LIMIT_EXCEEDED,
            self::INVALID_PROMPT,
            self::VECTOR_STORE_TIMEOUT,
            self::INVALID_IMAGE,
            self::INVALID_IMAGE_FORMAT,
            self::INVALID_BASE64_IMAGE,
            self::INVALID_IMAGE_URL,
            self::IMAGE_TOO_LARGE,
            self::IMAGE_TOO_SMALL,
            self::IMAGE_PARSE_ERROR,
            self::IMAGE_CONTENT_POLICY_VIOLATION,
            self::INVALID_IMAGE_MODE,
            self::IMAGE_FILE_TOO_LARGE,
            self::UNSUPPORTED_IMAGE_MEDIA_TYPE,
            self::EMPTY_IMAGE_FILE,
            self::FAILED_TO_DOWNLOAD_IMAGE,
            self::IMAGE_FILE_NOT_FOUND
        ];
    }
}


