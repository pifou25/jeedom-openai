<?php
/**
 * AuditLog
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * AuditLog Class Doc Comment
 *
 * @category Class
 * @description A log of a user action or configuration change within this organization.
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuditLog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuditLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => '\JeedomOpenAI\Model\AuditLogEventType',
        'effective_at' => 'int',
        'project' => '\JeedomOpenAI\Model\AuditLogProject',
        'actor' => '\JeedomOpenAI\Model\AuditLogActor',
        'api_key_created' => '\JeedomOpenAI\Model\AuditLogApiKeyCreated',
        'api_key_updated' => '\JeedomOpenAI\Model\AuditLogApiKeyUpdated',
        'api_key_deleted' => '\JeedomOpenAI\Model\AuditLogApiKeyDeleted',
        'invite_sent' => '\JeedomOpenAI\Model\AuditLogInviteSent',
        'invite_accepted' => '\JeedomOpenAI\Model\AuditLogInviteAccepted',
        'invite_deleted' => '\JeedomOpenAI\Model\AuditLogInviteAccepted',
        'login_failed' => '\JeedomOpenAI\Model\AuditLogLoginFailed',
        'logout_failed' => '\JeedomOpenAI\Model\AuditLogLoginFailed',
        'organization_updated' => '\JeedomOpenAI\Model\AuditLogOrganizationUpdated',
        'project_created' => '\JeedomOpenAI\Model\AuditLogProjectCreated',
        'project_updated' => '\JeedomOpenAI\Model\AuditLogProjectUpdated',
        'project_archived' => '\JeedomOpenAI\Model\AuditLogProjectArchived',
        'rate_limit_updated' => '\JeedomOpenAI\Model\AuditLogRateLimitUpdated',
        'rate_limit_deleted' => '\JeedomOpenAI\Model\AuditLogRateLimitDeleted',
        'service_account_created' => '\JeedomOpenAI\Model\AuditLogServiceAccountCreated',
        'service_account_updated' => '\JeedomOpenAI\Model\AuditLogServiceAccountUpdated',
        'service_account_deleted' => '\JeedomOpenAI\Model\AuditLogServiceAccountDeleted',
        'user_added' => '\JeedomOpenAI\Model\AuditLogUserAdded',
        'user_updated' => '\JeedomOpenAI\Model\AuditLogUserUpdated',
        'user_deleted' => '\JeedomOpenAI\Model\AuditLogUserDeleted'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'effective_at' => null,
        'project' => null,
        'actor' => null,
        'api_key_created' => null,
        'api_key_updated' => null,
        'api_key_deleted' => null,
        'invite_sent' => null,
        'invite_accepted' => null,
        'invite_deleted' => null,
        'login_failed' => null,
        'logout_failed' => null,
        'organization_updated' => null,
        'project_created' => null,
        'project_updated' => null,
        'project_archived' => null,
        'rate_limit_updated' => null,
        'rate_limit_deleted' => null,
        'service_account_created' => null,
        'service_account_updated' => null,
        'service_account_deleted' => null,
        'user_added' => null,
        'user_updated' => null,
        'user_deleted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'effective_at' => false,
        'project' => false,
        'actor' => false,
        'api_key_created' => false,
        'api_key_updated' => false,
        'api_key_deleted' => false,
        'invite_sent' => false,
        'invite_accepted' => false,
        'invite_deleted' => false,
        'login_failed' => false,
        'logout_failed' => false,
        'organization_updated' => false,
        'project_created' => false,
        'project_updated' => false,
        'project_archived' => false,
        'rate_limit_updated' => false,
        'rate_limit_deleted' => false,
        'service_account_created' => false,
        'service_account_updated' => false,
        'service_account_deleted' => false,
        'user_added' => false,
        'user_updated' => false,
        'user_deleted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'effective_at' => 'effective_at',
        'project' => 'project',
        'actor' => 'actor',
        'api_key_created' => 'api_key.created',
        'api_key_updated' => 'api_key.updated',
        'api_key_deleted' => 'api_key.deleted',
        'invite_sent' => 'invite.sent',
        'invite_accepted' => 'invite.accepted',
        'invite_deleted' => 'invite.deleted',
        'login_failed' => 'login.failed',
        'logout_failed' => 'logout.failed',
        'organization_updated' => 'organization.updated',
        'project_created' => 'project.created',
        'project_updated' => 'project.updated',
        'project_archived' => 'project.archived',
        'rate_limit_updated' => 'rate_limit.updated',
        'rate_limit_deleted' => 'rate_limit.deleted',
        'service_account_created' => 'service_account.created',
        'service_account_updated' => 'service_account.updated',
        'service_account_deleted' => 'service_account.deleted',
        'user_added' => 'user.added',
        'user_updated' => 'user.updated',
        'user_deleted' => 'user.deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'effective_at' => 'setEffectiveAt',
        'project' => 'setProject',
        'actor' => 'setActor',
        'api_key_created' => 'setApiKeyCreated',
        'api_key_updated' => 'setApiKeyUpdated',
        'api_key_deleted' => 'setApiKeyDeleted',
        'invite_sent' => 'setInviteSent',
        'invite_accepted' => 'setInviteAccepted',
        'invite_deleted' => 'setInviteDeleted',
        'login_failed' => 'setLoginFailed',
        'logout_failed' => 'setLogoutFailed',
        'organization_updated' => 'setOrganizationUpdated',
        'project_created' => 'setProjectCreated',
        'project_updated' => 'setProjectUpdated',
        'project_archived' => 'setProjectArchived',
        'rate_limit_updated' => 'setRateLimitUpdated',
        'rate_limit_deleted' => 'setRateLimitDeleted',
        'service_account_created' => 'setServiceAccountCreated',
        'service_account_updated' => 'setServiceAccountUpdated',
        'service_account_deleted' => 'setServiceAccountDeleted',
        'user_added' => 'setUserAdded',
        'user_updated' => 'setUserUpdated',
        'user_deleted' => 'setUserDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'effective_at' => 'getEffectiveAt',
        'project' => 'getProject',
        'actor' => 'getActor',
        'api_key_created' => 'getApiKeyCreated',
        'api_key_updated' => 'getApiKeyUpdated',
        'api_key_deleted' => 'getApiKeyDeleted',
        'invite_sent' => 'getInviteSent',
        'invite_accepted' => 'getInviteAccepted',
        'invite_deleted' => 'getInviteDeleted',
        'login_failed' => 'getLoginFailed',
        'logout_failed' => 'getLogoutFailed',
        'organization_updated' => 'getOrganizationUpdated',
        'project_created' => 'getProjectCreated',
        'project_updated' => 'getProjectUpdated',
        'project_archived' => 'getProjectArchived',
        'rate_limit_updated' => 'getRateLimitUpdated',
        'rate_limit_deleted' => 'getRateLimitDeleted',
        'service_account_created' => 'getServiceAccountCreated',
        'service_account_updated' => 'getServiceAccountUpdated',
        'service_account_deleted' => 'getServiceAccountDeleted',
        'user_added' => 'getUserAdded',
        'user_updated' => 'getUserUpdated',
        'user_deleted' => 'getUserDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('effective_at', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('actor', $data ?? [], null);
        $this->setIfExists('api_key_created', $data ?? [], null);
        $this->setIfExists('api_key_updated', $data ?? [], null);
        $this->setIfExists('api_key_deleted', $data ?? [], null);
        $this->setIfExists('invite_sent', $data ?? [], null);
        $this->setIfExists('invite_accepted', $data ?? [], null);
        $this->setIfExists('invite_deleted', $data ?? [], null);
        $this->setIfExists('login_failed', $data ?? [], null);
        $this->setIfExists('logout_failed', $data ?? [], null);
        $this->setIfExists('organization_updated', $data ?? [], null);
        $this->setIfExists('project_created', $data ?? [], null);
        $this->setIfExists('project_updated', $data ?? [], null);
        $this->setIfExists('project_archived', $data ?? [], null);
        $this->setIfExists('rate_limit_updated', $data ?? [], null);
        $this->setIfExists('rate_limit_deleted', $data ?? [], null);
        $this->setIfExists('service_account_created', $data ?? [], null);
        $this->setIfExists('service_account_updated', $data ?? [], null);
        $this->setIfExists('service_account_deleted', $data ?? [], null);
        $this->setIfExists('user_added', $data ?? [], null);
        $this->setIfExists('user_updated', $data ?? [], null);
        $this->setIfExists('user_deleted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['effective_at'] === null) {
            $invalidProperties[] = "'effective_at' can't be null";
        }
        if ($this->container['actor'] === null) {
            $invalidProperties[] = "'actor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of this log.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \JeedomOpenAI\Model\AuditLogEventType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \JeedomOpenAI\Model\AuditLogEventType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets effective_at
     *
     * @return int
     */
    public function getEffectiveAt()
    {
        return $this->container['effective_at'];
    }

    /**
     * Sets effective_at
     *
     * @param int $effective_at The Unix timestamp (in seconds) of the event.
     *
     * @return self
     */
    public function setEffectiveAt($effective_at)
    {
        if (is_null($effective_at)) {
            throw new \InvalidArgumentException('non-nullable effective_at cannot be null');
        }
        $this->container['effective_at'] = $effective_at;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \JeedomOpenAI\Model\AuditLogProject|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \JeedomOpenAI\Model\AuditLogProject|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return \JeedomOpenAI\Model\AuditLogActor
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param \JeedomOpenAI\Model\AuditLogActor $actor actor
     *
     * @return self
     */
    public function setActor($actor)
    {
        if (is_null($actor)) {
            throw new \InvalidArgumentException('non-nullable actor cannot be null');
        }
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets api_key_created
     *
     * @return \JeedomOpenAI\Model\AuditLogApiKeyCreated|null
     */
    public function getApiKeyCreated()
    {
        return $this->container['api_key_created'];
    }

    /**
     * Sets api_key_created
     *
     * @param \JeedomOpenAI\Model\AuditLogApiKeyCreated|null $api_key_created api_key_created
     *
     * @return self
     */
    public function setApiKeyCreated($api_key_created)
    {
        if (is_null($api_key_created)) {
            throw new \InvalidArgumentException('non-nullable api_key_created cannot be null');
        }
        $this->container['api_key_created'] = $api_key_created;

        return $this;
    }

    /**
     * Gets api_key_updated
     *
     * @return \JeedomOpenAI\Model\AuditLogApiKeyUpdated|null
     */
    public function getApiKeyUpdated()
    {
        return $this->container['api_key_updated'];
    }

    /**
     * Sets api_key_updated
     *
     * @param \JeedomOpenAI\Model\AuditLogApiKeyUpdated|null $api_key_updated api_key_updated
     *
     * @return self
     */
    public function setApiKeyUpdated($api_key_updated)
    {
        if (is_null($api_key_updated)) {
            throw new \InvalidArgumentException('non-nullable api_key_updated cannot be null');
        }
        $this->container['api_key_updated'] = $api_key_updated;

        return $this;
    }

    /**
     * Gets api_key_deleted
     *
     * @return \JeedomOpenAI\Model\AuditLogApiKeyDeleted|null
     */
    public function getApiKeyDeleted()
    {
        return $this->container['api_key_deleted'];
    }

    /**
     * Sets api_key_deleted
     *
     * @param \JeedomOpenAI\Model\AuditLogApiKeyDeleted|null $api_key_deleted api_key_deleted
     *
     * @return self
     */
    public function setApiKeyDeleted($api_key_deleted)
    {
        if (is_null($api_key_deleted)) {
            throw new \InvalidArgumentException('non-nullable api_key_deleted cannot be null');
        }
        $this->container['api_key_deleted'] = $api_key_deleted;

        return $this;
    }

    /**
     * Gets invite_sent
     *
     * @return \JeedomOpenAI\Model\AuditLogInviteSent|null
     */
    public function getInviteSent()
    {
        return $this->container['invite_sent'];
    }

    /**
     * Sets invite_sent
     *
     * @param \JeedomOpenAI\Model\AuditLogInviteSent|null $invite_sent invite_sent
     *
     * @return self
     */
    public function setInviteSent($invite_sent)
    {
        if (is_null($invite_sent)) {
            throw new \InvalidArgumentException('non-nullable invite_sent cannot be null');
        }
        $this->container['invite_sent'] = $invite_sent;

        return $this;
    }

    /**
     * Gets invite_accepted
     *
     * @return \JeedomOpenAI\Model\AuditLogInviteAccepted|null
     */
    public function getInviteAccepted()
    {
        return $this->container['invite_accepted'];
    }

    /**
     * Sets invite_accepted
     *
     * @param \JeedomOpenAI\Model\AuditLogInviteAccepted|null $invite_accepted invite_accepted
     *
     * @return self
     */
    public function setInviteAccepted($invite_accepted)
    {
        if (is_null($invite_accepted)) {
            throw new \InvalidArgumentException('non-nullable invite_accepted cannot be null');
        }
        $this->container['invite_accepted'] = $invite_accepted;

        return $this;
    }

    /**
     * Gets invite_deleted
     *
     * @return \JeedomOpenAI\Model\AuditLogInviteAccepted|null
     */
    public function getInviteDeleted()
    {
        return $this->container['invite_deleted'];
    }

    /**
     * Sets invite_deleted
     *
     * @param \JeedomOpenAI\Model\AuditLogInviteAccepted|null $invite_deleted invite_deleted
     *
     * @return self
     */
    public function setInviteDeleted($invite_deleted)
    {
        if (is_null($invite_deleted)) {
            throw new \InvalidArgumentException('non-nullable invite_deleted cannot be null');
        }
        $this->container['invite_deleted'] = $invite_deleted;

        return $this;
    }

    /**
     * Gets login_failed
     *
     * @return \JeedomOpenAI\Model\AuditLogLoginFailed|null
     */
    public function getLoginFailed()
    {
        return $this->container['login_failed'];
    }

    /**
     * Sets login_failed
     *
     * @param \JeedomOpenAI\Model\AuditLogLoginFailed|null $login_failed login_failed
     *
     * @return self
     */
    public function setLoginFailed($login_failed)
    {
        if (is_null($login_failed)) {
            throw new \InvalidArgumentException('non-nullable login_failed cannot be null');
        }
        $this->container['login_failed'] = $login_failed;

        return $this;
    }

    /**
     * Gets logout_failed
     *
     * @return \JeedomOpenAI\Model\AuditLogLoginFailed|null
     */
    public function getLogoutFailed()
    {
        return $this->container['logout_failed'];
    }

    /**
     * Sets logout_failed
     *
     * @param \JeedomOpenAI\Model\AuditLogLoginFailed|null $logout_failed logout_failed
     *
     * @return self
     */
    public function setLogoutFailed($logout_failed)
    {
        if (is_null($logout_failed)) {
            throw new \InvalidArgumentException('non-nullable logout_failed cannot be null');
        }
        $this->container['logout_failed'] = $logout_failed;

        return $this;
    }

    /**
     * Gets organization_updated
     *
     * @return \JeedomOpenAI\Model\AuditLogOrganizationUpdated|null
     */
    public function getOrganizationUpdated()
    {
        return $this->container['organization_updated'];
    }

    /**
     * Sets organization_updated
     *
     * @param \JeedomOpenAI\Model\AuditLogOrganizationUpdated|null $organization_updated organization_updated
     *
     * @return self
     */
    public function setOrganizationUpdated($organization_updated)
    {
        if (is_null($organization_updated)) {
            throw new \InvalidArgumentException('non-nullable organization_updated cannot be null');
        }
        $this->container['organization_updated'] = $organization_updated;

        return $this;
    }

    /**
     * Gets project_created
     *
     * @return \JeedomOpenAI\Model\AuditLogProjectCreated|null
     */
    public function getProjectCreated()
    {
        return $this->container['project_created'];
    }

    /**
     * Sets project_created
     *
     * @param \JeedomOpenAI\Model\AuditLogProjectCreated|null $project_created project_created
     *
     * @return self
     */
    public function setProjectCreated($project_created)
    {
        if (is_null($project_created)) {
            throw new \InvalidArgumentException('non-nullable project_created cannot be null');
        }
        $this->container['project_created'] = $project_created;

        return $this;
    }

    /**
     * Gets project_updated
     *
     * @return \JeedomOpenAI\Model\AuditLogProjectUpdated|null
     */
    public function getProjectUpdated()
    {
        return $this->container['project_updated'];
    }

    /**
     * Sets project_updated
     *
     * @param \JeedomOpenAI\Model\AuditLogProjectUpdated|null $project_updated project_updated
     *
     * @return self
     */
    public function setProjectUpdated($project_updated)
    {
        if (is_null($project_updated)) {
            throw new \InvalidArgumentException('non-nullable project_updated cannot be null');
        }
        $this->container['project_updated'] = $project_updated;

        return $this;
    }

    /**
     * Gets project_archived
     *
     * @return \JeedomOpenAI\Model\AuditLogProjectArchived|null
     */
    public function getProjectArchived()
    {
        return $this->container['project_archived'];
    }

    /**
     * Sets project_archived
     *
     * @param \JeedomOpenAI\Model\AuditLogProjectArchived|null $project_archived project_archived
     *
     * @return self
     */
    public function setProjectArchived($project_archived)
    {
        if (is_null($project_archived)) {
            throw new \InvalidArgumentException('non-nullable project_archived cannot be null');
        }
        $this->container['project_archived'] = $project_archived;

        return $this;
    }

    /**
     * Gets rate_limit_updated
     *
     * @return \JeedomOpenAI\Model\AuditLogRateLimitUpdated|null
     */
    public function getRateLimitUpdated()
    {
        return $this->container['rate_limit_updated'];
    }

    /**
     * Sets rate_limit_updated
     *
     * @param \JeedomOpenAI\Model\AuditLogRateLimitUpdated|null $rate_limit_updated rate_limit_updated
     *
     * @return self
     */
    public function setRateLimitUpdated($rate_limit_updated)
    {
        if (is_null($rate_limit_updated)) {
            throw new \InvalidArgumentException('non-nullable rate_limit_updated cannot be null');
        }
        $this->container['rate_limit_updated'] = $rate_limit_updated;

        return $this;
    }

    /**
     * Gets rate_limit_deleted
     *
     * @return \JeedomOpenAI\Model\AuditLogRateLimitDeleted|null
     */
    public function getRateLimitDeleted()
    {
        return $this->container['rate_limit_deleted'];
    }

    /**
     * Sets rate_limit_deleted
     *
     * @param \JeedomOpenAI\Model\AuditLogRateLimitDeleted|null $rate_limit_deleted rate_limit_deleted
     *
     * @return self
     */
    public function setRateLimitDeleted($rate_limit_deleted)
    {
        if (is_null($rate_limit_deleted)) {
            throw new \InvalidArgumentException('non-nullable rate_limit_deleted cannot be null');
        }
        $this->container['rate_limit_deleted'] = $rate_limit_deleted;

        return $this;
    }

    /**
     * Gets service_account_created
     *
     * @return \JeedomOpenAI\Model\AuditLogServiceAccountCreated|null
     */
    public function getServiceAccountCreated()
    {
        return $this->container['service_account_created'];
    }

    /**
     * Sets service_account_created
     *
     * @param \JeedomOpenAI\Model\AuditLogServiceAccountCreated|null $service_account_created service_account_created
     *
     * @return self
     */
    public function setServiceAccountCreated($service_account_created)
    {
        if (is_null($service_account_created)) {
            throw new \InvalidArgumentException('non-nullable service_account_created cannot be null');
        }
        $this->container['service_account_created'] = $service_account_created;

        return $this;
    }

    /**
     * Gets service_account_updated
     *
     * @return \JeedomOpenAI\Model\AuditLogServiceAccountUpdated|null
     */
    public function getServiceAccountUpdated()
    {
        return $this->container['service_account_updated'];
    }

    /**
     * Sets service_account_updated
     *
     * @param \JeedomOpenAI\Model\AuditLogServiceAccountUpdated|null $service_account_updated service_account_updated
     *
     * @return self
     */
    public function setServiceAccountUpdated($service_account_updated)
    {
        if (is_null($service_account_updated)) {
            throw new \InvalidArgumentException('non-nullable service_account_updated cannot be null');
        }
        $this->container['service_account_updated'] = $service_account_updated;

        return $this;
    }

    /**
     * Gets service_account_deleted
     *
     * @return \JeedomOpenAI\Model\AuditLogServiceAccountDeleted|null
     */
    public function getServiceAccountDeleted()
    {
        return $this->container['service_account_deleted'];
    }

    /**
     * Sets service_account_deleted
     *
     * @param \JeedomOpenAI\Model\AuditLogServiceAccountDeleted|null $service_account_deleted service_account_deleted
     *
     * @return self
     */
    public function setServiceAccountDeleted($service_account_deleted)
    {
        if (is_null($service_account_deleted)) {
            throw new \InvalidArgumentException('non-nullable service_account_deleted cannot be null');
        }
        $this->container['service_account_deleted'] = $service_account_deleted;

        return $this;
    }

    /**
     * Gets user_added
     *
     * @return \JeedomOpenAI\Model\AuditLogUserAdded|null
     */
    public function getUserAdded()
    {
        return $this->container['user_added'];
    }

    /**
     * Sets user_added
     *
     * @param \JeedomOpenAI\Model\AuditLogUserAdded|null $user_added user_added
     *
     * @return self
     */
    public function setUserAdded($user_added)
    {
        if (is_null($user_added)) {
            throw new \InvalidArgumentException('non-nullable user_added cannot be null');
        }
        $this->container['user_added'] = $user_added;

        return $this;
    }

    /**
     * Gets user_updated
     *
     * @return \JeedomOpenAI\Model\AuditLogUserUpdated|null
     */
    public function getUserUpdated()
    {
        return $this->container['user_updated'];
    }

    /**
     * Sets user_updated
     *
     * @param \JeedomOpenAI\Model\AuditLogUserUpdated|null $user_updated user_updated
     *
     * @return self
     */
    public function setUserUpdated($user_updated)
    {
        if (is_null($user_updated)) {
            throw new \InvalidArgumentException('non-nullable user_updated cannot be null');
        }
        $this->container['user_updated'] = $user_updated;

        return $this;
    }

    /**
     * Gets user_deleted
     *
     * @return \JeedomOpenAI\Model\AuditLogUserDeleted|null
     */
    public function getUserDeleted()
    {
        return $this->container['user_deleted'];
    }

    /**
     * Sets user_deleted
     *
     * @param \JeedomOpenAI\Model\AuditLogUserDeleted|null $user_deleted user_deleted
     *
     * @return self
     */
    public function setUserDeleted($user_deleted)
    {
        if (is_null($user_deleted)) {
            throw new \InvalidArgumentException('non-nullable user_deleted cannot be null');
        }
        $this->container['user_deleted'] = $user_deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


