<?php
/**
 * Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Model;

use \ArrayAccess;
use \JeedomOpenAI\ObjectSerializer;

/**
 * Response Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'metadata' => 'array<string,string>',
        'temperature' => 'float',
        'top_p' => 'float',
        'user' => 'string',
        'previous_response_id' => 'string',
        'model' => '\JeedomOpenAI\Model\ModelIdsResponses',
        'reasoning' => '\JeedomOpenAI\Model\Reasoning',
        'max_output_tokens' => 'int',
        'instructions' => 'string',
        'text' => '\JeedomOpenAI\Model\ResponsePropertiesText',
        'tools' => '\JeedomOpenAI\Model\Tool[]',
        'tool_choice' => '\JeedomOpenAI\Model\ResponsePropertiesToolChoice',
        'truncation' => 'string',
        'id' => 'string',
        'object' => 'string',
        'status' => 'string',
        'created_at' => 'float',
        'error' => '\JeedomOpenAI\Model\ResponseError',
        'incomplete_details' => '\JeedomOpenAI\Model\ResponseAllOfIncompleteDetails',
        'output' => '\JeedomOpenAI\Model\OutputItem[]',
        'output_text' => 'string',
        'usage' => '\JeedomOpenAI\Model\ResponseUsage',
        'parallel_tool_calls' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'metadata' => null,
        'temperature' => null,
        'top_p' => null,
        'user' => null,
        'previous_response_id' => null,
        'model' => null,
        'reasoning' => null,
        'max_output_tokens' => null,
        'instructions' => null,
        'text' => null,
        'tools' => null,
        'tool_choice' => null,
        'truncation' => null,
        'id' => null,
        'object' => null,
        'status' => null,
        'created_at' => null,
        'error' => null,
        'incomplete_details' => null,
        'output' => null,
        'output_text' => null,
        'usage' => null,
        'parallel_tool_calls' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'metadata' => true,
        'temperature' => true,
        'top_p' => true,
        'user' => false,
        'previous_response_id' => true,
        'model' => false,
        'reasoning' => false,
        'max_output_tokens' => true,
        'instructions' => true,
        'text' => false,
        'tools' => false,
        'tool_choice' => false,
        'truncation' => true,
        'id' => false,
        'object' => false,
        'status' => false,
        'created_at' => false,
        'error' => true,
        'incomplete_details' => true,
        'output' => false,
        'output_text' => true,
        'usage' => false,
        'parallel_tool_calls' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'metadata' => 'metadata',
        'temperature' => 'temperature',
        'top_p' => 'top_p',
        'user' => 'user',
        'previous_response_id' => 'previous_response_id',
        'model' => 'model',
        'reasoning' => 'reasoning',
        'max_output_tokens' => 'max_output_tokens',
        'instructions' => 'instructions',
        'text' => 'text',
        'tools' => 'tools',
        'tool_choice' => 'tool_choice',
        'truncation' => 'truncation',
        'id' => 'id',
        'object' => 'object',
        'status' => 'status',
        'created_at' => 'created_at',
        'error' => 'error',
        'incomplete_details' => 'incomplete_details',
        'output' => 'output',
        'output_text' => 'output_text',
        'usage' => 'usage',
        'parallel_tool_calls' => 'parallel_tool_calls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'metadata' => 'setMetadata',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP',
        'user' => 'setUser',
        'previous_response_id' => 'setPreviousResponseId',
        'model' => 'setModel',
        'reasoning' => 'setReasoning',
        'max_output_tokens' => 'setMaxOutputTokens',
        'instructions' => 'setInstructions',
        'text' => 'setText',
        'tools' => 'setTools',
        'tool_choice' => 'setToolChoice',
        'truncation' => 'setTruncation',
        'id' => 'setId',
        'object' => 'setObject',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'error' => 'setError',
        'incomplete_details' => 'setIncompleteDetails',
        'output' => 'setOutput',
        'output_text' => 'setOutputText',
        'usage' => 'setUsage',
        'parallel_tool_calls' => 'setParallelToolCalls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'metadata' => 'getMetadata',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP',
        'user' => 'getUser',
        'previous_response_id' => 'getPreviousResponseId',
        'model' => 'getModel',
        'reasoning' => 'getReasoning',
        'max_output_tokens' => 'getMaxOutputTokens',
        'instructions' => 'getInstructions',
        'text' => 'getText',
        'tools' => 'getTools',
        'tool_choice' => 'getToolChoice',
        'truncation' => 'getTruncation',
        'id' => 'getId',
        'object' => 'getObject',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'error' => 'getError',
        'incomplete_details' => 'getIncompleteDetails',
        'output' => 'getOutput',
        'output_text' => 'getOutputText',
        'usage' => 'getUsage',
        'parallel_tool_calls' => 'getParallelToolCalls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRUNCATION_AUTO = 'auto';
    public const TRUNCATION_DISABLED = 'disabled';
    public const OBJECT_RESPONSE = 'response';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_FAILED = 'failed';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_INCOMPLETE = 'incomplete';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTruncationAllowableValues()
    {
        return [
            self::TRUNCATION_AUTO,
            self::TRUNCATION_DISABLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_RESPONSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_FAILED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_INCOMPLETE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], 1);
        $this->setIfExists('top_p', $data ?? [], 1);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('previous_response_id', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('reasoning', $data ?? [], null);
        $this->setIfExists('max_output_tokens', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('tools', $data ?? [], null);
        $this->setIfExists('tool_choice', $data ?? [], null);
        $this->setIfExists('truncation', $data ?? [], 'disabled');
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('incomplete_details', $data ?? [], null);
        $this->setIfExists('output', $data ?? [], null);
        $this->setIfExists('output_text', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('parallel_tool_calls', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['temperature'] === null) {
            $invalidProperties[] = "'temperature' can't be null";
        }
        if (($this->container['temperature'] > 2)) {
            $invalidProperties[] = "invalid value for 'temperature', must be smaller than or equal to 2.";
        }

        if (($this->container['temperature'] < 0)) {
            $invalidProperties[] = "invalid value for 'temperature', must be bigger than or equal to 0.";
        }

        if ($this->container['top_p'] === null) {
            $invalidProperties[] = "'top_p' can't be null";
        }
        if (($this->container['top_p'] > 1)) {
            $invalidProperties[] = "invalid value for 'top_p', must be smaller than or equal to 1.";
        }

        if (($this->container['top_p'] < 0)) {
            $invalidProperties[] = "invalid value for 'top_p', must be bigger than or equal to 0.";
        }

        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['instructions'] === null) {
            $invalidProperties[] = "'instructions' can't be null";
        }
        if ($this->container['tools'] === null) {
            $invalidProperties[] = "'tools' can't be null";
        }
        if ($this->container['tool_choice'] === null) {
            $invalidProperties[] = "'tool_choice' can't be null";
        }
        $allowedValues = $this->getTruncationAllowableValues();
        if (!is_null($this->container['truncation']) && !in_array($this->container['truncation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'truncation', must be one of '%s'",
                $this->container['truncation'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['incomplete_details'] === null) {
            $invalidProperties[] = "'incomplete_details' can't be null";
        }
        if ($this->container['output'] === null) {
            $invalidProperties[] = "'output' can't be null";
        }
        if ($this->container['parallel_tool_calls'] === null) {
            $invalidProperties[] = "'parallel_tool_calls' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets metadata
     *
     * @return array<string,string>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string> $metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float $temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            array_push($this->openAPINullablesSetToNull, 'temperature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temperature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($temperature) && ($temperature > 2)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling Response., must be smaller than or equal to 2.');
        }
        if (!is_null($temperature) && ($temperature < 0)) {
            throw new \InvalidArgumentException('invalid value for $temperature when calling Response., must be bigger than or equal to 0.');
        }

        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float $top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        if (is_null($top_p)) {
            array_push($this->openAPINullablesSetToNull, 'top_p');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_p', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($top_p) && ($top_p > 1)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling Response., must be smaller than or equal to 1.');
        }
        if (!is_null($top_p) && ($top_p < 0)) {
            throw new \InvalidArgumentException('invalid value for $top_p when calling Response., must be bigger than or equal to 0.');
        }

        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets previous_response_id
     *
     * @return string|null
     */
    public function getPreviousResponseId()
    {
        return $this->container['previous_response_id'];
    }

    /**
     * Sets previous_response_id
     *
     * @param string|null $previous_response_id The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about  [conversation state](/docs/guides/conversation-state).
     *
     * @return self
     */
    public function setPreviousResponseId($previous_response_id)
    {
        if (is_null($previous_response_id)) {
            array_push($this->openAPINullablesSetToNull, 'previous_response_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_response_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_response_id'] = $previous_response_id;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \JeedomOpenAI\Model\ModelIdsResponses
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \JeedomOpenAI\Model\ModelIdsResponses $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets reasoning
     *
     * @return \JeedomOpenAI\Model\Reasoning|null
     */
    public function getReasoning()
    {
        return $this->container['reasoning'];
    }

    /**
     * Sets reasoning
     *
     * @param \JeedomOpenAI\Model\Reasoning|null $reasoning reasoning
     *
     * @return self
     */
    public function setReasoning($reasoning)
    {
        if (is_null($reasoning)) {
            throw new \InvalidArgumentException('non-nullable reasoning cannot be null');
        }
        $this->container['reasoning'] = $reasoning;

        return $this;
    }

    /**
     * Gets max_output_tokens
     *
     * @return int|null
     */
    public function getMaxOutputTokens()
    {
        return $this->container['max_output_tokens'];
    }

    /**
     * Sets max_output_tokens
     *
     * @param int|null $max_output_tokens An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
     *
     * @return self
     */
    public function setMaxOutputTokens($max_output_tokens)
    {
        if (is_null($max_output_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_output_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_output_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_output_tokens'] = $max_output_tokens;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string $instructions Inserts a system (or developer) message as the first item in the model's context.  When using along with `previous_response_id`, the instructions from a previous response will be not be carried over to the next response. This makes it simple to swap out system (or developer) messages in new responses.
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            array_push($this->openAPINullablesSetToNull, 'instructions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instructions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \JeedomOpenAI\Model\ResponsePropertiesText|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \JeedomOpenAI\Model\ResponsePropertiesText|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets tools
     *
     * @return \JeedomOpenAI\Model\Tool[]
     */
    public function getTools()
    {
        return $this->container['tools'];
    }

    /**
     * Sets tools
     *
     * @param \JeedomOpenAI\Model\Tool[] $tools An array of tools the model may call while generating a response. You  can specify which tool to use by setting the `tool_choice` parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model's capabilities, like [web search](/docs/guides/tools-web-search)   or [file search](/docs/guides/tools-file-search). Learn more about   [built-in tools](/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code. Learn more about   [function calling](/docs/guides/function-calling).
     *
     * @return self
     */
    public function setTools($tools)
    {
        if (is_null($tools)) {
            throw new \InvalidArgumentException('non-nullable tools cannot be null');
        }
        $this->container['tools'] = $tools;

        return $this;
    }

    /**
     * Gets tool_choice
     *
     * @return \JeedomOpenAI\Model\ResponsePropertiesToolChoice
     */
    public function getToolChoice()
    {
        return $this->container['tool_choice'];
    }

    /**
     * Sets tool_choice
     *
     * @param \JeedomOpenAI\Model\ResponsePropertiesToolChoice $tool_choice tool_choice
     *
     * @return self
     */
    public function setToolChoice($tool_choice)
    {
        if (is_null($tool_choice)) {
            throw new \InvalidArgumentException('non-nullable tool_choice cannot be null');
        }
        $this->container['tool_choice'] = $tool_choice;

        return $this;
    }

    /**
     * Gets truncation
     *
     * @return string|null
     */
    public function getTruncation()
    {
        return $this->container['truncation'];
    }

    /**
     * Sets truncation
     *
     * @param string|null $truncation The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the    response to fit the context window by dropping input items in the   middle of the conversation.  - `disabled` (default): If a model response will exceed the context window    size for a model, the request will fail with a 400 error.
     *
     * @return self
     */
    public function setTruncation($truncation)
    {
        if (is_null($truncation)) {
            array_push($this->openAPINullablesSetToNull, 'truncation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('truncation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTruncationAllowableValues();
        if (!is_null($truncation) && !in_array($truncation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'truncation', must be one of '%s'",
                    $truncation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['truncation'] = $truncation;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for this Response.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object The object type of this resource - always set to `response`.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the response generation. One of `completed`, `failed`,  `in_progress`, or `incomplete`.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float $created_at Unix timestamp (in seconds) of when this Response was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \JeedomOpenAI\Model\ResponseError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \JeedomOpenAI\Model\ResponseError $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets incomplete_details
     *
     * @return \JeedomOpenAI\Model\ResponseAllOfIncompleteDetails
     */
    public function getIncompleteDetails()
    {
        return $this->container['incomplete_details'];
    }

    /**
     * Sets incomplete_details
     *
     * @param \JeedomOpenAI\Model\ResponseAllOfIncompleteDetails $incomplete_details incomplete_details
     *
     * @return self
     */
    public function setIncompleteDetails($incomplete_details)
    {
        if (is_null($incomplete_details)) {
            array_push($this->openAPINullablesSetToNull, 'incomplete_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incomplete_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incomplete_details'] = $incomplete_details;

        return $this;
    }

    /**
     * Gets output
     *
     * @return \JeedomOpenAI\Model\OutputItem[]
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param \JeedomOpenAI\Model\OutputItem[] $output An array of content items generated by the model.  - The length and order of items in the `output` array is dependent   on the model's response. - Rather than accessing the first item in the `output` array and    assuming it's an `assistant` message with the content generated by   the model, you might consider using the `output_text` property where   supported in SDKs.
     *
     * @return self
     */
    public function setOutput($output)
    {
        if (is_null($output)) {
            throw new \InvalidArgumentException('non-nullable output cannot be null');
        }
        $this->container['output'] = $output;

        return $this;
    }

    /**
     * Gets output_text
     *
     * @return string|null
     */
    public function getOutputText()
    {
        return $this->container['output_text'];
    }

    /**
     * Sets output_text
     *
     * @param string|null $output_text SDK-only convenience property that contains the aggregated text output  from all `output_text` items in the `output` array, if any are present.  Supported in the Python and JavaScript SDKs.
     *
     * @return self
     */
    public function setOutputText($output_text)
    {
        if (is_null($output_text)) {
            array_push($this->openAPINullablesSetToNull, 'output_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('output_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['output_text'] = $output_text;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \JeedomOpenAI\Model\ResponseUsage|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \JeedomOpenAI\Model\ResponseUsage|null $usage usage
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            throw new \InvalidArgumentException('non-nullable usage cannot be null');
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets parallel_tool_calls
     *
     * @return bool
     */
    public function getParallelToolCalls()
    {
        return $this->container['parallel_tool_calls'];
    }

    /**
     * Sets parallel_tool_calls
     *
     * @param bool $parallel_tool_calls Whether to allow the model to run tool calls in parallel.
     *
     * @return self
     */
    public function setParallelToolCalls($parallel_tool_calls)
    {
        if (is_null($parallel_tool_calls)) {
            throw new \InvalidArgumentException('non-nullable parallel_tool_calls cannot be null');
        }
        $this->container['parallel_tool_calls'] = $parallel_tool_calls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


