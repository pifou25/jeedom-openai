<?php
/**
 * FineTuningApi
 * PHP version 7.2
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use JeedomOpenAI\ApiException;
use JeedomOpenAI\Configuration;
use JeedomOpenAI\DebugPlugin;
use JeedomOpenAI\HeaderSelector;
use JeedomOpenAI\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * FineTuningApi Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FineTuningApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.openai.com/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelFineTuningJob
     *
     * Immediately cancel a fine-tune job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to cancel. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\FineTuningJob
     */
    public function cancelFineTuningJob($fine_tuning_job_id)
    {
        list($response) = $this->cancelFineTuningJobWithHttpInfo($fine_tuning_job_id);
        return $response;
    }

    /**
     * Operation cancelFineTuningJobWithHttpInfo
     *
     * Immediately cancel a fine-tune job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to cancel. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\FineTuningJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelFineTuningJobWithHttpInfo($fine_tuning_job_id)
    {
        $request = $this->cancelFineTuningJobRequest($fine_tuning_job_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\FineTuningJob',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\FineTuningJob',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\FineTuningJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelFineTuningJobAsync
     *
     * Immediately cancel a fine-tune job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function cancelFineTuningJobAsync($fine_tuning_job_id)
    {
        return $this->cancelFineTuningJobAsyncWithHttpInfo($fine_tuning_job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelFineTuningJobAsyncWithHttpInfo
     *
     * Immediately cancel a fine-tune job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function cancelFineTuningJobAsyncWithHttpInfo($fine_tuning_job_id)
    {
        $returnType = '\JeedomOpenAI\Model\FineTuningJob';
        $request = $this->cancelFineTuningJobRequest($fine_tuning_job_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelFineTuningJob'
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function cancelFineTuningJobRequest($fine_tuning_job_id)
    {
        // verify the required parameter 'fine_tuning_job_id' is set
        if ($fine_tuning_job_id === null || (is_array($fine_tuning_job_id) && count($fine_tuning_job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fine_tuning_job_id when calling cancelFineTuningJob'
            );
        }

        $resourcePath = '/fine_tuning/jobs/{fine_tuning_job_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($fine_tuning_job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fine_tuning_job_id' . '}',
                ObjectSerializer::toPathValue($fine_tuning_job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createFineTuningCheckpointPermission
     *
     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).  This enables organization owners to share fine-tuned models with other projects in their organization.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to create a permission for. (required)
     * @param  \JeedomOpenAI\Model\CreateFineTuningCheckpointPermissionRequest $create_fine_tuning_checkpoint_permission_request create_fine_tuning_checkpoint_permission_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse
     */
    public function createFineTuningCheckpointPermission($permission_id, $create_fine_tuning_checkpoint_permission_request)
    {
        list($response) = $this->createFineTuningCheckpointPermissionWithHttpInfo($permission_id, $create_fine_tuning_checkpoint_permission_request);
        return $response;
    }

    /**
     * Operation createFineTuningCheckpointPermissionWithHttpInfo
     *
     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).  This enables organization owners to share fine-tuned models with other projects in their organization.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to create a permission for. (required)
     * @param  \JeedomOpenAI\Model\CreateFineTuningCheckpointPermissionRequest $create_fine_tuning_checkpoint_permission_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFineTuningCheckpointPermissionWithHttpInfo($permission_id, $create_fine_tuning_checkpoint_permission_request)
    {
        $request = $this->createFineTuningCheckpointPermissionRequest($permission_id, $create_fine_tuning_checkpoint_permission_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createFineTuningCheckpointPermissionAsync
     *
     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).  This enables organization owners to share fine-tuned models with other projects in their organization.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to create a permission for. (required)
     * @param  \JeedomOpenAI\Model\CreateFineTuningCheckpointPermissionRequest $create_fine_tuning_checkpoint_permission_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createFineTuningCheckpointPermissionAsync($permission_id, $create_fine_tuning_checkpoint_permission_request)
    {
        return $this->createFineTuningCheckpointPermissionAsyncWithHttpInfo($permission_id, $create_fine_tuning_checkpoint_permission_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFineTuningCheckpointPermissionAsyncWithHttpInfo
     *
     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).  This enables organization owners to share fine-tuned models with other projects in their organization.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to create a permission for. (required)
     * @param  \JeedomOpenAI\Model\CreateFineTuningCheckpointPermissionRequest $create_fine_tuning_checkpoint_permission_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createFineTuningCheckpointPermissionAsyncWithHttpInfo($permission_id, $create_fine_tuning_checkpoint_permission_request)
    {
        $returnType = '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse';
        $request = $this->createFineTuningCheckpointPermissionRequest($permission_id, $create_fine_tuning_checkpoint_permission_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFineTuningCheckpointPermission'
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to create a permission for. (required)
     * @param  \JeedomOpenAI\Model\CreateFineTuningCheckpointPermissionRequest $create_fine_tuning_checkpoint_permission_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createFineTuningCheckpointPermissionRequest($permission_id, $create_fine_tuning_checkpoint_permission_request)
    {
        // verify the required parameter 'permission_id' is set
        if ($permission_id === null || (is_array($permission_id) && count($permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permission_id when calling createFineTuningCheckpointPermission'
            );
        }
        // verify the required parameter 'create_fine_tuning_checkpoint_permission_request' is set
        if ($create_fine_tuning_checkpoint_permission_request === null || (is_array($create_fine_tuning_checkpoint_permission_request) && count($create_fine_tuning_checkpoint_permission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_fine_tuning_checkpoint_permission_request when calling createFineTuningCheckpointPermission'
            );
        }

        $resourcePath = '/fine_tuning/checkpoints/{permission_id}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'permission_id' . '}',
                ObjectSerializer::toPathValue($permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_fine_tuning_checkpoint_permission_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_fine_tuning_checkpoint_permission_request));
            } else {
                $httpBody = $create_fine_tuning_checkpoint_permission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createFineTuningJob
     *
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  \JeedomOpenAI\Model\CreateFineTuningJobRequest $create_fine_tuning_job_request create_fine_tuning_job_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\FineTuningJob
     */
    public function createFineTuningJob($create_fine_tuning_job_request)
    {
        list($response) = $this->createFineTuningJobWithHttpInfo($create_fine_tuning_job_request);
        return $response;
    }

    /**
     * Operation createFineTuningJobWithHttpInfo
     *
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  \JeedomOpenAI\Model\CreateFineTuningJobRequest $create_fine_tuning_job_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\FineTuningJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFineTuningJobWithHttpInfo($create_fine_tuning_job_request)
    {
        $request = $this->createFineTuningJobRequest($create_fine_tuning_job_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\FineTuningJob',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\FineTuningJob',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\FineTuningJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createFineTuningJobAsync
     *
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  \JeedomOpenAI\Model\CreateFineTuningJobRequest $create_fine_tuning_job_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createFineTuningJobAsync($create_fine_tuning_job_request)
    {
        return $this->createFineTuningJobAsyncWithHttpInfo($create_fine_tuning_job_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFineTuningJobAsyncWithHttpInfo
     *
     * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  \JeedomOpenAI\Model\CreateFineTuningJobRequest $create_fine_tuning_job_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createFineTuningJobAsyncWithHttpInfo($create_fine_tuning_job_request)
    {
        $returnType = '\JeedomOpenAI\Model\FineTuningJob';
        $request = $this->createFineTuningJobRequest($create_fine_tuning_job_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFineTuningJob'
     *
     * @param  \JeedomOpenAI\Model\CreateFineTuningJobRequest $create_fine_tuning_job_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createFineTuningJobRequest($create_fine_tuning_job_request)
    {
        // verify the required parameter 'create_fine_tuning_job_request' is set
        if ($create_fine_tuning_job_request === null || (is_array($create_fine_tuning_job_request) && count($create_fine_tuning_job_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_fine_tuning_job_request when calling createFineTuningJob'
            );
        }

        $resourcePath = '/fine_tuning/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_fine_tuning_job_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_fine_tuning_job_request));
            } else {
                $httpBody = $create_fine_tuning_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteFineTuningCheckpointPermission
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint permission to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\DeleteFineTuningCheckpointPermissionResponse
     */
    public function deleteFineTuningCheckpointPermission($permission_id)
    {
        list($response) = $this->deleteFineTuningCheckpointPermissionWithHttpInfo($permission_id);
        return $response;
    }

    /**
     * Operation deleteFineTuningCheckpointPermissionWithHttpInfo
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint permission to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\DeleteFineTuningCheckpointPermissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFineTuningCheckpointPermissionWithHttpInfo($permission_id)
    {
        $request = $this->deleteFineTuningCheckpointPermissionRequest($permission_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\DeleteFineTuningCheckpointPermissionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\DeleteFineTuningCheckpointPermissionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\DeleteFineTuningCheckpointPermissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteFineTuningCheckpointPermissionAsync
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint permission to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteFineTuningCheckpointPermissionAsync($permission_id)
    {
        return $this->deleteFineTuningCheckpointPermissionAsyncWithHttpInfo($permission_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFineTuningCheckpointPermissionAsyncWithHttpInfo
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint permission to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteFineTuningCheckpointPermissionAsyncWithHttpInfo($permission_id)
    {
        $returnType = '\JeedomOpenAI\Model\DeleteFineTuningCheckpointPermissionResponse';
        $request = $this->deleteFineTuningCheckpointPermissionRequest($permission_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFineTuningCheckpointPermission'
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint permission to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteFineTuningCheckpointPermissionRequest($permission_id)
    {
        // verify the required parameter 'permission_id' is set
        if ($permission_id === null || (is_array($permission_id) && count($permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permission_id when calling deleteFineTuningCheckpointPermission'
            );
        }

        $resourcePath = '/fine_tuning/checkpoints/{permission_id}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'permission_id' . '}',
                ObjectSerializer::toPathValue($permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation listFineTuningCheckpointPermissions
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to get permissions for. (required)
     * @param  string $project_id The ID of the project to get permissions for. (optional)
     * @param  string $after Identifier for the last permission ID from the previous pagination request. (optional)
     * @param  int $limit Number of permissions to retrieve. (optional, default to 10)
     * @param  string $order The order in which to retrieve permissions. (optional, default to 'descending')
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse
     */
    public function listFineTuningCheckpointPermissions($permission_id, $project_id = null, $after = null, $limit = 10, $order = 'descending')
    {
        list($response) = $this->listFineTuningCheckpointPermissionsWithHttpInfo($permission_id, $project_id, $after, $limit, $order);
        return $response;
    }

    /**
     * Operation listFineTuningCheckpointPermissionsWithHttpInfo
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to get permissions for. (required)
     * @param  string $project_id The ID of the project to get permissions for. (optional)
     * @param  string $after Identifier for the last permission ID from the previous pagination request. (optional)
     * @param  int $limit Number of permissions to retrieve. (optional, default to 10)
     * @param  string $order The order in which to retrieve permissions. (optional, default to 'descending')
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFineTuningCheckpointPermissionsWithHttpInfo($permission_id, $project_id = null, $after = null, $limit = 10, $order = 'descending')
    {
        $request = $this->listFineTuningCheckpointPermissionsRequest($permission_id, $project_id, $after, $limit, $order);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listFineTuningCheckpointPermissionsAsync
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to get permissions for. (required)
     * @param  string $project_id The ID of the project to get permissions for. (optional)
     * @param  string $after Identifier for the last permission ID from the previous pagination request. (optional)
     * @param  int $limit Number of permissions to retrieve. (optional, default to 10)
     * @param  string $order The order in which to retrieve permissions. (optional, default to 'descending')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFineTuningCheckpointPermissionsAsync($permission_id, $project_id = null, $after = null, $limit = 10, $order = 'descending')
    {
        return $this->listFineTuningCheckpointPermissionsAsyncWithHttpInfo($permission_id, $project_id, $after, $limit, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFineTuningCheckpointPermissionsAsyncWithHttpInfo
     *
     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).  Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to get permissions for. (required)
     * @param  string $project_id The ID of the project to get permissions for. (optional)
     * @param  string $after Identifier for the last permission ID from the previous pagination request. (optional)
     * @param  int $limit Number of permissions to retrieve. (optional, default to 10)
     * @param  string $order The order in which to retrieve permissions. (optional, default to 'descending')
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFineTuningCheckpointPermissionsAsyncWithHttpInfo($permission_id, $project_id = null, $after = null, $limit = 10, $order = 'descending')
    {
        $returnType = '\JeedomOpenAI\Model\ListFineTuningCheckpointPermissionResponse';
        $request = $this->listFineTuningCheckpointPermissionsRequest($permission_id, $project_id, $after, $limit, $order);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFineTuningCheckpointPermissions'
     *
     * @param  string $permission_id The ID of the fine-tuned model checkpoint to get permissions for. (required)
     * @param  string $project_id The ID of the project to get permissions for. (optional)
     * @param  string $after Identifier for the last permission ID from the previous pagination request. (optional)
     * @param  int $limit Number of permissions to retrieve. (optional, default to 10)
     * @param  string $order The order in which to retrieve permissions. (optional, default to 'descending')
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listFineTuningCheckpointPermissionsRequest($permission_id, $project_id = null, $after = null, $limit = 10, $order = 'descending')
    {
        // verify the required parameter 'permission_id' is set
        if ($permission_id === null || (is_array($permission_id) && count($permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permission_id when calling listFineTuningCheckpointPermissions'
            );
        }

        $resourcePath = '/fine_tuning/checkpoints/{permission_id}/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_id'] = $project_id;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }


        // path params
        if ($permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'permission_id' . '}',
                ObjectSerializer::toPathValue($permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listFineTuningEvents
     *
     * Get status updates for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get events for. (required)
     * @param  string $after Identifier for the last event from the previous pagination request. (optional)
     * @param  int $limit Number of events to retrieve. (optional, default to 20)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListFineTuningJobEventsResponse
     */
    public function listFineTuningEvents($fine_tuning_job_id, $after = null, $limit = 20)
    {
        list($response) = $this->listFineTuningEventsWithHttpInfo($fine_tuning_job_id, $after, $limit);
        return $response;
    }

    /**
     * Operation listFineTuningEventsWithHttpInfo
     *
     * Get status updates for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get events for. (required)
     * @param  string $after Identifier for the last event from the previous pagination request. (optional)
     * @param  int $limit Number of events to retrieve. (optional, default to 20)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListFineTuningJobEventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFineTuningEventsWithHttpInfo($fine_tuning_job_id, $after = null, $limit = 20)
    {
        $request = $this->listFineTuningEventsRequest($fine_tuning_job_id, $after, $limit);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListFineTuningJobEventsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListFineTuningJobEventsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListFineTuningJobEventsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listFineTuningEventsAsync
     *
     * Get status updates for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get events for. (required)
     * @param  string $after Identifier for the last event from the previous pagination request. (optional)
     * @param  int $limit Number of events to retrieve. (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFineTuningEventsAsync($fine_tuning_job_id, $after = null, $limit = 20)
    {
        return $this->listFineTuningEventsAsyncWithHttpInfo($fine_tuning_job_id, $after, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFineTuningEventsAsyncWithHttpInfo
     *
     * Get status updates for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get events for. (required)
     * @param  string $after Identifier for the last event from the previous pagination request. (optional)
     * @param  int $limit Number of events to retrieve. (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFineTuningEventsAsyncWithHttpInfo($fine_tuning_job_id, $after = null, $limit = 20)
    {
        $returnType = '\JeedomOpenAI\Model\ListFineTuningJobEventsResponse';
        $request = $this->listFineTuningEventsRequest($fine_tuning_job_id, $after, $limit);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFineTuningEvents'
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get events for. (required)
     * @param  string $after Identifier for the last event from the previous pagination request. (optional)
     * @param  int $limit Number of events to retrieve. (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listFineTuningEventsRequest($fine_tuning_job_id, $after = null, $limit = 20)
    {
        // verify the required parameter 'fine_tuning_job_id' is set
        if ($fine_tuning_job_id === null || (is_array($fine_tuning_job_id) && count($fine_tuning_job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fine_tuning_job_id when calling listFineTuningEvents'
            );
        }

        $resourcePath = '/fine_tuning/jobs/{fine_tuning_job_id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }


        // path params
        if ($fine_tuning_job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fine_tuning_job_id' . '}',
                ObjectSerializer::toPathValue($fine_tuning_job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listFineTuningJobCheckpoints
     *
     * List checkpoints for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get checkpoints for. (required)
     * @param  string $after Identifier for the last checkpoint ID from the previous pagination request. (optional)
     * @param  int $limit Number of checkpoints to retrieve. (optional, default to 10)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListFineTuningJobCheckpointsResponse
     */
    public function listFineTuningJobCheckpoints($fine_tuning_job_id, $after = null, $limit = 10)
    {
        list($response) = $this->listFineTuningJobCheckpointsWithHttpInfo($fine_tuning_job_id, $after, $limit);
        return $response;
    }

    /**
     * Operation listFineTuningJobCheckpointsWithHttpInfo
     *
     * List checkpoints for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get checkpoints for. (required)
     * @param  string $after Identifier for the last checkpoint ID from the previous pagination request. (optional)
     * @param  int $limit Number of checkpoints to retrieve. (optional, default to 10)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListFineTuningJobCheckpointsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFineTuningJobCheckpointsWithHttpInfo($fine_tuning_job_id, $after = null, $limit = 10)
    {
        $request = $this->listFineTuningJobCheckpointsRequest($fine_tuning_job_id, $after, $limit);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListFineTuningJobCheckpointsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListFineTuningJobCheckpointsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListFineTuningJobCheckpointsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listFineTuningJobCheckpointsAsync
     *
     * List checkpoints for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get checkpoints for. (required)
     * @param  string $after Identifier for the last checkpoint ID from the previous pagination request. (optional)
     * @param  int $limit Number of checkpoints to retrieve. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFineTuningJobCheckpointsAsync($fine_tuning_job_id, $after = null, $limit = 10)
    {
        return $this->listFineTuningJobCheckpointsAsyncWithHttpInfo($fine_tuning_job_id, $after, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFineTuningJobCheckpointsAsyncWithHttpInfo
     *
     * List checkpoints for a fine-tuning job.
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get checkpoints for. (required)
     * @param  string $after Identifier for the last checkpoint ID from the previous pagination request. (optional)
     * @param  int $limit Number of checkpoints to retrieve. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFineTuningJobCheckpointsAsyncWithHttpInfo($fine_tuning_job_id, $after = null, $limit = 10)
    {
        $returnType = '\JeedomOpenAI\Model\ListFineTuningJobCheckpointsResponse';
        $request = $this->listFineTuningJobCheckpointsRequest($fine_tuning_job_id, $after, $limit);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFineTuningJobCheckpoints'
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job to get checkpoints for. (required)
     * @param  string $after Identifier for the last checkpoint ID from the previous pagination request. (optional)
     * @param  int $limit Number of checkpoints to retrieve. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listFineTuningJobCheckpointsRequest($fine_tuning_job_id, $after = null, $limit = 10)
    {
        // verify the required parameter 'fine_tuning_job_id' is set
        if ($fine_tuning_job_id === null || (is_array($fine_tuning_job_id) && count($fine_tuning_job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fine_tuning_job_id when calling listFineTuningJobCheckpoints'
            );
        }

        $resourcePath = '/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }


        // path params
        if ($fine_tuning_job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fine_tuning_job_id' . '}',
                ObjectSerializer::toPathValue($fine_tuning_job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listPaginatedFineTuningJobs
     *
     * List your organization&#39;s fine-tuning jobs
     *
     * @param  string $after Identifier for the last job from the previous pagination request. (optional)
     * @param  int $limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
     * @param  array<string,string> $metadata Optional metadata filter. To filter, use the syntax &#x60;metadata[k]&#x3D;v&#x60;. Alternatively, set &#x60;metadata&#x3D;null&#x60; to indicate no metadata. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListPaginatedFineTuningJobsResponse
     */
    public function listPaginatedFineTuningJobs($after = null, $limit = 20, $metadata = null)
    {
        list($response) = $this->listPaginatedFineTuningJobsWithHttpInfo($after, $limit, $metadata);
        return $response;
    }

    /**
     * Operation listPaginatedFineTuningJobsWithHttpInfo
     *
     * List your organization&#39;s fine-tuning jobs
     *
     * @param  string $after Identifier for the last job from the previous pagination request. (optional)
     * @param  int $limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
     * @param  array<string,string> $metadata Optional metadata filter. To filter, use the syntax &#x60;metadata[k]&#x3D;v&#x60;. Alternatively, set &#x60;metadata&#x3D;null&#x60; to indicate no metadata. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListPaginatedFineTuningJobsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPaginatedFineTuningJobsWithHttpInfo($after = null, $limit = 20, $metadata = null)
    {
        $request = $this->listPaginatedFineTuningJobsRequest($after, $limit, $metadata);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListPaginatedFineTuningJobsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListPaginatedFineTuningJobsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListPaginatedFineTuningJobsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPaginatedFineTuningJobsAsync
     *
     * List your organization&#39;s fine-tuning jobs
     *
     * @param  string $after Identifier for the last job from the previous pagination request. (optional)
     * @param  int $limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
     * @param  array<string,string> $metadata Optional metadata filter. To filter, use the syntax &#x60;metadata[k]&#x3D;v&#x60;. Alternatively, set &#x60;metadata&#x3D;null&#x60; to indicate no metadata. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listPaginatedFineTuningJobsAsync($after = null, $limit = 20, $metadata = null)
    {
        return $this->listPaginatedFineTuningJobsAsyncWithHttpInfo($after, $limit, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPaginatedFineTuningJobsAsyncWithHttpInfo
     *
     * List your organization&#39;s fine-tuning jobs
     *
     * @param  string $after Identifier for the last job from the previous pagination request. (optional)
     * @param  int $limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
     * @param  array<string,string> $metadata Optional metadata filter. To filter, use the syntax &#x60;metadata[k]&#x3D;v&#x60;. Alternatively, set &#x60;metadata&#x3D;null&#x60; to indicate no metadata. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listPaginatedFineTuningJobsAsyncWithHttpInfo($after = null, $limit = 20, $metadata = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListPaginatedFineTuningJobsResponse';
        $request = $this->listPaginatedFineTuningJobsRequest($after, $limit, $metadata);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPaginatedFineTuningJobs'
     *
     * @param  string $after Identifier for the last job from the previous pagination request. (optional)
     * @param  int $limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
     * @param  array<string,string> $metadata Optional metadata filter. To filter, use the syntax &#x60;metadata[k]&#x3D;v&#x60;. Alternatively, set &#x60;metadata&#x3D;null&#x60; to indicate no metadata. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listPaginatedFineTuningJobsRequest($after = null, $limit = 20, $metadata = null)
    {

        $resourcePath = '/fine_tuning/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($metadata !== null) {
            if('form' === 'deepObject' && is_array($metadata)) {
                foreach($metadata as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['metadata'] = $metadata;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation retrieveFineTuningJob
     *
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\FineTuningJob
     */
    public function retrieveFineTuningJob($fine_tuning_job_id)
    {
        list($response) = $this->retrieveFineTuningJobWithHttpInfo($fine_tuning_job_id);
        return $response;
    }

    /**
     * Operation retrieveFineTuningJobWithHttpInfo
     *
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\FineTuningJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveFineTuningJobWithHttpInfo($fine_tuning_job_id)
    {
        $request = $this->retrieveFineTuningJobRequest($fine_tuning_job_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\FineTuningJob',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\FineTuningJob',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\FineTuningJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation retrieveFineTuningJobAsync
     *
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function retrieveFineTuningJobAsync($fine_tuning_job_id)
    {
        return $this->retrieveFineTuningJobAsyncWithHttpInfo($fine_tuning_job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveFineTuningJobAsyncWithHttpInfo
     *
     * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function retrieveFineTuningJobAsyncWithHttpInfo($fine_tuning_job_id)
    {
        $returnType = '\JeedomOpenAI\Model\FineTuningJob';
        $request = $this->retrieveFineTuningJobRequest($fine_tuning_job_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveFineTuningJob'
     *
     * @param  string $fine_tuning_job_id The ID of the fine-tuning job. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function retrieveFineTuningJobRequest($fine_tuning_job_id)
    {
        // verify the required parameter 'fine_tuning_job_id' is set
        if ($fine_tuning_job_id === null || (is_array($fine_tuning_job_id) && count($fine_tuning_job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fine_tuning_job_id when calling retrieveFineTuningJob'
            );
        }

        $resourcePath = '/fine_tuning/jobs/{fine_tuning_job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($fine_tuning_job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fine_tuning_job_id' . '}',
                ObjectSerializer::toPathValue($fine_tuning_job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
