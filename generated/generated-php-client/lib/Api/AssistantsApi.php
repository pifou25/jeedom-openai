<?php
/**
 * AssistantsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use JeedomOpenAI\ApiException;
use JeedomOpenAI\Configuration;
use JeedomOpenAI\DebugPlugin;
use JeedomOpenAI\HeaderSelector;
use JeedomOpenAI\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * AssistantsApi Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssistantsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.openai.com/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelRun
     *
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @param  string $thread_id The ID of the thread to which this run belongs. (required)
     * @param  string $run_id The ID of the run to cancel. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunObject
     */
    public function cancelRun($thread_id, $run_id)
    {
        list($response) = $this->cancelRunWithHttpInfo($thread_id, $run_id);
        return $response;
    }

    /**
     * Operation cancelRunWithHttpInfo
     *
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @param  string $thread_id The ID of the thread to which this run belongs. (required)
     * @param  string $run_id The ID of the run to cancel. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelRunWithHttpInfo($thread_id, $run_id)
    {
        $request = $this->cancelRunRequest($thread_id, $run_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelRunAsync
     *
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @param  string $thread_id The ID of the thread to which this run belongs. (required)
     * @param  string $run_id The ID of the run to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function cancelRunAsync($thread_id, $run_id)
    {
        return $this->cancelRunAsyncWithHttpInfo($thread_id, $run_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelRunAsyncWithHttpInfo
     *
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * @param  string $thread_id The ID of the thread to which this run belongs. (required)
     * @param  string $run_id The ID of the run to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function cancelRunAsyncWithHttpInfo($thread_id, $run_id)
    {
        $returnType = '\JeedomOpenAI\Model\RunObject';
        $request = $this->cancelRunRequest($thread_id, $run_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelRun'
     *
     * @param  string $thread_id The ID of the thread to which this run belongs. (required)
     * @param  string $run_id The ID of the run to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function cancelRunRequest($thread_id, $run_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling cancelRun'
            );
        }
        // verify the required parameter 'run_id' is set
        if ($run_id === null || (is_array($run_id) && count($run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_id when calling cancelRun'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs/{run_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'run_id' . '}',
                ObjectSerializer::toPathValue($run_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createAssistant
     *
     * Create an assistant with a model and instructions.
     *
     * @param  \JeedomOpenAI\Model\CreateAssistantRequest $create_assistant_request create_assistant_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\AssistantObject
     */
    public function createAssistant($create_assistant_request)
    {
        list($response) = $this->createAssistantWithHttpInfo($create_assistant_request);
        return $response;
    }

    /**
     * Operation createAssistantWithHttpInfo
     *
     * Create an assistant with a model and instructions.
     *
     * @param  \JeedomOpenAI\Model\CreateAssistantRequest $create_assistant_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\AssistantObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssistantWithHttpInfo($create_assistant_request)
    {
        $request = $this->createAssistantRequest($create_assistant_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\AssistantObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\AssistantObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\AssistantObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createAssistantAsync
     *
     * Create an assistant with a model and instructions.
     *
     * @param  \JeedomOpenAI\Model\CreateAssistantRequest $create_assistant_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createAssistantAsync($create_assistant_request)
    {
        return $this->createAssistantAsyncWithHttpInfo($create_assistant_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAssistantAsyncWithHttpInfo
     *
     * Create an assistant with a model and instructions.
     *
     * @param  \JeedomOpenAI\Model\CreateAssistantRequest $create_assistant_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createAssistantAsyncWithHttpInfo($create_assistant_request)
    {
        $returnType = '\JeedomOpenAI\Model\AssistantObject';
        $request = $this->createAssistantRequest($create_assistant_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAssistant'
     *
     * @param  \JeedomOpenAI\Model\CreateAssistantRequest $create_assistant_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createAssistantRequest($create_assistant_request)
    {
        // verify the required parameter 'create_assistant_request' is set
        if ($create_assistant_request === null || (is_array($create_assistant_request) && count($create_assistant_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_assistant_request when calling createAssistant'
            );
        }

        $resourcePath = '/assistants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_assistant_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_assistant_request));
            } else {
                $httpBody = $create_assistant_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createMessage
     *
     * Create a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param  \JeedomOpenAI\Model\CreateMessageRequest $create_message_request create_message_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\MessageObject
     */
    public function createMessage($thread_id, $create_message_request)
    {
        list($response) = $this->createMessageWithHttpInfo($thread_id, $create_message_request);
        return $response;
    }

    /**
     * Operation createMessageWithHttpInfo
     *
     * Create a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param  \JeedomOpenAI\Model\CreateMessageRequest $create_message_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\MessageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMessageWithHttpInfo($thread_id, $create_message_request)
    {
        $request = $this->createMessageRequest($thread_id, $create_message_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\MessageObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\MessageObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\MessageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createMessageAsync
     *
     * Create a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param  \JeedomOpenAI\Model\CreateMessageRequest $create_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createMessageAsync($thread_id, $create_message_request)
    {
        return $this->createMessageAsyncWithHttpInfo($thread_id, $create_message_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMessageAsyncWithHttpInfo
     *
     * Create a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param  \JeedomOpenAI\Model\CreateMessageRequest $create_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createMessageAsyncWithHttpInfo($thread_id, $create_message_request)
    {
        $returnType = '\JeedomOpenAI\Model\MessageObject';
        $request = $this->createMessageRequest($thread_id, $create_message_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMessage'
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for. (required)
     * @param  \JeedomOpenAI\Model\CreateMessageRequest $create_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createMessageRequest($thread_id, $create_message_request)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling createMessage'
            );
        }
        // verify the required parameter 'create_message_request' is set
        if ($create_message_request === null || (is_array($create_message_request) && count($create_message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_message_request when calling createMessage'
            );
        }

        $resourcePath = '/threads/{thread_id}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_message_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_message_request));
            } else {
                $httpBody = $create_message_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createRun
     *
     * Create a run.
     *
     * @param  string $thread_id The ID of the thread to run. (required)
     * @param  \JeedomOpenAI\Model\CreateRunRequest $create_run_request create_run_request (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunObject
     */
    public function createRun($thread_id, $create_run_request, $include = null)
    {
        list($response) = $this->createRunWithHttpInfo($thread_id, $create_run_request, $include);
        return $response;
    }

    /**
     * Operation createRunWithHttpInfo
     *
     * Create a run.
     *
     * @param  string $thread_id The ID of the thread to run. (required)
     * @param  \JeedomOpenAI\Model\CreateRunRequest $create_run_request (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRunWithHttpInfo($thread_id, $create_run_request, $include = null)
    {
        $request = $this->createRunRequest($thread_id, $create_run_request, $include);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createRunAsync
     *
     * Create a run.
     *
     * @param  string $thread_id The ID of the thread to run. (required)
     * @param  \JeedomOpenAI\Model\CreateRunRequest $create_run_request (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createRunAsync($thread_id, $create_run_request, $include = null)
    {
        return $this->createRunAsyncWithHttpInfo($thread_id, $create_run_request, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRunAsyncWithHttpInfo
     *
     * Create a run.
     *
     * @param  string $thread_id The ID of the thread to run. (required)
     * @param  \JeedomOpenAI\Model\CreateRunRequest $create_run_request (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createRunAsyncWithHttpInfo($thread_id, $create_run_request, $include = null)
    {
        $returnType = '\JeedomOpenAI\Model\RunObject';
        $request = $this->createRunRequest($thread_id, $create_run_request, $include);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRun'
     *
     * @param  string $thread_id The ID of the thread to run. (required)
     * @param  \JeedomOpenAI\Model\CreateRunRequest $create_run_request (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createRunRequest($thread_id, $create_run_request, $include = null)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling createRun'
            );
        }
        // verify the required parameter 'create_run_request' is set
        if ($create_run_request === null || (is_array($create_run_request) && count($create_run_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_run_request when calling createRun'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include[]'] = $include;
            }
        }


        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_run_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_run_request));
            } else {
                $httpBody = $create_run_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createThread
     *
     * Create a thread.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadRequest $create_thread_request create_thread_request (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ThreadObject
     */
    public function createThread($create_thread_request = null)
    {
        list($response) = $this->createThreadWithHttpInfo($create_thread_request);
        return $response;
    }

    /**
     * Operation createThreadWithHttpInfo
     *
     * Create a thread.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadRequest $create_thread_request (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ThreadObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createThreadWithHttpInfo($create_thread_request = null)
    {
        $request = $this->createThreadRequest($create_thread_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ThreadObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ThreadObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ThreadObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createThreadAsync
     *
     * Create a thread.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadRequest $create_thread_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createThreadAsync($create_thread_request = null)
    {
        return $this->createThreadAsyncWithHttpInfo($create_thread_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createThreadAsyncWithHttpInfo
     *
     * Create a thread.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadRequest $create_thread_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createThreadAsyncWithHttpInfo($create_thread_request = null)
    {
        $returnType = '\JeedomOpenAI\Model\ThreadObject';
        $request = $this->createThreadRequest($create_thread_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createThread'
     *
     * @param  \JeedomOpenAI\Model\CreateThreadRequest $create_thread_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createThreadRequest($create_thread_request = null)
    {

        $resourcePath = '/threads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_thread_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_thread_request));
            } else {
                $httpBody = $create_thread_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createThreadAndRun
     *
     * Create a thread and run it in one request.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadAndRunRequest $create_thread_and_run_request create_thread_and_run_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunObject
     */
    public function createThreadAndRun($create_thread_and_run_request)
    {
        list($response) = $this->createThreadAndRunWithHttpInfo($create_thread_and_run_request);
        return $response;
    }

    /**
     * Operation createThreadAndRunWithHttpInfo
     *
     * Create a thread and run it in one request.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadAndRunRequest $create_thread_and_run_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createThreadAndRunWithHttpInfo($create_thread_and_run_request)
    {
        $request = $this->createThreadAndRunRequest($create_thread_and_run_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createThreadAndRunAsync
     *
     * Create a thread and run it in one request.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadAndRunRequest $create_thread_and_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createThreadAndRunAsync($create_thread_and_run_request)
    {
        return $this->createThreadAndRunAsyncWithHttpInfo($create_thread_and_run_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createThreadAndRunAsyncWithHttpInfo
     *
     * Create a thread and run it in one request.
     *
     * @param  \JeedomOpenAI\Model\CreateThreadAndRunRequest $create_thread_and_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createThreadAndRunAsyncWithHttpInfo($create_thread_and_run_request)
    {
        $returnType = '\JeedomOpenAI\Model\RunObject';
        $request = $this->createThreadAndRunRequest($create_thread_and_run_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createThreadAndRun'
     *
     * @param  \JeedomOpenAI\Model\CreateThreadAndRunRequest $create_thread_and_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createThreadAndRunRequest($create_thread_and_run_request)
    {
        // verify the required parameter 'create_thread_and_run_request' is set
        if ($create_thread_and_run_request === null || (is_array($create_thread_and_run_request) && count($create_thread_and_run_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_thread_and_run_request when calling createThreadAndRun'
            );
        }

        $resourcePath = '/threads/runs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_thread_and_run_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_thread_and_run_request));
            } else {
                $httpBody = $create_thread_and_run_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteAssistant
     *
     * Delete an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\DeleteAssistantResponse
     */
    public function deleteAssistant($assistant_id)
    {
        list($response) = $this->deleteAssistantWithHttpInfo($assistant_id);
        return $response;
    }

    /**
     * Operation deleteAssistantWithHttpInfo
     *
     * Delete an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\DeleteAssistantResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssistantWithHttpInfo($assistant_id)
    {
        $request = $this->deleteAssistantRequest($assistant_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\DeleteAssistantResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\DeleteAssistantResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\DeleteAssistantResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteAssistantAsync
     *
     * Delete an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteAssistantAsync($assistant_id)
    {
        return $this->deleteAssistantAsyncWithHttpInfo($assistant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssistantAsyncWithHttpInfo
     *
     * Delete an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteAssistantAsyncWithHttpInfo($assistant_id)
    {
        $returnType = '\JeedomOpenAI\Model\DeleteAssistantResponse';
        $request = $this->deleteAssistantRequest($assistant_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAssistant'
     *
     * @param  string $assistant_id The ID of the assistant to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteAssistantRequest($assistant_id)
    {
        // verify the required parameter 'assistant_id' is set
        if ($assistant_id === null || (is_array($assistant_id) && count($assistant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assistant_id when calling deleteAssistant'
            );
        }

        $resourcePath = '/assistants/{assistant_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($assistant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assistant_id' . '}',
                ObjectSerializer::toPathValue($assistant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteMessage
     *
     * Deletes a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\DeleteMessageResponse
     */
    public function deleteMessage($thread_id, $message_id)
    {
        list($response) = $this->deleteMessageWithHttpInfo($thread_id, $message_id);
        return $response;
    }

    /**
     * Operation deleteMessageWithHttpInfo
     *
     * Deletes a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\DeleteMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMessageWithHttpInfo($thread_id, $message_id)
    {
        $request = $this->deleteMessageRequest($thread_id, $message_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\DeleteMessageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\DeleteMessageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\DeleteMessageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteMessageAsync
     *
     * Deletes a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteMessageAsync($thread_id, $message_id)
    {
        return $this->deleteMessageAsyncWithHttpInfo($thread_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMessageAsyncWithHttpInfo
     *
     * Deletes a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteMessageAsyncWithHttpInfo($thread_id, $message_id)
    {
        $returnType = '\JeedomOpenAI\Model\DeleteMessageResponse';
        $request = $this->deleteMessageRequest($thread_id, $message_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMessage'
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteMessageRequest($thread_id, $message_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling deleteMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling deleteMessage'
            );
        }

        $resourcePath = '/threads/{thread_id}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteThread
     *
     * Delete a thread.
     *
     * @param  string $thread_id The ID of the thread to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\DeleteThreadResponse
     */
    public function deleteThread($thread_id)
    {
        list($response) = $this->deleteThreadWithHttpInfo($thread_id);
        return $response;
    }

    /**
     * Operation deleteThreadWithHttpInfo
     *
     * Delete a thread.
     *
     * @param  string $thread_id The ID of the thread to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\DeleteThreadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteThreadWithHttpInfo($thread_id)
    {
        $request = $this->deleteThreadRequest($thread_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\DeleteThreadResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\DeleteThreadResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\DeleteThreadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteThreadAsync
     *
     * Delete a thread.
     *
     * @param  string $thread_id The ID of the thread to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteThreadAsync($thread_id)
    {
        return $this->deleteThreadAsyncWithHttpInfo($thread_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteThreadAsyncWithHttpInfo
     *
     * Delete a thread.
     *
     * @param  string $thread_id The ID of the thread to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteThreadAsyncWithHttpInfo($thread_id)
    {
        $returnType = '\JeedomOpenAI\Model\DeleteThreadResponse';
        $request = $this->deleteThreadRequest($thread_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteThread'
     *
     * @param  string $thread_id The ID of the thread to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteThreadRequest($thread_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling deleteThread'
            );
        }

        $resourcePath = '/threads/{thread_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation getAssistant
     *
     * Retrieves an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\AssistantObject
     */
    public function getAssistant($assistant_id)
    {
        list($response) = $this->getAssistantWithHttpInfo($assistant_id);
        return $response;
    }

    /**
     * Operation getAssistantWithHttpInfo
     *
     * Retrieves an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\AssistantObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssistantWithHttpInfo($assistant_id)
    {
        $request = $this->getAssistantRequest($assistant_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\AssistantObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\AssistantObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\AssistantObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssistantAsync
     *
     * Retrieves an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAssistantAsync($assistant_id)
    {
        return $this->getAssistantAsyncWithHttpInfo($assistant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssistantAsyncWithHttpInfo
     *
     * Retrieves an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getAssistantAsyncWithHttpInfo($assistant_id)
    {
        $returnType = '\JeedomOpenAI\Model\AssistantObject';
        $request = $this->getAssistantRequest($assistant_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssistant'
     *
     * @param  string $assistant_id The ID of the assistant to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getAssistantRequest($assistant_id)
    {
        // verify the required parameter 'assistant_id' is set
        if ($assistant_id === null || (is_array($assistant_id) && count($assistant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assistant_id when calling getAssistant'
            );
        }

        $resourcePath = '/assistants/{assistant_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($assistant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assistant_id' . '}',
                ObjectSerializer::toPathValue($assistant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getMessage
     *
     * Retrieve a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param  string $message_id The ID of the message to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\MessageObject
     */
    public function getMessage($thread_id, $message_id)
    {
        list($response) = $this->getMessageWithHttpInfo($thread_id, $message_id);
        return $response;
    }

    /**
     * Operation getMessageWithHttpInfo
     *
     * Retrieve a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param  string $message_id The ID of the message to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\MessageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageWithHttpInfo($thread_id, $message_id)
    {
        $request = $this->getMessageRequest($thread_id, $message_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\MessageObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\MessageObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\MessageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getMessageAsync
     *
     * Retrieve a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param  string $message_id The ID of the message to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getMessageAsync($thread_id, $message_id)
    {
        return $this->getMessageAsyncWithHttpInfo($thread_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessageAsyncWithHttpInfo
     *
     * Retrieve a message.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param  string $message_id The ID of the message to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getMessageAsyncWithHttpInfo($thread_id, $message_id)
    {
        $returnType = '\JeedomOpenAI\Model\MessageObject';
        $request = $this->getMessageRequest($thread_id, $message_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessage'
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs. (required)
     * @param  string $message_id The ID of the message to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getMessageRequest($thread_id, $message_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling getMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling getMessage'
            );
        }

        $resourcePath = '/threads/{thread_id}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getRun
     *
     * Retrieves a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunObject
     */
    public function getRun($thread_id, $run_id)
    {
        list($response) = $this->getRunWithHttpInfo($thread_id, $run_id);
        return $response;
    }

    /**
     * Operation getRunWithHttpInfo
     *
     * Retrieves a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRunWithHttpInfo($thread_id, $run_id)
    {
        $request = $this->getRunRequest($thread_id, $run_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRunAsync
     *
     * Retrieves a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getRunAsync($thread_id, $run_id)
    {
        return $this->getRunAsyncWithHttpInfo($thread_id, $run_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRunAsyncWithHttpInfo
     *
     * Retrieves a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getRunAsyncWithHttpInfo($thread_id, $run_id)
    {
        $returnType = '\JeedomOpenAI\Model\RunObject';
        $request = $this->getRunRequest($thread_id, $run_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRun'
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getRunRequest($thread_id, $run_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling getRun'
            );
        }
        // verify the required parameter 'run_id' is set
        if ($run_id === null || (is_array($run_id) && count($run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_id when calling getRun'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs/{run_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'run_id' . '}',
                ObjectSerializer::toPathValue($run_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getRunStep
     *
     * Retrieves a run step.
     *
     * @param  string $thread_id The ID of the thread to which the run and run step belongs. (required)
     * @param  string $run_id The ID of the run to which the run step belongs. (required)
     * @param  string $step_id The ID of the run step to retrieve. (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunStepObject
     */
    public function getRunStep($thread_id, $run_id, $step_id, $include = null)
    {
        list($response) = $this->getRunStepWithHttpInfo($thread_id, $run_id, $step_id, $include);
        return $response;
    }

    /**
     * Operation getRunStepWithHttpInfo
     *
     * Retrieves a run step.
     *
     * @param  string $thread_id The ID of the thread to which the run and run step belongs. (required)
     * @param  string $run_id The ID of the run to which the run step belongs. (required)
     * @param  string $step_id The ID of the run step to retrieve. (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunStepObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRunStepWithHttpInfo($thread_id, $run_id, $step_id, $include = null)
    {
        $request = $this->getRunStepRequest($thread_id, $run_id, $step_id, $include);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunStepObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunStepObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunStepObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRunStepAsync
     *
     * Retrieves a run step.
     *
     * @param  string $thread_id The ID of the thread to which the run and run step belongs. (required)
     * @param  string $run_id The ID of the run to which the run step belongs. (required)
     * @param  string $step_id The ID of the run step to retrieve. (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getRunStepAsync($thread_id, $run_id, $step_id, $include = null)
    {
        return $this->getRunStepAsyncWithHttpInfo($thread_id, $run_id, $step_id, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRunStepAsyncWithHttpInfo
     *
     * Retrieves a run step.
     *
     * @param  string $thread_id The ID of the thread to which the run and run step belongs. (required)
     * @param  string $run_id The ID of the run to which the run step belongs. (required)
     * @param  string $step_id The ID of the run step to retrieve. (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getRunStepAsyncWithHttpInfo($thread_id, $run_id, $step_id, $include = null)
    {
        $returnType = '\JeedomOpenAI\Model\RunStepObject';
        $request = $this->getRunStepRequest($thread_id, $run_id, $step_id, $include);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRunStep'
     *
     * @param  string $thread_id The ID of the thread to which the run and run step belongs. (required)
     * @param  string $run_id The ID of the run to which the run step belongs. (required)
     * @param  string $step_id The ID of the run step to retrieve. (required)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getRunStepRequest($thread_id, $run_id, $step_id, $include = null)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling getRunStep'
            );
        }
        // verify the required parameter 'run_id' is set
        if ($run_id === null || (is_array($run_id) && count($run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_id when calling getRunStep'
            );
        }
        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling getRunStep'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs/{run_id}/steps/{step_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include[]'] = $include;
            }
        }


        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'run_id' . '}',
                ObjectSerializer::toPathValue($run_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'step_id' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getThread
     *
     * Retrieves a thread.
     *
     * @param  string $thread_id The ID of the thread to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ThreadObject
     */
    public function getThread($thread_id)
    {
        list($response) = $this->getThreadWithHttpInfo($thread_id);
        return $response;
    }

    /**
     * Operation getThreadWithHttpInfo
     *
     * Retrieves a thread.
     *
     * @param  string $thread_id The ID of the thread to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ThreadObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThreadWithHttpInfo($thread_id)
    {
        $request = $this->getThreadRequest($thread_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ThreadObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ThreadObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ThreadObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getThreadAsync
     *
     * Retrieves a thread.
     *
     * @param  string $thread_id The ID of the thread to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getThreadAsync($thread_id)
    {
        return $this->getThreadAsyncWithHttpInfo($thread_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThreadAsyncWithHttpInfo
     *
     * Retrieves a thread.
     *
     * @param  string $thread_id The ID of the thread to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getThreadAsyncWithHttpInfo($thread_id)
    {
        $returnType = '\JeedomOpenAI\Model\ThreadObject';
        $request = $this->getThreadRequest($thread_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThread'
     *
     * @param  string $thread_id The ID of the thread to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getThreadRequest($thread_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling getThread'
            );
        }

        $resourcePath = '/threads/{thread_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listAssistants
     *
     * Returns a list of assistants.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListAssistantsResponse
     */
    public function listAssistants($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        list($response) = $this->listAssistantsWithHttpInfo($limit, $order, $after, $before);
        return $response;
    }

    /**
     * Operation listAssistantsWithHttpInfo
     *
     * Returns a list of assistants.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListAssistantsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssistantsWithHttpInfo($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        $request = $this->listAssistantsRequest($limit, $order, $after, $before);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListAssistantsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListAssistantsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListAssistantsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listAssistantsAsync
     *
     * Returns a list of assistants.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listAssistantsAsync($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        return $this->listAssistantsAsyncWithHttpInfo($limit, $order, $after, $before)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAssistantsAsyncWithHttpInfo
     *
     * Returns a list of assistants.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listAssistantsAsyncWithHttpInfo($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListAssistantsResponse';
        $request = $this->listAssistantsRequest($limit, $order, $after, $before);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAssistants'
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listAssistantsRequest($limit = 20, $order = 'desc', $after = null, $before = null)
    {

        $resourcePath = '/assistants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listMessages
     *
     * Returns a list of messages for a given thread.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $run_id Filter messages by the run ID that generated them. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListMessagesResponse
     */
    public function listMessages($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null, $run_id = null)
    {
        list($response) = $this->listMessagesWithHttpInfo($thread_id, $limit, $order, $after, $before, $run_id);
        return $response;
    }

    /**
     * Operation listMessagesWithHttpInfo
     *
     * Returns a list of messages for a given thread.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $run_id Filter messages by the run ID that generated them. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListMessagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMessagesWithHttpInfo($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null, $run_id = null)
    {
        $request = $this->listMessagesRequest($thread_id, $limit, $order, $after, $before, $run_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListMessagesResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListMessagesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListMessagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listMessagesAsync
     *
     * Returns a list of messages for a given thread.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $run_id Filter messages by the run ID that generated them. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listMessagesAsync($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null, $run_id = null)
    {
        return $this->listMessagesAsyncWithHttpInfo($thread_id, $limit, $order, $after, $before, $run_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMessagesAsyncWithHttpInfo
     *
     * Returns a list of messages for a given thread.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $run_id Filter messages by the run ID that generated them. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listMessagesAsyncWithHttpInfo($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null, $run_id = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListMessagesResponse';
        $request = $this->listMessagesRequest($thread_id, $limit, $order, $after, $before, $run_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMessages'
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $run_id Filter messages by the run ID that generated them. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listMessagesRequest($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null, $run_id = null)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling listMessages'
            );
        }

        $resourcePath = '/threads/{thread_id}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($run_id !== null) {
            if('form' === 'form' && is_array($run_id)) {
                foreach($run_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['run_id'] = $run_id;
            }
        }


        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listRunSteps
     *
     * Returns a list of run steps belonging to a run.
     *
     * @param  string $thread_id The ID of the thread the run and run steps belong to. (required)
     * @param  string $run_id The ID of the run the run steps belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListRunStepsResponse
     */
    public function listRunSteps($thread_id, $run_id, $limit = 20, $order = 'desc', $after = null, $before = null, $include = null)
    {
        list($response) = $this->listRunStepsWithHttpInfo($thread_id, $run_id, $limit, $order, $after, $before, $include);
        return $response;
    }

    /**
     * Operation listRunStepsWithHttpInfo
     *
     * Returns a list of run steps belonging to a run.
     *
     * @param  string $thread_id The ID of the thread the run and run steps belong to. (required)
     * @param  string $run_id The ID of the run the run steps belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListRunStepsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRunStepsWithHttpInfo($thread_id, $run_id, $limit = 20, $order = 'desc', $after = null, $before = null, $include = null)
    {
        $request = $this->listRunStepsRequest($thread_id, $run_id, $limit, $order, $after, $before, $include);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListRunStepsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListRunStepsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListRunStepsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listRunStepsAsync
     *
     * Returns a list of run steps belonging to a run.
     *
     * @param  string $thread_id The ID of the thread the run and run steps belong to. (required)
     * @param  string $run_id The ID of the run the run steps belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listRunStepsAsync($thread_id, $run_id, $limit = 20, $order = 'desc', $after = null, $before = null, $include = null)
    {
        return $this->listRunStepsAsyncWithHttpInfo($thread_id, $run_id, $limit, $order, $after, $before, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRunStepsAsyncWithHttpInfo
     *
     * Returns a list of run steps belonging to a run.
     *
     * @param  string $thread_id The ID of the thread the run and run steps belong to. (required)
     * @param  string $run_id The ID of the run the run steps belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listRunStepsAsyncWithHttpInfo($thread_id, $run_id, $limit = 20, $order = 'desc', $after = null, $before = null, $include = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListRunStepsResponse';
        $request = $this->listRunStepsRequest($thread_id, $run_id, $limit, $order, $after, $before, $include);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRunSteps'
     *
     * @param  string $thread_id The ID of the thread the run and run steps belong to. (required)
     * @param  string $run_id The ID of the run the run steps belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string[] $include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listRunStepsRequest($thread_id, $run_id, $limit = 20, $order = 'desc', $after = null, $before = null, $include = null)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling listRunSteps'
            );
        }
        // verify the required parameter 'run_id' is set
        if ($run_id === null || (is_array($run_id) && count($run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_id when calling listRunSteps'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs/{run_id}/steps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include[]'] = $include;
            }
        }


        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'run_id' . '}',
                ObjectSerializer::toPathValue($run_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listRuns
     *
     * Returns a list of runs belonging to a thread.
     *
     * @param  string $thread_id The ID of the thread the run belongs to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListRunsResponse
     */
    public function listRuns($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null)
    {
        list($response) = $this->listRunsWithHttpInfo($thread_id, $limit, $order, $after, $before);
        return $response;
    }

    /**
     * Operation listRunsWithHttpInfo
     *
     * Returns a list of runs belonging to a thread.
     *
     * @param  string $thread_id The ID of the thread the run belongs to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListRunsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRunsWithHttpInfo($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null)
    {
        $request = $this->listRunsRequest($thread_id, $limit, $order, $after, $before);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListRunsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListRunsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListRunsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listRunsAsync
     *
     * Returns a list of runs belonging to a thread.
     *
     * @param  string $thread_id The ID of the thread the run belongs to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listRunsAsync($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null)
    {
        return $this->listRunsAsyncWithHttpInfo($thread_id, $limit, $order, $after, $before)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRunsAsyncWithHttpInfo
     *
     * Returns a list of runs belonging to a thread.
     *
     * @param  string $thread_id The ID of the thread the run belongs to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listRunsAsyncWithHttpInfo($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListRunsResponse';
        $request = $this->listRunsRequest($thread_id, $limit, $order, $after, $before);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRuns'
     *
     * @param  string $thread_id The ID of the thread the run belongs to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listRunsRequest($thread_id, $limit = 20, $order = 'desc', $after = null, $before = null)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling listRuns'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }


        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation modifyAssistant
     *
     * Modifies an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyAssistantRequest $modify_assistant_request modify_assistant_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\AssistantObject
     */
    public function modifyAssistant($assistant_id, $modify_assistant_request)
    {
        list($response) = $this->modifyAssistantWithHttpInfo($assistant_id, $modify_assistant_request);
        return $response;
    }

    /**
     * Operation modifyAssistantWithHttpInfo
     *
     * Modifies an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyAssistantRequest $modify_assistant_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\AssistantObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyAssistantWithHttpInfo($assistant_id, $modify_assistant_request)
    {
        $request = $this->modifyAssistantRequest($assistant_id, $modify_assistant_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\AssistantObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\AssistantObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\AssistantObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation modifyAssistantAsync
     *
     * Modifies an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyAssistantRequest $modify_assistant_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyAssistantAsync($assistant_id, $modify_assistant_request)
    {
        return $this->modifyAssistantAsyncWithHttpInfo($assistant_id, $modify_assistant_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyAssistantAsyncWithHttpInfo
     *
     * Modifies an assistant.
     *
     * @param  string $assistant_id The ID of the assistant to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyAssistantRequest $modify_assistant_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyAssistantAsyncWithHttpInfo($assistant_id, $modify_assistant_request)
    {
        $returnType = '\JeedomOpenAI\Model\AssistantObject';
        $request = $this->modifyAssistantRequest($assistant_id, $modify_assistant_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyAssistant'
     *
     * @param  string $assistant_id The ID of the assistant to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyAssistantRequest $modify_assistant_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function modifyAssistantRequest($assistant_id, $modify_assistant_request)
    {
        // verify the required parameter 'assistant_id' is set
        if ($assistant_id === null || (is_array($assistant_id) && count($assistant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assistant_id when calling modifyAssistant'
            );
        }
        // verify the required parameter 'modify_assistant_request' is set
        if ($modify_assistant_request === null || (is_array($modify_assistant_request) && count($modify_assistant_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modify_assistant_request when calling modifyAssistant'
            );
        }

        $resourcePath = '/assistants/{assistant_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($assistant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assistant_id' . '}',
                ObjectSerializer::toPathValue($assistant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($modify_assistant_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modify_assistant_request));
            } else {
                $httpBody = $modify_assistant_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation modifyMessage
     *
     * Modifies a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyMessageRequest $modify_message_request modify_message_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\MessageObject
     */
    public function modifyMessage($thread_id, $message_id, $modify_message_request)
    {
        list($response) = $this->modifyMessageWithHttpInfo($thread_id, $message_id, $modify_message_request);
        return $response;
    }

    /**
     * Operation modifyMessageWithHttpInfo
     *
     * Modifies a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyMessageRequest $modify_message_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\MessageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyMessageWithHttpInfo($thread_id, $message_id, $modify_message_request)
    {
        $request = $this->modifyMessageRequest($thread_id, $message_id, $modify_message_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\MessageObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\MessageObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\MessageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation modifyMessageAsync
     *
     * Modifies a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyMessageRequest $modify_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyMessageAsync($thread_id, $message_id, $modify_message_request)
    {
        return $this->modifyMessageAsyncWithHttpInfo($thread_id, $message_id, $modify_message_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyMessageAsyncWithHttpInfo
     *
     * Modifies a message.
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyMessageRequest $modify_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyMessageAsyncWithHttpInfo($thread_id, $message_id, $modify_message_request)
    {
        $returnType = '\JeedomOpenAI\Model\MessageObject';
        $request = $this->modifyMessageRequest($thread_id, $message_id, $modify_message_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyMessage'
     *
     * @param  string $thread_id The ID of the thread to which this message belongs. (required)
     * @param  string $message_id The ID of the message to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyMessageRequest $modify_message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function modifyMessageRequest($thread_id, $message_id, $modify_message_request)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling modifyMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling modifyMessage'
            );
        }
        // verify the required parameter 'modify_message_request' is set
        if ($modify_message_request === null || (is_array($modify_message_request) && count($modify_message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modify_message_request when calling modifyMessage'
            );
        }

        $resourcePath = '/threads/{thread_id}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'message_id' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($modify_message_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modify_message_request));
            } else {
                $httpBody = $modify_message_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation modifyRun
     *
     * Modifies a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyRunRequest $modify_run_request modify_run_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunObject
     */
    public function modifyRun($thread_id, $run_id, $modify_run_request)
    {
        list($response) = $this->modifyRunWithHttpInfo($thread_id, $run_id, $modify_run_request);
        return $response;
    }

    /**
     * Operation modifyRunWithHttpInfo
     *
     * Modifies a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyRunRequest $modify_run_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyRunWithHttpInfo($thread_id, $run_id, $modify_run_request)
    {
        $request = $this->modifyRunRequest($thread_id, $run_id, $modify_run_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation modifyRunAsync
     *
     * Modifies a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyRunRequest $modify_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyRunAsync($thread_id, $run_id, $modify_run_request)
    {
        return $this->modifyRunAsyncWithHttpInfo($thread_id, $run_id, $modify_run_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyRunAsyncWithHttpInfo
     *
     * Modifies a run.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyRunRequest $modify_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyRunAsyncWithHttpInfo($thread_id, $run_id, $modify_run_request)
    {
        $returnType = '\JeedomOpenAI\Model\RunObject';
        $request = $this->modifyRunRequest($thread_id, $run_id, $modify_run_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyRun'
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) that was run. (required)
     * @param  string $run_id The ID of the run to modify. (required)
     * @param  \JeedomOpenAI\Model\ModifyRunRequest $modify_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function modifyRunRequest($thread_id, $run_id, $modify_run_request)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling modifyRun'
            );
        }
        // verify the required parameter 'run_id' is set
        if ($run_id === null || (is_array($run_id) && count($run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_id when calling modifyRun'
            );
        }
        // verify the required parameter 'modify_run_request' is set
        if ($modify_run_request === null || (is_array($modify_run_request) && count($modify_run_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modify_run_request when calling modifyRun'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs/{run_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'run_id' . '}',
                ObjectSerializer::toPathValue($run_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($modify_run_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modify_run_request));
            } else {
                $httpBody = $modify_run_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation modifyThread
     *
     * Modifies a thread.
     *
     * @param  string $thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param  \JeedomOpenAI\Model\ModifyThreadRequest $modify_thread_request modify_thread_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ThreadObject
     */
    public function modifyThread($thread_id, $modify_thread_request)
    {
        list($response) = $this->modifyThreadWithHttpInfo($thread_id, $modify_thread_request);
        return $response;
    }

    /**
     * Operation modifyThreadWithHttpInfo
     *
     * Modifies a thread.
     *
     * @param  string $thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param  \JeedomOpenAI\Model\ModifyThreadRequest $modify_thread_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ThreadObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyThreadWithHttpInfo($thread_id, $modify_thread_request)
    {
        $request = $this->modifyThreadRequest($thread_id, $modify_thread_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ThreadObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ThreadObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ThreadObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation modifyThreadAsync
     *
     * Modifies a thread.
     *
     * @param  string $thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param  \JeedomOpenAI\Model\ModifyThreadRequest $modify_thread_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyThreadAsync($thread_id, $modify_thread_request)
    {
        return $this->modifyThreadAsyncWithHttpInfo($thread_id, $modify_thread_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyThreadAsyncWithHttpInfo
     *
     * Modifies a thread.
     *
     * @param  string $thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param  \JeedomOpenAI\Model\ModifyThreadRequest $modify_thread_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyThreadAsyncWithHttpInfo($thread_id, $modify_thread_request)
    {
        $returnType = '\JeedomOpenAI\Model\ThreadObject';
        $request = $this->modifyThreadRequest($thread_id, $modify_thread_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyThread'
     *
     * @param  string $thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. (required)
     * @param  \JeedomOpenAI\Model\ModifyThreadRequest $modify_thread_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function modifyThreadRequest($thread_id, $modify_thread_request)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling modifyThread'
            );
        }
        // verify the required parameter 'modify_thread_request' is set
        if ($modify_thread_request === null || (is_array($modify_thread_request) && count($modify_thread_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modify_thread_request when calling modifyThread'
            );
        }

        $resourcePath = '/threads/{thread_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($modify_thread_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modify_thread_request));
            } else {
                $httpBody = $modify_thread_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation submitToolOuputsToRun
     *
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param  string $run_id The ID of the run that requires the tool output submission. (required)
     * @param  \JeedomOpenAI\Model\SubmitToolOutputsRunRequest $submit_tool_outputs_run_request submit_tool_outputs_run_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\RunObject
     */
    public function submitToolOuputsToRun($thread_id, $run_id, $submit_tool_outputs_run_request)
    {
        list($response) = $this->submitToolOuputsToRunWithHttpInfo($thread_id, $run_id, $submit_tool_outputs_run_request);
        return $response;
    }

    /**
     * Operation submitToolOuputsToRunWithHttpInfo
     *
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param  string $run_id The ID of the run that requires the tool output submission. (required)
     * @param  \JeedomOpenAI\Model\SubmitToolOutputsRunRequest $submit_tool_outputs_run_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\RunObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitToolOuputsToRunWithHttpInfo($thread_id, $run_id, $submit_tool_outputs_run_request)
    {
        $request = $this->submitToolOuputsToRunRequest($thread_id, $run_id, $submit_tool_outputs_run_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\RunObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\RunObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\RunObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation submitToolOuputsToRunAsync
     *
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param  string $run_id The ID of the run that requires the tool output submission. (required)
     * @param  \JeedomOpenAI\Model\SubmitToolOutputsRunRequest $submit_tool_outputs_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function submitToolOuputsToRunAsync($thread_id, $run_id, $submit_tool_outputs_run_request)
    {
        return $this->submitToolOuputsToRunAsyncWithHttpInfo($thread_id, $run_id, $submit_tool_outputs_run_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitToolOuputsToRunAsyncWithHttpInfo
     *
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request.
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param  string $run_id The ID of the run that requires the tool output submission. (required)
     * @param  \JeedomOpenAI\Model\SubmitToolOutputsRunRequest $submit_tool_outputs_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function submitToolOuputsToRunAsyncWithHttpInfo($thread_id, $run_id, $submit_tool_outputs_run_request)
    {
        $returnType = '\JeedomOpenAI\Model\RunObject';
        $request = $this->submitToolOuputsToRunRequest($thread_id, $run_id, $submit_tool_outputs_run_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitToolOuputsToRun'
     *
     * @param  string $thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs. (required)
     * @param  string $run_id The ID of the run that requires the tool output submission. (required)
     * @param  \JeedomOpenAI\Model\SubmitToolOutputsRunRequest $submit_tool_outputs_run_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function submitToolOuputsToRunRequest($thread_id, $run_id, $submit_tool_outputs_run_request)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null || (is_array($thread_id) && count($thread_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_id when calling submitToolOuputsToRun'
            );
        }
        // verify the required parameter 'run_id' is set
        if ($run_id === null || (is_array($run_id) && count($run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_id when calling submitToolOuputsToRun'
            );
        }
        // verify the required parameter 'submit_tool_outputs_run_request' is set
        if ($submit_tool_outputs_run_request === null || (is_array($submit_tool_outputs_run_request) && count($submit_tool_outputs_run_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_tool_outputs_run_request when calling submitToolOuputsToRun'
            );
        }

        $resourcePath = '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thread_id' . '}',
                ObjectSerializer::toPathValue($thread_id),
                $resourcePath
            );
        }
        // path params
        if ($run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'run_id' . '}',
                ObjectSerializer::toPathValue($run_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($submit_tool_outputs_run_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($submit_tool_outputs_run_request));
            } else {
                $httpBody = $submit_tool_outputs_run_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
