<?php
/**
 * UsageApi
 * PHP version 7.2
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use JeedomOpenAI\ApiException;
use JeedomOpenAI\Configuration;
use JeedomOpenAI\DebugPlugin;
use JeedomOpenAI\HeaderSelector;
use JeedomOpenAI\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * UsageApi Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsageApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.openai.com/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation usageAudioSpeeches
     *
     * Get audio speeches usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageAudioSpeeches($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageAudioSpeechesWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageAudioSpeechesWithHttpInfo
     *
     * Get audio speeches usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageAudioSpeechesWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageAudioSpeechesRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageAudioSpeechesAsync
     *
     * Get audio speeches usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageAudioSpeechesAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageAudioSpeechesAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageAudioSpeechesAsyncWithHttpInfo
     *
     * Get audio speeches usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageAudioSpeechesAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageAudioSpeechesRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageAudioSpeeches'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageAudioSpeechesRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageAudioSpeeches'
            );
        }

        $resourcePath = '/organization/usage/audio_speeches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($api_key_ids !== null) {
            if('form' === 'form' && is_array($api_key_ids)) {
                foreach($api_key_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['api_key_ids'] = $api_key_ids;
            }
        }
        // query params
        if ($models !== null) {
            if('form' === 'form' && is_array($models)) {
                foreach($models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['models'] = $models;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageAudioTranscriptions
     *
     * Get audio transcriptions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageAudioTranscriptions($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageAudioTranscriptionsWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageAudioTranscriptionsWithHttpInfo
     *
     * Get audio transcriptions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageAudioTranscriptionsWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageAudioTranscriptionsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageAudioTranscriptionsAsync
     *
     * Get audio transcriptions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageAudioTranscriptionsAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageAudioTranscriptionsAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageAudioTranscriptionsAsyncWithHttpInfo
     *
     * Get audio transcriptions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageAudioTranscriptionsAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageAudioTranscriptionsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageAudioTranscriptions'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageAudioTranscriptionsRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageAudioTranscriptions'
            );
        }

        $resourcePath = '/organization/usage/audio_transcriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($api_key_ids !== null) {
            if('form' === 'form' && is_array($api_key_ids)) {
                foreach($api_key_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['api_key_ids'] = $api_key_ids;
            }
        }
        // query params
        if ($models !== null) {
            if('form' === 'form' && is_array($models)) {
                foreach($models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['models'] = $models;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageCodeInterpreterSessions
     *
     * Get code interpreter sessions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageCodeInterpreterSessions($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageCodeInterpreterSessionsWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageCodeInterpreterSessionsWithHttpInfo
     *
     * Get code interpreter sessions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageCodeInterpreterSessionsWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageCodeInterpreterSessionsRequest($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageCodeInterpreterSessionsAsync
     *
     * Get code interpreter sessions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageCodeInterpreterSessionsAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageCodeInterpreterSessionsAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageCodeInterpreterSessionsAsyncWithHttpInfo
     *
     * Get code interpreter sessions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageCodeInterpreterSessionsAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageCodeInterpreterSessionsRequest($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageCodeInterpreterSessions'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageCodeInterpreterSessionsRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageCodeInterpreterSessions'
            );
        }

        $resourcePath = '/organization/usage/code_interpreter_sessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageCompletions
     *
     * Get completions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  bool $batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageCompletions($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $batch = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageCompletionsWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $batch, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageCompletionsWithHttpInfo
     *
     * Get completions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  bool $batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageCompletionsWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $batch = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageCompletionsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $batch, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageCompletionsAsync
     *
     * Get completions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  bool $batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageCompletionsAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $batch = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageCompletionsAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $batch, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageCompletionsAsyncWithHttpInfo
     *
     * Get completions usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  bool $batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageCompletionsAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $batch = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageCompletionsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $batch, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageCompletions'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  bool $batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageCompletionsRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $batch = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageCompletions'
            );
        }

        $resourcePath = '/organization/usage/completions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($api_key_ids !== null) {
            if('form' === 'form' && is_array($api_key_ids)) {
                foreach($api_key_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['api_key_ids'] = $api_key_ids;
            }
        }
        // query params
        if ($models !== null) {
            if('form' === 'form' && is_array($models)) {
                foreach($models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['models'] = $models;
            }
        }
        // query params
        if ($batch !== null) {
            if('form' === 'form' && is_array($batch)) {
                foreach($batch as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batch'] = $batch;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageCosts
     *
     * Get costs details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only costs for these projects. (optional)
     * @param  string[] $group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
     * @param  int $limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageCosts($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = 7, $page = null)
    {
        list($response) = $this->usageCostsWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageCostsWithHttpInfo
     *
     * Get costs details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only costs for these projects. (optional)
     * @param  string[] $group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
     * @param  int $limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageCostsWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = 7, $page = null)
    {
        $request = $this->usageCostsRequest($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageCostsAsync
     *
     * Get costs details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only costs for these projects. (optional)
     * @param  string[] $group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
     * @param  int $limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageCostsAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = 7, $page = null)
    {
        return $this->usageCostsAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageCostsAsyncWithHttpInfo
     *
     * Get costs details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only costs for these projects. (optional)
     * @param  string[] $group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
     * @param  int $limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageCostsAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = 7, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageCostsRequest($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageCosts'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only costs for these projects. (optional)
     * @param  string[] $group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them. (optional)
     * @param  int $limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageCostsRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = 7, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageCosts'
            );
        }

        $resourcePath = '/organization/costs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageEmbeddings
     *
     * Get embeddings usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageEmbeddings($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageEmbeddingsWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageEmbeddingsWithHttpInfo
     *
     * Get embeddings usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageEmbeddingsWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageEmbeddingsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageEmbeddingsAsync
     *
     * Get embeddings usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageEmbeddingsAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageEmbeddingsAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageEmbeddingsAsyncWithHttpInfo
     *
     * Get embeddings usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageEmbeddingsAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageEmbeddingsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageEmbeddings'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageEmbeddingsRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageEmbeddings'
            );
        }

        $resourcePath = '/organization/usage/embeddings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($api_key_ids !== null) {
            if('form' === 'form' && is_array($api_key_ids)) {
                foreach($api_key_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['api_key_ids'] = $api_key_ids;
            }
        }
        // query params
        if ($models !== null) {
            if('form' === 'form' && is_array($models)) {
                foreach($models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['models'] = $models;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageImages
     *
     * Get images usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param  string[] $sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageImages($start_time, $end_time = null, $bucket_width = '1d', $sources = null, $sizes = null, $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageImagesWithHttpInfo($start_time, $end_time, $bucket_width, $sources, $sizes, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageImagesWithHttpInfo
     *
     * Get images usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param  string[] $sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageImagesWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $sources = null, $sizes = null, $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageImagesRequest($start_time, $end_time, $bucket_width, $sources, $sizes, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageImagesAsync
     *
     * Get images usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param  string[] $sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageImagesAsync($start_time, $end_time = null, $bucket_width = '1d', $sources = null, $sizes = null, $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageImagesAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $sources, $sizes, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageImagesAsyncWithHttpInfo
     *
     * Get images usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param  string[] $sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageImagesAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $sources = null, $sizes = null, $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageImagesRequest($start_time, $end_time, $bucket_width, $sources, $sizes, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageImages'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param  string[] $sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them. (optional)
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageImagesRequest($start_time, $end_time = null, $bucket_width = '1d', $sources = null, $sizes = null, $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageImages'
            );
        }

        $resourcePath = '/organization/usage/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($sources !== null) {
            if('form' === 'form' && is_array($sources)) {
                foreach($sources as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sources'] = $sources;
            }
        }
        // query params
        if ($sizes !== null) {
            if('form' === 'form' && is_array($sizes)) {
                foreach($sizes as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sizes'] = $sizes;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($api_key_ids !== null) {
            if('form' === 'form' && is_array($api_key_ids)) {
                foreach($api_key_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['api_key_ids'] = $api_key_ids;
            }
        }
        // query params
        if ($models !== null) {
            if('form' === 'form' && is_array($models)) {
                foreach($models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['models'] = $models;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageModerations
     *
     * Get moderations usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageModerations($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageModerationsWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageModerationsWithHttpInfo
     *
     * Get moderations usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageModerationsWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageModerationsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageModerationsAsync
     *
     * Get moderations usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageModerationsAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageModerationsAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageModerationsAsyncWithHttpInfo
     *
     * Get moderations usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageModerationsAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageModerationsRequest($start_time, $end_time, $bucket_width, $project_ids, $user_ids, $api_key_ids, $models, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageModerations'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $user_ids Return only usage for these users. (optional)
     * @param  string[] $api_key_ids Return only usage for these API keys. (optional)
     * @param  string[] $models Return only usage for these models. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageModerationsRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $user_ids = null, $api_key_ids = null, $models = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageModerations'
            );
        }

        $resourcePath = '/organization/usage/moderations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($user_ids !== null) {
            if('form' === 'form' && is_array($user_ids)) {
                foreach($user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_ids'] = $user_ids;
            }
        }
        // query params
        if ($api_key_ids !== null) {
            if('form' === 'form' && is_array($api_key_ids)) {
                foreach($api_key_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['api_key_ids'] = $api_key_ids;
            }
        }
        // query params
        if ($models !== null) {
            if('form' === 'form' && is_array($models)) {
                foreach($models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['models'] = $models;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation usageVectorStores
     *
     * Get vector stores usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\UsageResponse
     */
    public function usageVectorStores($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        list($response) = $this->usageVectorStoresWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);
        return $response;
    }

    /**
     * Operation usageVectorStoresWithHttpInfo
     *
     * Get vector stores usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\UsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageVectorStoresWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        $request = $this->usageVectorStoresRequest($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\UsageResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\UsageResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\UsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation usageVectorStoresAsync
     *
     * Get vector stores usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageVectorStoresAsync($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        return $this->usageVectorStoresAsyncWithHttpInfo($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageVectorStoresAsyncWithHttpInfo
     *
     * Get vector stores usage details for the organization.
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function usageVectorStoresAsyncWithHttpInfo($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        $returnType = '\JeedomOpenAI\Model\UsageResponse';
        $request = $this->usageVectorStoresRequest($start_time, $end_time, $bucket_width, $project_ids, $group_by, $limit, $page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageVectorStores'
     *
     * @param  int $start_time Start time (Unix seconds) of the query time range, inclusive. (required)
     * @param  int $end_time End time (Unix seconds) of the query time range, exclusive. (optional)
     * @param  string $bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (optional, default to '1d')
     * @param  string[] $project_ids Return only usage for these projects. (optional)
     * @param  string[] $group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;. (optional)
     * @param  int $limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param  string $page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function usageVectorStoresRequest($start_time, $end_time = null, $bucket_width = '1d', $project_ids = null, $group_by = null, $limit = null, $page = null)
    {
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling usageVectorStores'
            );
        }

        $resourcePath = '/organization/usage/vector_stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($bucket_width !== null) {
            if('form' === 'form' && is_array($bucket_width)) {
                foreach($bucket_width as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bucket_width'] = $bucket_width;
            }
        }
        // query params
        if ($project_ids !== null) {
            if('form' === 'form' && is_array($project_ids)) {
                foreach($project_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['project_ids'] = $project_ids;
            }
        }
        // query params
        if ($group_by !== null) {
            if('form' === 'form' && is_array($group_by)) {
                foreach($group_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group_by'] = $group_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
