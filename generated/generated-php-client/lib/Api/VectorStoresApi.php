<?php
/**
 * VectorStoresApi
 * PHP version 7.2
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JeedomOpenAI\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use JeedomOpenAI\ApiException;
use JeedomOpenAI\Configuration;
use JeedomOpenAI\DebugPlugin;
use JeedomOpenAI\HeaderSelector;
use JeedomOpenAI\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * VectorStoresApi Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VectorStoresApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://api.openai.com/v1');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelVectorStoreFileBatch
     *
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch to cancel. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileBatchObject
     */
    public function cancelVectorStoreFileBatch($vector_store_id, $batch_id)
    {
        list($response) = $this->cancelVectorStoreFileBatchWithHttpInfo($vector_store_id, $batch_id);
        return $response;
    }

    /**
     * Operation cancelVectorStoreFileBatchWithHttpInfo
     *
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch to cancel. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileBatchObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelVectorStoreFileBatchWithHttpInfo($vector_store_id, $batch_id)
    {
        $request = $this->cancelVectorStoreFileBatchRequest($vector_store_id, $batch_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelVectorStoreFileBatchAsync
     *
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function cancelVectorStoreFileBatchAsync($vector_store_id, $batch_id)
    {
        return $this->cancelVectorStoreFileBatchAsyncWithHttpInfo($vector_store_id, $batch_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelVectorStoreFileBatchAsyncWithHttpInfo
     *
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function cancelVectorStoreFileBatchAsyncWithHttpInfo($vector_store_id, $batch_id)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileBatchObject';
        $request = $this->cancelVectorStoreFileBatchRequest($vector_store_id, $batch_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelVectorStoreFileBatch'
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function cancelVectorStoreFileBatchRequest($vector_store_id, $batch_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling cancelVectorStoreFileBatch'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling cancelVectorStoreFileBatch'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_id' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createVectorStore
     *
     * Create a vector store.
     *
     * @param  \JeedomOpenAI\Model\CreateVectorStoreRequest $create_vector_store_request create_vector_store_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreObject
     */
    public function createVectorStore($create_vector_store_request)
    {
        list($response) = $this->createVectorStoreWithHttpInfo($create_vector_store_request);
        return $response;
    }

    /**
     * Operation createVectorStoreWithHttpInfo
     *
     * Create a vector store.
     *
     * @param  \JeedomOpenAI\Model\CreateVectorStoreRequest $create_vector_store_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVectorStoreWithHttpInfo($create_vector_store_request)
    {
        $request = $this->createVectorStoreRequest($create_vector_store_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createVectorStoreAsync
     *
     * Create a vector store.
     *
     * @param  \JeedomOpenAI\Model\CreateVectorStoreRequest $create_vector_store_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createVectorStoreAsync($create_vector_store_request)
    {
        return $this->createVectorStoreAsyncWithHttpInfo($create_vector_store_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVectorStoreAsyncWithHttpInfo
     *
     * Create a vector store.
     *
     * @param  \JeedomOpenAI\Model\CreateVectorStoreRequest $create_vector_store_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createVectorStoreAsyncWithHttpInfo($create_vector_store_request)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreObject';
        $request = $this->createVectorStoreRequest($create_vector_store_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVectorStore'
     *
     * @param  \JeedomOpenAI\Model\CreateVectorStoreRequest $create_vector_store_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createVectorStoreRequest($create_vector_store_request)
    {
        // verify the required parameter 'create_vector_store_request' is set
        if ($create_vector_store_request === null || (is_array($create_vector_store_request) && count($create_vector_store_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_vector_store_request when calling createVectorStore'
            );
        }

        $resourcePath = '/vector_stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_vector_store_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_vector_store_request));
            } else {
                $httpBody = $create_vector_store_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createVectorStoreFile
     *
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileRequest $create_vector_store_file_request create_vector_store_file_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileObject
     */
    public function createVectorStoreFile($vector_store_id, $create_vector_store_file_request)
    {
        list($response) = $this->createVectorStoreFileWithHttpInfo($vector_store_id, $create_vector_store_file_request);
        return $response;
    }

    /**
     * Operation createVectorStoreFileWithHttpInfo
     *
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileRequest $create_vector_store_file_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVectorStoreFileWithHttpInfo($vector_store_id, $create_vector_store_file_request)
    {
        $request = $this->createVectorStoreFileRequest($vector_store_id, $create_vector_store_file_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createVectorStoreFileAsync
     *
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileRequest $create_vector_store_file_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createVectorStoreFileAsync($vector_store_id, $create_vector_store_file_request)
    {
        return $this->createVectorStoreFileAsyncWithHttpInfo($vector_store_id, $create_vector_store_file_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVectorStoreFileAsyncWithHttpInfo
     *
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileRequest $create_vector_store_file_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createVectorStoreFileAsyncWithHttpInfo($vector_store_id, $create_vector_store_file_request)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileObject';
        $request = $this->createVectorStoreFileRequest($vector_store_id, $create_vector_store_file_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVectorStoreFile'
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileRequest $create_vector_store_file_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createVectorStoreFileRequest($vector_store_id, $create_vector_store_file_request)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling createVectorStoreFile'
            );
        }
        // verify the required parameter 'create_vector_store_file_request' is set
        if ($create_vector_store_file_request === null || (is_array($create_vector_store_file_request) && count($create_vector_store_file_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_vector_store_file_request when calling createVectorStoreFile'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_vector_store_file_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_vector_store_file_request));
            } else {
                $httpBody = $create_vector_store_file_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation createVectorStoreFileBatch
     *
     * Create a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File Batch. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileBatchRequest $create_vector_store_file_batch_request create_vector_store_file_batch_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileBatchObject
     */
    public function createVectorStoreFileBatch($vector_store_id, $create_vector_store_file_batch_request)
    {
        list($response) = $this->createVectorStoreFileBatchWithHttpInfo($vector_store_id, $create_vector_store_file_batch_request);
        return $response;
    }

    /**
     * Operation createVectorStoreFileBatchWithHttpInfo
     *
     * Create a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File Batch. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileBatchRequest $create_vector_store_file_batch_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileBatchObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVectorStoreFileBatchWithHttpInfo($vector_store_id, $create_vector_store_file_batch_request)
    {
        $request = $this->createVectorStoreFileBatchRequest($vector_store_id, $create_vector_store_file_batch_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createVectorStoreFileBatchAsync
     *
     * Create a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File Batch. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileBatchRequest $create_vector_store_file_batch_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createVectorStoreFileBatchAsync($vector_store_id, $create_vector_store_file_batch_request)
    {
        return $this->createVectorStoreFileBatchAsyncWithHttpInfo($vector_store_id, $create_vector_store_file_batch_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVectorStoreFileBatchAsyncWithHttpInfo
     *
     * Create a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File Batch. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileBatchRequest $create_vector_store_file_batch_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function createVectorStoreFileBatchAsyncWithHttpInfo($vector_store_id, $create_vector_store_file_batch_request)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileBatchObject';
        $request = $this->createVectorStoreFileBatchRequest($vector_store_id, $create_vector_store_file_batch_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVectorStoreFileBatch'
     *
     * @param  string $vector_store_id The ID of the vector store for which to create a File Batch. (required)
     * @param  \JeedomOpenAI\Model\CreateVectorStoreFileBatchRequest $create_vector_store_file_batch_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function createVectorStoreFileBatchRequest($vector_store_id, $create_vector_store_file_batch_request)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling createVectorStoreFileBatch'
            );
        }
        // verify the required parameter 'create_vector_store_file_batch_request' is set
        if ($create_vector_store_file_batch_request === null || (is_array($create_vector_store_file_batch_request) && count($create_vector_store_file_batch_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_vector_store_file_batch_request when calling createVectorStoreFileBatch'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/file_batches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_vector_store_file_batch_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($create_vector_store_file_batch_request));
            } else {
                $httpBody = $create_vector_store_file_batch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteVectorStore
     *
     * Delete a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\DeleteVectorStoreResponse
     */
    public function deleteVectorStore($vector_store_id)
    {
        list($response) = $this->deleteVectorStoreWithHttpInfo($vector_store_id);
        return $response;
    }

    /**
     * Operation deleteVectorStoreWithHttpInfo
     *
     * Delete a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\DeleteVectorStoreResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVectorStoreWithHttpInfo($vector_store_id)
    {
        $request = $this->deleteVectorStoreRequest($vector_store_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\DeleteVectorStoreResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\DeleteVectorStoreResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\DeleteVectorStoreResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteVectorStoreAsync
     *
     * Delete a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteVectorStoreAsync($vector_store_id)
    {
        return $this->deleteVectorStoreAsyncWithHttpInfo($vector_store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVectorStoreAsyncWithHttpInfo
     *
     * Delete a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteVectorStoreAsyncWithHttpInfo($vector_store_id)
    {
        $returnType = '\JeedomOpenAI\Model\DeleteVectorStoreResponse';
        $request = $this->deleteVectorStoreRequest($vector_store_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVectorStore'
     *
     * @param  string $vector_store_id The ID of the vector store to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteVectorStoreRequest($vector_store_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling deleteVectorStore'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation deleteVectorStoreFile
     *
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\DeleteVectorStoreFileResponse
     */
    public function deleteVectorStoreFile($vector_store_id, $file_id)
    {
        list($response) = $this->deleteVectorStoreFileWithHttpInfo($vector_store_id, $file_id);
        return $response;
    }

    /**
     * Operation deleteVectorStoreFileWithHttpInfo
     *
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file to delete. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\DeleteVectorStoreFileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVectorStoreFileWithHttpInfo($vector_store_id, $file_id)
    {
        $request = $this->deleteVectorStoreFileRequest($vector_store_id, $file_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\DeleteVectorStoreFileResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\DeleteVectorStoreFileResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\DeleteVectorStoreFileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteVectorStoreFileAsync
     *
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteVectorStoreFileAsync($vector_store_id, $file_id)
    {
        return $this->deleteVectorStoreFileAsyncWithHttpInfo($vector_store_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVectorStoreFileAsyncWithHttpInfo
     *
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function deleteVectorStoreFileAsyncWithHttpInfo($vector_store_id, $file_id)
    {
        $returnType = '\JeedomOpenAI\Model\DeleteVectorStoreFileResponse';
        $request = $this->deleteVectorStoreFileRequest($vector_store_id, $file_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVectorStoreFile'
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function deleteVectorStoreFileRequest($vector_store_id, $file_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling deleteVectorStoreFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteVectorStoreFile'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation getVectorStore
     *
     * Retrieves a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreObject
     */
    public function getVectorStore($vector_store_id)
    {
        list($response) = $this->getVectorStoreWithHttpInfo($vector_store_id);
        return $response;
    }

    /**
     * Operation getVectorStoreWithHttpInfo
     *
     * Retrieves a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to retrieve. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVectorStoreWithHttpInfo($vector_store_id)
    {
        $request = $this->getVectorStoreRequest($vector_store_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVectorStoreAsync
     *
     * Retrieves a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getVectorStoreAsync($vector_store_id)
    {
        return $this->getVectorStoreAsyncWithHttpInfo($vector_store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVectorStoreAsyncWithHttpInfo
     *
     * Retrieves a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getVectorStoreAsyncWithHttpInfo($vector_store_id)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreObject';
        $request = $this->getVectorStoreRequest($vector_store_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVectorStore'
     *
     * @param  string $vector_store_id The ID of the vector store to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getVectorStoreRequest($vector_store_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling getVectorStore'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getVectorStoreFile
     *
     * Retrieves a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file being retrieved. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileObject
     */
    public function getVectorStoreFile($vector_store_id, $file_id)
    {
        list($response) = $this->getVectorStoreFileWithHttpInfo($vector_store_id, $file_id);
        return $response;
    }

    /**
     * Operation getVectorStoreFileWithHttpInfo
     *
     * Retrieves a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file being retrieved. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVectorStoreFileWithHttpInfo($vector_store_id, $file_id)
    {
        $request = $this->getVectorStoreFileRequest($vector_store_id, $file_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVectorStoreFileAsync
     *
     * Retrieves a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file being retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getVectorStoreFileAsync($vector_store_id, $file_id)
    {
        return $this->getVectorStoreFileAsyncWithHttpInfo($vector_store_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVectorStoreFileAsyncWithHttpInfo
     *
     * Retrieves a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file being retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getVectorStoreFileAsyncWithHttpInfo($vector_store_id, $file_id)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileObject';
        $request = $this->getVectorStoreFileRequest($vector_store_id, $file_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVectorStoreFile'
     *
     * @param  string $vector_store_id The ID of the vector store that the file belongs to. (required)
     * @param  string $file_id The ID of the file being retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getVectorStoreFileRequest($vector_store_id, $file_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling getVectorStoreFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling getVectorStoreFile'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation getVectorStoreFileBatch
     *
     * Retrieves a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch being retrieved. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileBatchObject
     */
    public function getVectorStoreFileBatch($vector_store_id, $batch_id)
    {
        list($response) = $this->getVectorStoreFileBatchWithHttpInfo($vector_store_id, $batch_id);
        return $response;
    }

    /**
     * Operation getVectorStoreFileBatchWithHttpInfo
     *
     * Retrieves a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch being retrieved. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileBatchObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVectorStoreFileBatchWithHttpInfo($vector_store_id, $batch_id)
    {
        $request = $this->getVectorStoreFileBatchRequest($vector_store_id, $batch_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileBatchObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVectorStoreFileBatchAsync
     *
     * Retrieves a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch being retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getVectorStoreFileBatchAsync($vector_store_id, $batch_id)
    {
        return $this->getVectorStoreFileBatchAsyncWithHttpInfo($vector_store_id, $batch_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVectorStoreFileBatchAsyncWithHttpInfo
     *
     * Retrieves a vector store file batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch being retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function getVectorStoreFileBatchAsyncWithHttpInfo($vector_store_id, $batch_id)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileBatchObject';
        $request = $this->getVectorStoreFileBatchRequest($vector_store_id, $batch_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVectorStoreFileBatch'
     *
     * @param  string $vector_store_id The ID of the vector store that the file batch belongs to. (required)
     * @param  string $batch_id The ID of the file batch being retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function getVectorStoreFileBatchRequest($vector_store_id, $batch_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling getVectorStoreFileBatch'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling getVectorStoreFileBatch'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/file_batches/{batch_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_id' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listFilesInVectorStoreBatch
     *
     * Returns a list of vector store files in a batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  string $batch_id The ID of the file batch that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListVectorStoreFilesResponse
     */
    public function listFilesInVectorStoreBatch($vector_store_id, $batch_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        list($response) = $this->listFilesInVectorStoreBatchWithHttpInfo($vector_store_id, $batch_id, $limit, $order, $after, $before, $filter);
        return $response;
    }

    /**
     * Operation listFilesInVectorStoreBatchWithHttpInfo
     *
     * Returns a list of vector store files in a batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  string $batch_id The ID of the file batch that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListVectorStoreFilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFilesInVectorStoreBatchWithHttpInfo($vector_store_id, $batch_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        $request = $this->listFilesInVectorStoreBatchRequest($vector_store_id, $batch_id, $limit, $order, $after, $before, $filter);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListVectorStoreFilesResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListVectorStoreFilesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListVectorStoreFilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listFilesInVectorStoreBatchAsync
     *
     * Returns a list of vector store files in a batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  string $batch_id The ID of the file batch that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFilesInVectorStoreBatchAsync($vector_store_id, $batch_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        return $this->listFilesInVectorStoreBatchAsyncWithHttpInfo($vector_store_id, $batch_id, $limit, $order, $after, $before, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFilesInVectorStoreBatchAsyncWithHttpInfo
     *
     * Returns a list of vector store files in a batch.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  string $batch_id The ID of the file batch that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listFilesInVectorStoreBatchAsyncWithHttpInfo($vector_store_id, $batch_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListVectorStoreFilesResponse';
        $request = $this->listFilesInVectorStoreBatchRequest($vector_store_id, $batch_id, $limit, $order, $after, $before, $filter);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFilesInVectorStoreBatch'
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  string $batch_id The ID of the file batch that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listFilesInVectorStoreBatchRequest($vector_store_id, $batch_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling listFilesInVectorStoreBatch'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling listFilesInVectorStoreBatch'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/file_batches/{batch_id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter'] = $filter;
            }
        }


        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batch_id' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listVectorStoreFiles
     *
     * Returns a list of vector store files.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListVectorStoreFilesResponse
     */
    public function listVectorStoreFiles($vector_store_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        list($response) = $this->listVectorStoreFilesWithHttpInfo($vector_store_id, $limit, $order, $after, $before, $filter);
        return $response;
    }

    /**
     * Operation listVectorStoreFilesWithHttpInfo
     *
     * Returns a list of vector store files.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListVectorStoreFilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listVectorStoreFilesWithHttpInfo($vector_store_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        $request = $this->listVectorStoreFilesRequest($vector_store_id, $limit, $order, $after, $before, $filter);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListVectorStoreFilesResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListVectorStoreFilesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListVectorStoreFilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listVectorStoreFilesAsync
     *
     * Returns a list of vector store files.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listVectorStoreFilesAsync($vector_store_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        return $this->listVectorStoreFilesAsyncWithHttpInfo($vector_store_id, $limit, $order, $after, $before, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listVectorStoreFilesAsyncWithHttpInfo
     *
     * Returns a list of vector store files.
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listVectorStoreFilesAsyncWithHttpInfo($vector_store_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListVectorStoreFilesResponse';
        $request = $this->listVectorStoreFilesRequest($vector_store_id, $limit, $order, $after, $before, $filter);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listVectorStoreFiles'
     *
     * @param  string $vector_store_id The ID of the vector store that the files belong to. (required)
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     * @param  string $filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listVectorStoreFilesRequest($vector_store_id, $limit = 20, $order = 'desc', $after = null, $before = null, $filter = null)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling listVectorStoreFiles'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter'] = $filter;
            }
        }


        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation listVectorStores
     *
     * Returns a list of vector stores.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\ListVectorStoresResponse
     */
    public function listVectorStores($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        list($response) = $this->listVectorStoresWithHttpInfo($limit, $order, $after, $before);
        return $response;
    }

    /**
     * Operation listVectorStoresWithHttpInfo
     *
     * Returns a list of vector stores.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\ListVectorStoresResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listVectorStoresWithHttpInfo($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        $request = $this->listVectorStoresRequest($limit, $order, $after, $before);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\ListVectorStoresResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\ListVectorStoresResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\ListVectorStoresResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listVectorStoresAsync
     *
     * Returns a list of vector stores.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listVectorStoresAsync($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        return $this->listVectorStoresAsyncWithHttpInfo($limit, $order, $after, $before)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listVectorStoresAsyncWithHttpInfo
     *
     * Returns a list of vector stores.
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function listVectorStoresAsyncWithHttpInfo($limit = 20, $order = 'desc', $after = null, $before = null)
    {
        $returnType = '\JeedomOpenAI\Model\ListVectorStoresResponse';
        $request = $this->listVectorStoresRequest($limit, $order, $after, $before);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'listVectorStores'
     *
     * @param  int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. (optional, default to 20)
     * @param  string $order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. (optional, default to 'desc')
     * @param  string $after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
     * @param  string $before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function listVectorStoresRequest($limit = 20, $order = 'desc', $after = null, $before = null)
    {

        $resourcePath = '/vector_stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($after !== null) {
            if('form' === 'form' && is_array($after)) {
                foreach($after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['after'] = $after;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation modifyVectorStore
     *
     * Modifies a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to modify. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreRequest $update_vector_store_request update_vector_store_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreObject
     */
    public function modifyVectorStore($vector_store_id, $update_vector_store_request)
    {
        list($response) = $this->modifyVectorStoreWithHttpInfo($vector_store_id, $update_vector_store_request);
        return $response;
    }

    /**
     * Operation modifyVectorStoreWithHttpInfo
     *
     * Modifies a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to modify. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreRequest $update_vector_store_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyVectorStoreWithHttpInfo($vector_store_id, $update_vector_store_request)
    {
        $request = $this->modifyVectorStoreRequest($vector_store_id, $update_vector_store_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation modifyVectorStoreAsync
     *
     * Modifies a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to modify. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreRequest $update_vector_store_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyVectorStoreAsync($vector_store_id, $update_vector_store_request)
    {
        return $this->modifyVectorStoreAsyncWithHttpInfo($vector_store_id, $update_vector_store_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyVectorStoreAsyncWithHttpInfo
     *
     * Modifies a vector store.
     *
     * @param  string $vector_store_id The ID of the vector store to modify. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreRequest $update_vector_store_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function modifyVectorStoreAsyncWithHttpInfo($vector_store_id, $update_vector_store_request)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreObject';
        $request = $this->modifyVectorStoreRequest($vector_store_id, $update_vector_store_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyVectorStore'
     *
     * @param  string $vector_store_id The ID of the vector store to modify. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreRequest $update_vector_store_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function modifyVectorStoreRequest($vector_store_id, $update_vector_store_request)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling modifyVectorStore'
            );
        }
        // verify the required parameter 'update_vector_store_request' is set
        if ($update_vector_store_request === null || (is_array($update_vector_store_request) && count($update_vector_store_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_vector_store_request when calling modifyVectorStore'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($update_vector_store_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($update_vector_store_request));
            } else {
                $httpBody = $update_vector_store_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation retrieveVectorStoreFileContent
     *
     * Retrieve the parsed contents of a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store. (required)
     * @param  string $file_id The ID of the file within the vector store. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileContentResponse
     */
    public function retrieveVectorStoreFileContent($vector_store_id, $file_id)
    {
        list($response) = $this->retrieveVectorStoreFileContentWithHttpInfo($vector_store_id, $file_id);
        return $response;
    }

    /**
     * Operation retrieveVectorStoreFileContentWithHttpInfo
     *
     * Retrieve the parsed contents of a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store. (required)
     * @param  string $file_id The ID of the file within the vector store. (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveVectorStoreFileContentWithHttpInfo($vector_store_id, $file_id)
    {
        $request = $this->retrieveVectorStoreFileContentRequest($vector_store_id, $file_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileContentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileContentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileContentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation retrieveVectorStoreFileContentAsync
     *
     * Retrieve the parsed contents of a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store. (required)
     * @param  string $file_id The ID of the file within the vector store. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function retrieveVectorStoreFileContentAsync($vector_store_id, $file_id)
    {
        return $this->retrieveVectorStoreFileContentAsyncWithHttpInfo($vector_store_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveVectorStoreFileContentAsyncWithHttpInfo
     *
     * Retrieve the parsed contents of a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store. (required)
     * @param  string $file_id The ID of the file within the vector store. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function retrieveVectorStoreFileContentAsyncWithHttpInfo($vector_store_id, $file_id)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileContentResponse';
        $request = $this->retrieveVectorStoreFileContentRequest($vector_store_id, $file_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveVectorStoreFileContent'
     *
     * @param  string $vector_store_id The ID of the vector store. (required)
     * @param  string $file_id The ID of the file within the vector store. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function retrieveVectorStoreFileContentRequest($vector_store_id, $file_id)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling retrieveVectorStoreFileContent'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling retrieveVectorStoreFileContent'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/files/{file_id}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation searchVectorStore
     *
     * Search a vector store for relevant chunks based on a query and file attributes filter.
     *
     * @param  string $vector_store_id The ID of the vector store to search. (required)
     * @param  \JeedomOpenAI\Model\VectorStoreSearchRequest $vector_store_search_request vector_store_search_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreSearchResultsPage
     */
    public function searchVectorStore($vector_store_id, $vector_store_search_request)
    {
        list($response) = $this->searchVectorStoreWithHttpInfo($vector_store_id, $vector_store_search_request);
        return $response;
    }

    /**
     * Operation searchVectorStoreWithHttpInfo
     *
     * Search a vector store for relevant chunks based on a query and file attributes filter.
     *
     * @param  string $vector_store_id The ID of the vector store to search. (required)
     * @param  \JeedomOpenAI\Model\VectorStoreSearchRequest $vector_store_search_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreSearchResultsPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchVectorStoreWithHttpInfo($vector_store_id, $vector_store_search_request)
    {
        $request = $this->searchVectorStoreRequest($vector_store_id, $vector_store_search_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreSearchResultsPage',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreSearchResultsPage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreSearchResultsPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation searchVectorStoreAsync
     *
     * Search a vector store for relevant chunks based on a query and file attributes filter.
     *
     * @param  string $vector_store_id The ID of the vector store to search. (required)
     * @param  \JeedomOpenAI\Model\VectorStoreSearchRequest $vector_store_search_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function searchVectorStoreAsync($vector_store_id, $vector_store_search_request)
    {
        return $this->searchVectorStoreAsyncWithHttpInfo($vector_store_id, $vector_store_search_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchVectorStoreAsyncWithHttpInfo
     *
     * Search a vector store for relevant chunks based on a query and file attributes filter.
     *
     * @param  string $vector_store_id The ID of the vector store to search. (required)
     * @param  \JeedomOpenAI\Model\VectorStoreSearchRequest $vector_store_search_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function searchVectorStoreAsyncWithHttpInfo($vector_store_id, $vector_store_search_request)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreSearchResultsPage';
        $request = $this->searchVectorStoreRequest($vector_store_id, $vector_store_search_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchVectorStore'
     *
     * @param  string $vector_store_id The ID of the vector store to search. (required)
     * @param  \JeedomOpenAI\Model\VectorStoreSearchRequest $vector_store_search_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function searchVectorStoreRequest($vector_store_id, $vector_store_search_request)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling searchVectorStore'
            );
        }
        // verify the required parameter 'vector_store_search_request' is set
        if ($vector_store_search_request === null || (is_array($vector_store_search_request) && count($vector_store_search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_search_request when calling searchVectorStore'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($vector_store_search_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($vector_store_search_request));
            } else {
                $httpBody = $vector_store_search_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation updateVectorStoreFileAttributes
     *
     * Update attributes on a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store the file belongs to. (required)
     * @param  string $file_id The ID of the file to update attributes. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreFileAttributesRequest $update_vector_store_file_attributes_request update_vector_store_file_attributes_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \JeedomOpenAI\Model\VectorStoreFileObject
     */
    public function updateVectorStoreFileAttributes($vector_store_id, $file_id, $update_vector_store_file_attributes_request)
    {
        list($response) = $this->updateVectorStoreFileAttributesWithHttpInfo($vector_store_id, $file_id, $update_vector_store_file_attributes_request);
        return $response;
    }

    /**
     * Operation updateVectorStoreFileAttributesWithHttpInfo
     *
     * Update attributes on a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store the file belongs to. (required)
     * @param  string $file_id The ID of the file to update attributes. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreFileAttributesRequest $update_vector_store_file_attributes_request (required)
     *
     * @throws \JeedomOpenAI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \JeedomOpenAI\Model\VectorStoreFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVectorStoreFileAttributesWithHttpInfo($vector_store_id, $file_id, $update_vector_store_file_attributes_request)
    {
        $request = $this->updateVectorStoreFileAttributesRequest($vector_store_id, $file_id, $update_vector_store_file_attributes_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\JeedomOpenAI\Model\VectorStoreFileObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\JeedomOpenAI\Model\VectorStoreFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JeedomOpenAI\Model\VectorStoreFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateVectorStoreFileAttributesAsync
     *
     * Update attributes on a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store the file belongs to. (required)
     * @param  string $file_id The ID of the file to update attributes. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreFileAttributesRequest $update_vector_store_file_attributes_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function updateVectorStoreFileAttributesAsync($vector_store_id, $file_id, $update_vector_store_file_attributes_request)
    {
        return $this->updateVectorStoreFileAttributesAsyncWithHttpInfo($vector_store_id, $file_id, $update_vector_store_file_attributes_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVectorStoreFileAttributesAsyncWithHttpInfo
     *
     * Update attributes on a vector store file.
     *
     * @param  string $vector_store_id The ID of the vector store the file belongs to. (required)
     * @param  string $file_id The ID of the file to update attributes. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreFileAttributesRequest $update_vector_store_file_attributes_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function updateVectorStoreFileAttributesAsyncWithHttpInfo($vector_store_id, $file_id, $update_vector_store_file_attributes_request)
    {
        $returnType = '\JeedomOpenAI\Model\VectorStoreFileObject';
        $request = $this->updateVectorStoreFileAttributesRequest($vector_store_id, $file_id, $update_vector_store_file_attributes_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVectorStoreFileAttributes'
     *
     * @param  string $vector_store_id The ID of the vector store the file belongs to. (required)
     * @param  string $file_id The ID of the file to update attributes. (required)
     * @param  \JeedomOpenAI\Model\UpdateVectorStoreFileAttributesRequest $update_vector_store_file_attributes_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function updateVectorStoreFileAttributesRequest($vector_store_id, $file_id, $update_vector_store_file_attributes_request)
    {
        // verify the required parameter 'vector_store_id' is set
        if ($vector_store_id === null || (is_array($vector_store_id) && count($vector_store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vector_store_id when calling updateVectorStoreFileAttributes'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling updateVectorStoreFileAttributes'
            );
        }
        // verify the required parameter 'update_vector_store_file_attributes_request' is set
        if ($update_vector_store_file_attributes_request === null || (is_array($update_vector_store_file_attributes_request) && count($update_vector_store_file_attributes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_vector_store_file_attributes_request when calling updateVectorStoreFileAttributes'
            );
        }

        $resourcePath = '/vector_stores/{vector_store_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($vector_store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vector_store_id' . '}',
                ObjectSerializer::toPathValue($vector_store_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($update_vector_store_file_attributes_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($update_vector_store_file_attributes_request));
            } else {
                $httpBody = $update_vector_store_file_attributes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
