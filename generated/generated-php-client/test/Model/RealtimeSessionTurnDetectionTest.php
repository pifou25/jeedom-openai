<?php
/**
 * RealtimeSessionTurnDetectionTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JeedomOpenAI\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * RealtimeSessionTurnDetectionTest Class Doc Comment
 *
 * @category    Class
 * @description Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to &#x60;null&#x60; to turn off, in which case the client must manually trigger model response. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech. Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \&quot;uhhm\&quot;, the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
 * @package     JeedomOpenAI
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RealtimeSessionTurnDetectionTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "RealtimeSessionTurnDetection"
     */
    public function testRealtimeSessionTurnDetection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "eagerness"
     */
    public function testPropertyEagerness()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "threshold"
     */
    public function testPropertyThreshold()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "prefix_padding_ms"
     */
    public function testPropertyPrefixPaddingMs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "silence_duration_ms"
     */
    public function testPropertySilenceDurationMs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "create_response"
     */
    public function testPropertyCreateResponse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "interrupt_response"
     */
    public function testPropertyInterruptResponse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
