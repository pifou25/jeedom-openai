<?php
/**
 * VectorStoresApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace JeedomOpenAI\Test\Api;

use \JeedomOpenAI\Configuration;
use \JeedomOpenAI\ApiException;
use \JeedomOpenAI\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * VectorStoresApiTest Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VectorStoresApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelVectorStoreFileBatch
     *
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible..
     *
     */
    public function testCancelVectorStoreFileBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createVectorStore
     *
     * Create a vector store..
     *
     */
    public function testCreateVectorStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createVectorStoreFile
     *
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object)..
     *
     */
    public function testCreateVectorStoreFile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createVectorStoreFileBatch
     *
     * Create a vector store file batch..
     *
     */
    public function testCreateVectorStoreFileBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteVectorStore
     *
     * Delete a vector store..
     *
     */
    public function testDeleteVectorStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteVectorStoreFile
     *
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint..
     *
     */
    public function testDeleteVectorStoreFile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVectorStore
     *
     * Retrieves a vector store..
     *
     */
    public function testGetVectorStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVectorStoreFile
     *
     * Retrieves a vector store file..
     *
     */
    public function testGetVectorStoreFile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVectorStoreFileBatch
     *
     * Retrieves a vector store file batch..
     *
     */
    public function testGetVectorStoreFileBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listFilesInVectorStoreBatch
     *
     * Returns a list of vector store files in a batch..
     *
     */
    public function testListFilesInVectorStoreBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVectorStoreFiles
     *
     * Returns a list of vector store files..
     *
     */
    public function testListVectorStoreFiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVectorStores
     *
     * Returns a list of vector stores..
     *
     */
    public function testListVectorStores()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modifyVectorStore
     *
     * Modifies a vector store..
     *
     */
    public function testModifyVectorStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for retrieveVectorStoreFileContent
     *
     * Retrieve the parsed contents of a vector store file..
     *
     */
    public function testRetrieveVectorStoreFileContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchVectorStore
     *
     * Search a vector store for relevant chunks based on a query and file attributes filter..
     *
     */
    public function testSearchVectorStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateVectorStoreFileAttributes
     *
     * Update attributes on a vector store file..
     *
     */
    public function testUpdateVectorStoreFileAttributes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
