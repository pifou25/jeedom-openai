<?php
/**
 * ProjectsApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace JeedomOpenAI\Test\Api;

use \JeedomOpenAI\Configuration;
use \JeedomOpenAI\ApiException;
use \JeedomOpenAI\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ProjectsApiTest Class Doc Comment
 *
 * @category Class
 * @package  JeedomOpenAI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProjectsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for archiveProject
     *
     * Archives a project in the organization. Archived projects cannot be used or updated..
     *
     */
    public function testArchiveProject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createProject
     *
     * Create a new project in the organization. Projects can be created and archived, but cannot be deleted..
     *
     */
    public function testCreateProject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createProjectServiceAccount
     *
     * Creates a new service account in the project. This also returns an unredacted API key for the service account..
     *
     */
    public function testCreateProjectServiceAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createProjectUser
     *
     * Adds a user to the project. Users must already be members of the organization to be added to a project..
     *
     */
    public function testCreateProjectUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteProjectApiKey
     *
     * Deletes an API key from the project..
     *
     */
    public function testDeleteProjectApiKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteProjectServiceAccount
     *
     * Deletes a service account from the project..
     *
     */
    public function testDeleteProjectServiceAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteProjectUser
     *
     * Deletes a user from the project..
     *
     */
    public function testDeleteProjectUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listProjectApiKeys
     *
     * Returns a list of API keys in the project..
     *
     */
    public function testListProjectApiKeys()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listProjectRateLimits
     *
     * Returns the rate limits per model for a project..
     *
     */
    public function testListProjectRateLimits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listProjectServiceAccounts
     *
     * Returns a list of service accounts in the project..
     *
     */
    public function testListProjectServiceAccounts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listProjectUsers
     *
     * Returns a list of users in the project..
     *
     */
    public function testListProjectUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listProjects
     *
     * Returns a list of projects..
     *
     */
    public function testListProjects()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modifyProject
     *
     * Modifies a project in the organization..
     *
     */
    public function testModifyProject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modifyProjectUser
     *
     * Modifies a user's role in the project..
     *
     */
    public function testModifyProjectUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for retrieveProject
     *
     * Retrieves a project..
     *
     */
    public function testRetrieveProject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for retrieveProjectApiKey
     *
     * Retrieves an API key in the project..
     *
     */
    public function testRetrieveProjectApiKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for retrieveProjectServiceAccount
     *
     * Retrieves a service account in the project..
     *
     */
    public function testRetrieveProjectServiceAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for retrieveProjectUser
     *
     * Retrieves a user in the project..
     *
     */
    public function testRetrieveProjectUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateProjectRateLimits
     *
     * Updates a project rate limit..
     *
     */
    public function testUpdateProjectRateLimits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
